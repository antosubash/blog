<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
        <channel>
            <title>Anto Subash</title>
            <link>https://blog.antosubash.com</link>
            <description>Anto Subash's Blog</description>
            <language>en</language>
            <item>
          <title>Azure Deployment for .Net</title>
          <link>https://blog.antosubash.com/posts/azure-deployment-for-dotnet</link>
          <guid>https://blog.antosubash.com/posts/azure-deployment-for-dotnet</guid>
          <pubDate>Wed, 12 Jul 2023 11:53:48 GMT</pubDate>
          <description>This is a collection of Azure Deployment for articles for .Net</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>Azure Deployment for .Net is a collection of articles that will help you to deploy your .Net application to Azure. I usually self-host most of my apps in Hetzner Cloud, but I also have some apps running in Azure. I have been using Azure for a long time but there is no collection of articles that I can refer to when I need to deploy a new app. So I decided to create this collection of articles to help me and others to deploy .Net apps to Azure.</p>
<h2>Why?</h2>
<p>Most of the time, I deploy my .Net apps to Hetzner Cloud. I have written a collection of articles on how to deploy .Net apps to Hetzner Cloud. But When I do consulting work, I deploy the apps to Azure because most of the clients are using Azure. I have been using Azure for a long time but there is no collection of articles that I can refer to when I need to deploy a new app. So I decided to create this collection of articles to help me and others to deploy .Net apps to Azure.</p>
<h2>Prerequisites</h2>
<ul>
<li><a href="https://azure.microsoft.com/en-us/free/">Azure Account</a></li>
<li><a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli">Azure CLI</a></li>
<li><a href="https://github.com">GitHub Account</a></li>
<li><a href="https://www.terraform.io/downloads.html">Terraform</a></li>
<li><a href="https://www.docker.com/products/docker-desktop">Docker</a></li>
</ul>
<h2>Azure Deployment for .Net</h2>
<p>There are many ways to deploy your .Net application to Azure. I want to write about few of them that I have used in the past.</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/app-service/overview">Azure App Service</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/aks/">Azure Kubernetes Service</a></li>
</ul>
<h2>Azure App Service</h2>
<p>Azure App Service is a fully managed web hosting service for building web apps, mobile back ends, and RESTful APIs. It is a platform as a service (PaaS) offering of Microsoft Azure. It is a highly scalable service that allows developers to deploy their applications to Azure without worrying about the underlying infrastructure. It supports many languages and frameworks, including .NET, Node.js, Python, Java, PHP, Ruby, and Go. It is a great service for hosting your .Net application.</p>
<p>you can find the full article <a href="/posts/deploy-dotnet-application-in-azure-app-service">here</a></p>
<h2>Azure Kubernetes Service</h2>
<p>Azure Kubernetes Service (AKS) is a managed container orchestration service, based on the open source Kubernetes system, which is available on the Microsoft Azure public cloud. Azure Kubernetes Service is used to deploy and manage containerized applications more easily and efficiently. Azure Kubernetes Service offers serverless Kubernetes, an integrated continuous integration and continuous delivery (CI/CD) experience, and enterprise-grade security and governance. Unite your development and operations teams on a single platform to rapidly build, deliver, and scale applications with confidence.</p>
<p>you can find the full article <a href="/posts/deploy-dotnet-application-in-azure-kubernetes-service">here</a></p>
<h2>Other Azure Deployment</h2>
<p>There are many other ways to deploy your .Net application to Azure and I will be writing about them in the future. I will be adding the links to the articles here.</p>
<h2>Conclusion</h2>
<p>I hope this collection of articles will help you to deploy your .Net application to Azure. If you have any questions or feedback, please feel free to comment below and let me know.</p>]]></content:encoded>
          </item><item>
          <title>Deploy .Net App to Azure App Service using GitHub Actions</title>
          <link>https://blog.antosubash.com/posts/deploy-dotnet-application-in-azure-app-service</link>
          <guid>https://blog.antosubash.com/posts/deploy-dotnet-application-in-azure-app-service</guid>
          <pubDate>Wed, 12 Jul 2023 00:00:00 GMT</pubDate>
          <description>How to deploy a .Net app to Azure App Service using GitHub Actions</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post, we will see how to deploy a .Net app to Azure App Service using GitHub Actions.</p>
<h2>Prerequisites</h2>
<ul>
<li>GitHub Account</li>
<li>Azure Account</li>
</ul>
<h2>Create a GitHub Repository</h2>
<h3>Install GitHub CLI</h3>
<p>Install GitHub CLI from <a href="https://cli.github.com/">here</a>.</p>
<h3>Create a GitHub Repository</h3>
<p>Create a GitHub repository using the following command.</p>
<pre><code class="language-bash">gh repo create &lt;repo-name&gt; --public
</code></pre>
<h3>Clone the GitHub Repository</h3>
<p>Clone the GitHub repository using the following command.</p>
<pre><code class="language-bash">gh repo clone &lt;repo-name&gt;
</code></pre>
<h2>Create a .Net App</h2>
<h3>Install .Net SDK</h3>
<p>Install .Net SDK from <a href="https://dotnet.microsoft.com/download">here</a>.</p>
<h3>Create a .Net App</h3>
<p>Create a .Net app using the following command.</p>
<pre><code class="language-bash">dotnet new webapp -o &lt;app-name&gt;
</code></pre>
<h3>Run the .Net App</h3>
<p>Run the .Net app using the following command.</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>For now we will only use the empty application.</p>
<h2>Create an Azure App Service</h2>
<h3>Install Azure CLI</h3>
<p>Install Azure CLI from <a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli">here</a>.</p>
<h3>Login to Azure</h3>
<p>Login to Azure using the following command.</p>
<pre><code class="language-bash">az login --use-device-code
</code></pre>
<h3>Create an Azure App Service</h3>
<p>Create an Azure App Service using the following command.</p>
<pre><code class="language-bash">az webapp up --name &lt;app-name&gt; --sku F1
</code></pre>
<h3>Get the Azure App Service Publish Profile</h3>
<p>Get the Azure App Service publish profile using the following command.</p>
<pre><code class="language-bash">az webapp deployment list-publishing-profiles --name &lt;app-name&gt; --output json --query &quot;[?contains(publishMethod, &#x27;FTP&#x27;)].[publishUrl,userName,userPWD]&quot; --output tsv
</code></pre>
<h2>Create a GitHub Action</h2>
<h3>Create a GitHub Action</h3>
<p>Create a GitHub Action using the following command.</p>
<pre><code class="language-bash">dotnet new gitignore
</code></pre>
<h3>Create a GitHub Action Workflow</h3>
<p>We will create a GitHub Action workflow to build, test, publish and deploy the .Net app to Azure App Service. Create a GitHub Action workflow using the following command.</p>
<h4>Create a github workflow file</h4>
<pre><code class="language-bash">mkdir -p .github/workflows
new-item -path .github/workflows -name dotnet.yml -itemtype file
</code></pre>
<h4>Update the GitHub Action Workflow</h4>
<p>Update the GitHub Action workflow with the following content.</p>
<pre><code class="language-yaml">name: .NET Core App CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
    build:
        runs-on: ubuntu-latest
    
        steps:
        - uses: actions/checkout@v2
    
        - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
            dotnet-version: 5.0.x
    
        - name: Build with dotnet
        run: dotnet build --configuration Release
    
        - name: Test with dotnet
        run: dotnet test --no-restore --verbosity normal
    
        - name: Publish with dotnet
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

        - name: Login via Azure CLI
        uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
            app-name: &lt;app-name&gt;
            slot-name: production
            publish-profile: ${{ secrets.AzureAppService_PublishProfile_&lt;app-name&gt; }}
            package: ${{env.DOTNET_ROOT}}/myapp
</code></pre>]]></content:encoded>
          </item><item>
          <title>ABP no-layer module template</title>
          <link>https://blog.antosubash.com/posts/abp-no-layer-module-template</link>
          <guid>https://blog.antosubash.com/posts/abp-no-layer-module-template</guid>
          <pubDate>Sun, 21 May 2023 17:28:49 GMT</pubDate>
          <description>In this article, you will learn how to create a no-layer module template for abp application.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this article, you will learn how to create a no-layer module template for abp application.</p>
<h2>Why create a no-layer module template?</h2>
<p>In the abp framework, when you create a module, by default, it will create a layer module. But in some cases, you may not need to create a module without DDD. For example, you want to create a module that only contains a controller and a service. At this time, you can create a no-layer module.</p>
<p>I create lots of ABP application and modules for my work. I found that I often don&#x27;t use all the features of the template and I have to delete some files and projects. So I started creating project with no-layer template. I found that it is very convenient to use. but If I want to create a no-layer module, I have to create it manually. So I created a no-layer module template.</p>
<blockquote>
<p>Note: The no-layer module is not a recommended module type. It is recommended to use a layer module provided by the abp framework. This is just a experiment.</p>
</blockquote>
<h2>Primary Use Cases</h2>
<p>Right now, the no-layer module template is only used for creating simple API&#x27;s. If you have a module which only contains few api endpoints, you can use this template. the current focus is to support only the the no-layer template. but you can also use it in other cases if you want. because it is a just a normal ABP module.</p>
<h2>Create a no-layer module template</h2>
<h3>Install the template</h3>
<pre><code class="language-bash">dotnet new -i Anto.Abp.Module.Template
</code></pre>
<h3>Create a no-layer module</h3>
<pre><code class="language-bash">dotnet new abp-module -n MyModuleName
</code></pre>
<p>The above command will create a no-layer module named <code>MyModuleName</code>. make sure you create in the <code>modules</code> folder. If you want to create a no-layer module in another folder.</p>
<p>This command will only create the module. you have to manually add the module to the application.</p>
<h2>Structure of the no-layer module</h2>
<p>The main focus is simplicity. All the projects in the DDD layers are removed and replaced with folders in the single project. you can keep the things you use and delete the things you don&#x27;t use.</p>
<h2>Future plans</h2>
<ul>
<li>Remove AutoMapper</li>
<li>Remove Localization</li>
<li>Add plopjs generator to generate API endpoints</li>
</ul>
<p>Repo: https://github.com/antosubash/abp-module-template</p>
<h2>Conclusion</h2>
<p>This is just a experiment. I&#x27;m not using this in any production application. I started this because I felt like I was doing too many premature optimizations when I was creating a module. After creating few modules with <code>abp add-module</code> command, your solution will be filled with lots of projects and files and test projects. It increases build time and VS starts to lag. I&#x27;m hoping this will solve that problem. But I&#x27;m not sure about that. I&#x27;m still testing this. maybe I will use this in my next project. If you have any questions, please comment below.</p>]]></content:encoded>
          </item><item>
          <title>Abp CLI Template</title>
          <link>https://blog.antosubash.com/posts/abp-cli-template</link>
          <guid>https://blog.antosubash.com/posts/abp-cli-template</guid>
          <pubDate>Sat, 20 May 2023 00:00:00 GMT</pubDate>
          <description>In this post we will see how to create a Cli for your abp application.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to create a Cli for your abp application.</p>
<h2>Why a CLI?</h2>
<p>The CLI is a great way to automate repetitive tasks. I use it to import large amounts of data into the database, to create new entities, to seed dummy data, etc.</p>
<h2>Create a new CLI</h2>
<p>To create a new CLI, you need to install the cli dotnet new template.</p>
<pre><code class="language-bash">dotnet new install Anto.Cli.Template
</code></pre>
<p>Then you can create a new CLI project.</p>
<pre><code class="language-bash">dotnet new cli-template -o MyProject --api myabpproject.com
</code></pre>
<blockquote>
<p>Note: The --api parameter is the url of your abp project.</p>
</blockquote>
<h2>How to use it</h2>
<p>The CLI is a dotnet core console application. You can run it with the following command.</p>
<pre><code class="language-bash">dotnet run -- --help
</code></pre>
<h2>Features</h2>
<ul>
<li>Login</li>
<li>Logout</li>
<li>Seed Tenant</li>
<li>Seed User</li>
</ul>
<h2>Future plans</h2>
<ul>
<li>Import data from csv</li>
</ul>
<h2>Setup</h2>
<p>Once you have created the cli there are few things you need to do.</p>
<ul>
<li>Create a new OpenIdConnect client in your abp project for the cli.</li>
<li>Update the ClientId and Scope in the <code>AuthService.cs</code> file.</li>
</ul>
<h2>Generating HttpClient?</h2>
<p>The CLI uses the abp REST API to communicate with the abp project. But that means you need to generate the HttpClient before you can use it. To do that, I have used <code>nswag</code> to generate the client. To generate the client, you need to run the following command.</p>
<pre><code class="language-bash">yarn gen-api
</code></pre>
<blockquote>
<p>Note: You need to have <code>nswag</code> installed globally.#</p>
</blockquote>
<p>Check the <code>package.json</code> file for more details.</p>
<h2>Storing the token</h2>
<p>The CLI stores the token in the <code>access-token.bin</code> file. If you want to change the location of the file, you can change it in the <code>CliPaths.cs</code> file. the token is not encrypted, keep that in mind.</p>
<h2>Code generation</h2>
<p>This cli uses <code>plop</code> to generate code. You can find the templates in the <code>plop-templates</code> folder. You can add your own templates there.</p>
<p>Right now, there is only 3 templates. you can just run the following command to generate the code.</p>
<pre><code class="language-bash">yarn plop
</code></pre>
<blockquote>
<p>Note: Make sure you have install npm packages before running the command.</p>
</blockquote>
<p>Repo: https://github.com/antosubash/abp-cli-template</p>
<h2>Conclusion</h2>
<p>This is a very simple CLI, but it can be very useful. I hope you like it.</p>]]></content:encoded>
          </item><item>
          <title>ABP React Template</title>
          <link>https://blog.antosubash.com/posts/abp-react-template</link>
          <guid>https://blog.antosubash.com/posts/abp-react-template</guid>
          <pubDate>Mon, 03 Apr 2023 12:54:31 GMT</pubDate>
          <description>React Starter Template for ABP application.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>React Starter Template for ABP application with Next.js and Tailwind CSS is ready to use. You can use this template to start your next project.</p>
<h2>Why?</h2>
<p>I have been working on a project that uses ABP Framework, Next.js and Tailwind CSS for a while and I want to create a template that will kickstart my next project easily. Since ABP doesn&#x27;t have React Template yet. I thought it would be useful for others as well. So, I decided to share it with you. I hope you find it useful.</p>
<h2>What is ABP Framework?</h2>
<p><a href="https://abp.io/">ABP Framework</a> is a full stack web application framework. It is based on ASP.NET Core. It provides a lot of features out of the box. You can use it to build enterprise applications. It is free and open source. You can find the source code on <a href="https://github.com/abpframework/abp">GitHub</a>. You can also find the documentation on <a href="https://docs.abp.io/">docs.abp.io</a>.</p>
<h2>What is Next.js?</h2>
<p><a href="https://nextjs.org/">Next.js</a> is a React framework. It removes lots of complexity of the react application. It is free and open source. You can find the source code on <a href="https://github.com/vercel/next.js">GitHub</a>.</p>
<h2>What is Tailwind CSS?</h2>
<p><a href="https://tailwindcss.com/">Tailwind CSS</a> is a utility-first CSS framework. You can find the source code on <a href="https://github.com/tailwindlabs/tailwindcss">GitHub</a>.</p>
<h2>Getting Started</h2>
<h3>Prerequisites</h3>
<ul>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://pnpm.js.org/en/installation">pnpm</a></li>
<li><a href="https://abp.io/">ABP Framework</a></li>
<li><a href="https://dotnet.microsoft.com/download/dotnet/7.0">.Net 7</a></li>
</ul>
<h3>Installing Template</h3>
<p>Install the ABP React .Net Template</p>
<pre><code class="language-bash">dotnet new install Anto.Abp.React.Template
</code></pre>
<blockquote>
<p>Note: This only creates React Application. You need to create an ABP application separately. You can find the documentation <a href="https://docs.abp.io/en/abp/latest/Getting-Started">here</a>.</p>
</blockquote>
<h3>Creating a new project</h3>
<p>Create a new project using the template</p>
<pre><code class="language-bash">dotnet new abp-react -o my-project-name
</code></pre>
<blockquote>
<p>Note: You can use any name for the project. I used <code>my-project-name</code> for this example. keep in mind that the project name should be in kebab case (all lowercase and words separated by hyphens) because it will be used as the name of the packages org name.</p>
</blockquote>
<h3>Running the project</h3>
<pre><code class="language-bash">cd MyProjectName
pnpm install
pnpm dev
</code></pre>
<blockquote>
<p>Note: You can use any other package manager instead of pnpm. But I recommend using pnpm. It&#x27;s fast and reliable. Make sure you have ABP application is running before running the app.</p>
</blockquote>
<h2>Best Use Case</h2>
<p>The best use case is to create customer facing applications. You can use it to create a dashboard or a portal. You can also use it to create a public website. The template is not limited to these use cases. You can use it to create any kind of application. It supports SSR, CSR and static pages.</p>
<h2>Demo Application</h2>
<p>You can find the demo application <a href="https://abpreact.antosubash.com/">here</a>. You can use the following credentials to login.</p>
<ul>
<li>Username: admin</li>
<li>Password: 1q2w3E*</li>
</ul>
<h2>Source Code</h2>
<p>You can find the source code on <a href="https://github.com/antosubash/abpreact">GitHub</a>.</p>
<blockquote>
<p>If you find this template useful, please consider starring the repository. It will help others to find it easily.</p>
</blockquote>
<h2>Key Technologies</h2>
<ul>
<li>Next JS</li>
<li>Tailwind CSS</li>
<li>TypeScript</li>
<li>DaisyUI</li>
<li>Radix UI</li>
</ul>
<h2>Features</h2>
<ul>
<li>Authentication</li>
<li>Authorization</li>
<li>Role Management</li>
<li>User Management</li>
<li>Tenant Management</li>
<li>Localization</li>
<li>Theming</li>
<li>Responsive Design</li>
</ul>
<h2>Goals</h2>
<ul>
<li>Provide a starter template for ABP Framework with React.</li>
<li>It should be easy to use and extend.</li>
<li>It should be easy to add new features.</li>
<li>It should be easy to customize.</li>
<li>It should be easy to integrate with ABP Framework.</li>
<li>It should be up to date with ABP Framework and React.</li>
</ul>
<p>The main focus is the customization. you should be able to bring your own Design system and UI components. I have only used Tailwind CSS and Radix UI for the demo application. You can use any other design system and UI components.</p>
<h2>Special Thanks</h2>
<p>Special thanks to <a href="https://github.com/sajanv88">Sajan</a> for his help. His help was invaluable. I started this project a while ago. But I couldn&#x27;t find time to finish it. He helped me to finish it. Thanks a lot, Sajan.</p>
<h2>Documentation</h2>
<p>I&#x27;m working on the documentation. It will be available soon.</p>
<h2>Contributing</h2>
<p>I&#x27;m open to contributions. Please feel free to open an issue or a pull request.</p>
<h2>What to expect next?</h2>
<p>Multi-tenant support is coming soon. I&#x27;m working on it. I will update this post when it&#x27;s ready. I will also update the documentation.</p>
<h2>Road map</h2>
<p>Most of the features are implemented. We are planning to keep it similar to the ABP Framework Open Source Application. That means all the commercial features will not be implemented.</p>
<h2>Conclusion</h2>
<p>I hope you find this template useful. If you have any questions or suggestions, please feel free to open an issue or a pull request. I will try to answer them as soon as possible. Thanks for reading. Happy coding!</p>]]></content:encoded>
          </item><item>
          <title>Abp Dockerfile</title>
          <link>https://blog.antosubash.com/posts/abp-docker-file</link>
          <guid>https://blog.antosubash.com/posts/abp-docker-file</guid>
          <pubDate>Sun, 19 Mar 2023 21:52:11 GMT</pubDate>
          <description>In this post we will see how to create proper docker file for your abp application.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to create proper docker file for your abp application.</p>
<h2>What is the problem?</h2>
<p>If you are using abp framework for your application, you might have noticed that abp framework stoped including the &quot;libs&quot; folder in the application template. This was done to reduce the size of the application. It is a good practice to not include the &quot;libs&quot; folder in the sorces control. But if you are using docker, you need to include the &quot;libs&quot; folder in the docker image.
This is a problem when you are doing CI/CD.</p>
<p>We will see what are the ways to solve this problem.</p>
<h2>Solutions</h2>
<p>There are few ways to solve this problem.</p>
<h3>1. Include the &quot;libs&quot; folder in the source control</h3>
<p>This is the easiest way to solve the problem. But it is not a good practice to include the &quot;libs&quot; folder in the source control. I have been using this method for a long time. But I have decided to move on and find a better solution.</p>
<h3>2. Install the npm packages in CI/CD pipeline</h3>
<p>I have tried this method. It works but it is not a good solution. Because then i&#x27;m tied to the CI/CD product. If i want to change the CI/CD product, i have to change the way i install the npm packages.</p>
<h3>3. Create a docker file which will install the npm packages</h3>
<p>This is the best solution. We will create a docker file which will install the npm packages. Then we will use this docker file in our CI/CD pipeline.</p>
<h2>Create a docker file</h2>
<p>We will create a docker file which will install the npm packages. Then we will use this docker file in our CI/CD pipeline.</p>
<h3>1. Create a docker file</h3>
<p>Create a docker file in the root of your application. Name it &quot;Dockerfile&quot;.</p>
<h3>2. Add the following content to the docker file</h3>
<pre><code class="language-bash">FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
WORKDIR /app
EXPOSE 80

ENV ASPNETCORE_URLS=http://+:80

FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
WORKDIR /src

# set up node
ENV NODE_VERSION 16.13.0
ENV NODE_DOWNLOAD_URL https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz
ENV NODE_DOWNLOAD_SHA 589b7e7eb22f8358797a2c14a0bd865459d0b44458b8f05d2721294dacc7f734

RUN curl -SL &quot;$NODE_DOWNLOAD_URL&quot; --output nodejs.tar.gz \
    &amp;&amp; echo &quot;$NODE_DOWNLOAD_SHA nodejs.tar.gz&quot; | sha256sum -c - \
    &amp;&amp; tar -xzf &quot;nodejs.tar.gz&quot; -C /usr/local --strip-components=1 \
    &amp;&amp; rm nodejs.tar.gz \
    &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs

RUN apt update &amp;&amp; apt -y install gnupg

ENV YARN_VERSION 1.22.15

RUN set -ex \
  &amp;&amp; wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import \
  &amp;&amp; curl -fSLO --compressed &quot;https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz&quot; \
  &amp;&amp; curl -fSLO --compressed &quot;https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc&quot; \
  &amp;&amp; gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  &amp;&amp; mkdir -p /opt/yarn \
  &amp;&amp; tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1 \
  &amp;&amp; ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn \
  &amp;&amp; ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg \
  &amp;&amp; rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz

COPY [&quot;abp/AbpTemplate/AbpTemplate.csproj&quot;, &quot;abp/AbpTemplate/&quot;]
RUN dotnet restore &quot;abp/AbpTemplate/AbpTemplate.csproj&quot;
COPY . .
WORKDIR &quot;/src/abp/AbpTemplate&quot;
RUN dotnet tool install -g Volo.Abp.Cli
ENV PATH=&quot;${PATH}:/root/.dotnet/tools&quot;
RUN abp install-libs
RUN dotnet build &quot;AbpTemplate.csproj&quot; -c Release -o /app/build

FROM build AS publish
RUN dotnet publish &quot;AbpTemplate.csproj&quot; -c Release -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT [&quot;dotnet&quot;, &quot;AbpTemplate.dll&quot;]
</code></pre>
<p>This docker file will install the npm packages. Then it will build the application.</p>
<p>if you are new to docker, then this docker file might look complicated. But it is not. It is just a bunch of commands. You can read more about docker files <a href="https://docs.docker.com/engine/reference/builder/">here</a>.</p>
<p>let me explain what each command is doing.</p>
<pre><code class="language-bash">FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
WORKDIR /app
EXPOSE 80

ENV ASPNETCORE_URLS=http://+:80
</code></pre>
<p>This is the base image. It is using the dotnet 7.0 aspnet image. It is also exposing the port 80.</p>
<pre><code class="language-bash">FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
WORKDIR /src
</code></pre>
<p>This is the build image. It is using the dotnet 7.0 sdk image. It is also setting the working directory to &quot;/src&quot;.</p>
<pre><code class="language-bash"># set up node
ENV NODE_VERSION 16.13.0
ENV NODE_DOWNLOAD_URL https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz
ENV NODE_DOWNLOAD_SHA 589b7e7eb22f8358797a2c14a0bd865459d0b44458b8f05d2721294dacc7f734

RUN curl -SL &quot;$NODE_DOWNLOAD_URL&quot; --output nodejs.tar.gz \
    &amp;&amp; echo &quot;$NODE_DOWNLOAD_SHA nodejs.tar.gz&quot; | sha256sum -c - \
    &amp;&amp; tar -xzf &quot;nodejs.tar.gz&quot; -C /usr/local --strip-components=1 \
    &amp;&amp; rm nodejs.tar.gz \
    &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs

RUN apt update &amp;&amp; apt -y install gnupg

ENV YARN_VERSION 1.22.15

RUN set -ex \
  &amp;&amp; wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import \
  &amp;&amp; curl -fSLO --compressed &quot;https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz&quot; \
  &amp;&amp; curl -fSLO --compressed &quot;https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc&quot; \
  &amp;&amp; gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  &amp;&amp; mkdir -p /opt/yarn \
  &amp;&amp; tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1 \
  &amp;&amp; ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn \
  &amp;&amp; ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg \
  &amp;&amp; rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz
</code></pre>
<p>This is the part where we are installing the node and yarn. You can change the node version to the version you are using. You can also change the yarn version to the version you are using.</p>
<pre><code class="language-bash">COPY [&quot;abp/AbpTemplate/AbpTemplate.csproj&quot;, &quot;abp/AbpTemplate/&quot;]
RUN dotnet restore &quot;abp/AbpTemplate/AbpTemplate.csproj&quot;
COPY . .
WORKDIR &quot;/src/abp/AbpTemplate&quot;
RUN dotnet tool install -g Volo.Abp.Cli
ENV PATH=&quot;${PATH}:/root/.dotnet/tools&quot;
RUN abp install-libs
RUN dotnet build &quot;AbpTemplate.csproj&quot; -c Release -o /app/build
</code></pre>
<p>This is the part where we are restoring the nuget packages and building the application. You can change the project name to the name of your project. You can also change the working directory to the directory of your project.</p>
<p>We are also installing the abp cli. You can read more about the abp cli <a href="https://docs.abp.io/en/abp/latest/CLI">here</a>. The abp cli is used to install the npm packages. You can also use the npm cli to install the npm packages. But I prefer to use the abp cli because you can use the abp cli to install the npm packages for all the modules in your solution.</p>
<pre><code class="language-bash">FROM build AS publish
RUN dotnet publish &quot;AbpTemplate.csproj&quot; -c Release -o /app/publish /p:UseAppHost=false
</code></pre>
<p>This is the part where we are publishing the application.</p>
<pre><code class="language-bash">FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT [&quot;dotnet&quot;, &quot;AbpTemplate.dll&quot;]
</code></pre>
<p>This is the part where we are copying the published application to the base image.</p>
<p>Here is the link to the docker file in github. <a href="https://github.com/antosubash/AbpTemplate/blob/main/abp/AbpTemplate/Dockerfile">Dockerfile</a></p>
<p>Here is the repo for the application. <a href="https://github.com/antosubash/AbpTemplate">AbpTemplate</a></p>
<h2>Conclusion</h2>
<p>In this post we saw how to create a docker file which will install the npm packages for your abp application. This will help you to create a docker image which will have the &quot;libs&quot; folder for your CI/CD pipeline. Hope this helps. Fell free to leave a comment if you have any questions.</p>]]></content:encoded>
          </item><item>
          <title>.Net Microservice template with ABP</title>
          <link>https://blog.antosubash.com/posts/dotnet-microservice-template-with-abp</link>
          <guid>https://blog.antosubash.com/posts/dotnet-microservice-template-with-abp</guid>
          <pubDate>Sat, 18 Feb 2023 18:11:38 GMT</pubDate>
          <description>In this post I will show you how to create ABP microservice using a dotnet new template.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post I will show you how to create ABP microservice using a dotnet new template.</p>
<h2>Background</h2>
<p>Right now it is not easy to create a new microservice application with ABP. I have made a 12 part video series on how to create a microservice application with ABP. It is a lot of work and it is not easy to follow. I have created a dotnet new template to make it easier to create a new microservice application with ABP. You can find the template on <a href="https://github.com/antosubash/AbpMicroservice">GitHub</a>. You can also find the video series on <a href="https://www.youtube.com/playlist?list=PL-rVxoM6JeHnaHsPJffa54WiDyU4Ue1GS">YouTube</a>. If you are new to ABP then start <a href="https://blog.antosubash.com/posts/abp-microservice-series">here</a> and then come back to this post.</p>
<h2>Status</h2>
<p>The template is still in the early stages. I have created the template using the sample application from the video series. I have not tested the template with all the features. This is really usefull if you already know how to create a microservice application with ABP. But if you are new to ABP then I would recommend to watch the video series. It will give you a good understanding of how to create a microservice application with ABP.</p>
<h2>Prerequisites</h2>
<p>To use the template you need to have the following installed on your machine.</p>
<ul>
<li><a href="https://dotnet.microsoft.com/download/dotnet/7.0">.Net 7.0 SDK</a></li>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://www.postgresql.org/">PostgreSQL</a></li>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a></li>
<li><a href="https://redis.io/">Redis</a></li>
<li><a href="https://docs.abp.io/en/abp/latest/CLI">ABP CLI</a></li>
<li><a href="https://github.com/dotnet/tye">Tye</a> (Optional)</li>
</ul>
<p>I mostly use the <a href="https://code.visualstudio.com/">Visual Studio Code</a> as my IDE. But you can use any IDE you want. I have tested the template with <a href="https://code.visualstudio.com/">Visual Studio Code</a> and <a href="https://visualstudio.microsoft.com/vs/preview/vs2022/">Visual Studio 2022</a>.</p>
<p>For my development environment I use <a href="https://www.docker.com/">Docker</a> to run the database, RabbitMQ and Redis. you find my docker stack files in the <a href="https://github.com/antosubash/docker_stack/tree/master/stacks">GitHub</a> repository.</p>
<h2>Install the dotnet new template</h2>
<p>To install the dotnet new template you need to run the following command.</p>
<pre><code class="language-bash">dotnet new install Anto.Abp.Microservice.Template::1.1.2
</code></pre>
<p>This will install the template to your local machine. You can check the installed templates by running the following command.</p>
<pre><code class="language-bash">dotnet new -l
</code></pre>
<blockquote>
<p>Note: Right now the template is using PostgreSQL as the database provider. you can change the database provider to whatever you want. For more information on how to change the database provider please check the <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core-Other-DBMS">documentation</a>.</p>
</blockquote>
<h2>Create a new microservice application</h2>
<p>To create a new microservice application you need to run the following command.</p>
<pre><code class="language-bash">dotnet new abp-ms -n MyMicroservice
</code></pre>
<p>This will create a new microservice application with the name <code>MyMicroservice</code>. You can change the name to whatever you want. This will create a new folder with the name <code>MyMicroservice</code>. You can open the folder in your favorite IDE.</p>
<h2>Run the application</h2>
<p>Before you run the application make sure you have built the solution at least once. You can build the solution by running the following command.</p>
<pre><code class="language-bash">dotnet build
</code></pre>
<p>Once the solution is built run the following to command to install the npm packages.</p>
<pre><code class="language-bash">abp install-libs
</code></pre>
<blockquote>
<p>Note: You need to have <code>abp</code> installed on your machine. You can install <code>abp</code> by running the following command.</p>
</blockquote>
<pre><code class="language-bash">dotnet tool install -g Volo.Abp.Cli
</code></pre>
<p>This will install the npm packages for all the projects.</p>
<p>Once the packages are installed then we have to update the connection string in the <code>appsettings.json</code> file. You can find the <code>appsettings.json</code> file in the <code>*.HttpApi.Host</code> projects and <code>DbMigrator</code> project.</p>
<p>The first project you need to run is the <code>MyMicroservice.DbMigrator</code> project. You can run the project by running the following command.</p>
<pre><code class="language-bash">dotnet run --project MyMicroservice/shared/MyMicroservice.DbMigrator/MyMicroservice.DbMigrator.csproj
</code></pre>
<p>This will create the database and seed the data. Once the database is created you can run the <code>tye</code>. <code>tye</code> file is located in the <code>MyMicroservice</code> folder. You can run the <code>tye</code> by running the following command.</p>
<pre><code class="language-bash">tye run
</code></pre>
<blockquote>
<p>Note: You need to have <code>tye</code> installed on your machine. You can install <code>tye</code> by running the following command.</p>
</blockquote>
<pre><code class="language-bash">dotnet tool install -g Microsoft.Tye --version &quot;0.11.0-alpha.22111.1&quot;
</code></pre>
<p>Once the <code>tye</code> is running you can open the <code>http://localhost:8000</code> in your browser. you should see all the services running.</p>
<h2>Conclusion</h2>
<p>I think this is a good start for creating a new microservice application with ABP. I will be adding more features to the template in the future. If you have any suggestions or feedback please let me know in the comments. I would love to hear from you.</p>]]></content:encoded>
          </item><item>
          <title>Migrating Identity Service to OpenIddict Module</title>
          <link>https://blog.antosubash.com/posts/migrating-identity-service-to-open-iddict-module</link>
          <guid>https://blog.antosubash.com/posts/migrating-identity-service-to-open-iddict-module</guid>
          <pubDate>Mon, 05 Dec 2022 20:59:17 GMT</pubDate>
          <description>In this post we will see how to replace Identity server with OpenIddict in our microservice</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to replace Identity server with OpenIddict in our microservice. We will use the same microservice we created in the previous posts. If you haven&#x27;t read the previous post, you can read it <a href="/posts/abp-microservice-series">here</a>.</p>
<h2>OpenIddict</h2>
<p>OpenIddict aims at providing a versatile solution to implement OpenID Connect client, server and token validation support in any ASP.NET Core 2.1 (and higher) application. ASP.NET 4.6.1 (and higher) applications are also fully supported thanks to a native Microsoft.Owin 4.2 integration.</p>
<p>OpenIddict fully supports the code/implicit/hybrid flows, the client credentials/resource owner password grants and the device authorization flow.</p>
<p>OpenIddict natively supports Entity Framework Core, Entity Framework 6 and MongoDB out-of-the-box and custom stores can be implemented to support other providers.</p>
<h2>Reason for the migration</h2>
<p>The main reason for the migration is that the Identity server is not maintained anymore. The last release was in 2019. The latest version of ABP framework is using OpenIddict. So, it is better to use the latest version of the framework. you can read more about the migration <a href="https://docs.abp.io/en/abp/6.0/Migration-Guides/OpenIddict-Step-by-Step">here</a>. you can learn more about the background of the migration <a href="https://github.com/abpframework/abp/issues/11989">here</a></p>
<h2>Create a new temp project</h2>
<p>We will create a temp project and copy the <code>AuthServer</code> project from the temp project to the solution. We did the same while creating the microservice. We will do the same here.</p>
<p>Create a new folder and create the solution using the following command.</p>
<pre><code class="language-bash">abp new Tasky -t app -u angular --separate-auth-server -dbms PostgreSQL
</code></pre>
<p>This will create a new solution with the <code>AuthServer</code> project. Copy the <code>AuthServer</code> project from the temp project to the solution. after copying the project, copy <code>angular</code> folder from the temp project to the solution. This will replace the existing <code>angular</code> folder.</p>
<h3>Update the ABP packages</h3>
<p>To update the ABP packages, use the following command.</p>
<pre><code class="language-bash">abp update
</code></pre>
<p>This will update all the ABP packages to the latest version. You can see the changes in the <code>*.csproj</code> files.</p>
<h3>Update the .Net Version</h3>
<p>Update the .Net version to <code>6.0</code> in the <code>*.csproj</code> files.</p>
<pre><code class="language-xml">&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
</code></pre>
<h3>Update the tye.yaml file</h3>
<p>Update the <code>tye.yaml</code> file to add the <code>AuthServer</code> project.</p>
<pre><code class="language-yaml">- name: tasky-auth-server
  project: apps/Tasky.AuthServer/Tasky.AuthServer.csproj
  bindings:
    - protocol: https
      port: 7600
</code></pre>
<h2>Configure the AuthServer</h2>
<h3>Add Auth Server to the solution</h3>
<p>Add the <code>AuthServer</code> project to the solution.</p>
<pre><code class="language-bash">dotnet sln add .\apps\Tasky.AuthServer\Tasky.AuthServer.csproj
</code></pre>
<p>Add the Project references to the <code>AuthServer</code> project.</p>
<pre><code class="language-bash">dotnet add .\apps\Tasky.AuthServer\Tasky.AuthServer.csproj reference .\services\administration\src\Tasky.AdministrationService.EntityFrameworkCore\Tasky.AdministrationService.EntityFrameworkCore.csproj

dotnet add .\apps\Tasky.AuthServer\Tasky.AuthServer.csproj reference .\services\identity\src\Tasky.IdentityService.EntityFrameworkCore\Tasky.IdentityService.EntityFrameworkCore.csproj

dotnet add .\apps\Tasky.AuthServer\Tasky.AuthServer.csproj reference .\services\saas\src\Tasky.SaasService.EntityFrameworkCore\Tasky.SaasService.EntityFrameworkCore.csproj

dotnet add .\apps\Tasky.AuthServer\Tasky.AuthServer.csproj reference .\shared\Tasky.Shared.Microservice.Hosting\Tasky.Shared.Microservice.Hosting.csproj
</code></pre>
<h3>Update the TaskyAuthServerModule Dependency</h3>
<p>We will update the <code>TaskyAuthServerModule</code> dependency in the <code>AuthServer.csproj</code> file:</p>
<pre><code class="language-csharp">    typeof(AdministrationServiceEntityFrameworkCoreModule),
    typeof(SaaSServiceEntityFrameworkCoreModule),
    typeof(IdentityServiceEntityFrameworkCoreModule),
    typeof(TaskyMicroserviceHosting)
</code></pre>
<h3>Configure RabbitMQ</h3>
<p>We will use RabbitMQ to publish the events. So, we need to configure RabbitMQ in the <code>AuthServer</code> project.</p>
<p>Add the following section to the <code>appsettings.json</code> file:</p>
<pre><code class="language-json">  &quot;RabbitMQ&quot;: {
    &quot;Connections&quot;: {
      &quot;Default&quot;: {
        &quot;HostName&quot;: &quot;localhost&quot;
      }
    },
    &quot;EventBus&quot;: {
      &quot;ClientName&quot;: &quot;Tasky_AuthServer&quot;,
      &quot;ExchangeName&quot;: &quot;Tasky&quot;
    }
  }
</code></pre>
<h3>Configure the Database</h3>
<p>We will update the connection string in the <code>appsettings.json</code> file:</p>
<pre><code class="language-json">  &quot;ConnectionStrings&quot;: {
    &quot;SaaS&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=SaasService;Pooling=false;&quot;,
    &quot;IdentityService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=IdentityService;Pooling=false;&quot;,
    &quot;Administration&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=AdministrationService;Pooling=false;&quot;
  },
</code></pre>
<h3>Update CORS and Redirect URIs</h3>
<p>We will update the CORS and Redirect URIs in the <code>appsettings.json</code> file:</p>
<pre><code class="language-json">  &quot;App&quot;: {
    &quot;SelfUrl&quot;: &quot;https://localhost:44346&quot;,
    &quot;ClientUrl&quot;: &quot;http://localhost:4200&quot;,
    &quot;CorsOrigins&quot;: &quot;http://localhost:4200,http://localhost:3000,https://localhost:7001,https://localhost:7002,https://localhost:7003,https://localhost:7004,https://localhost:7005&quot;,
    &quot;RedirectAllowedUrls&quot;: &quot;http://localhost:4200,http://localhost:3000,https://localhost:7001&quot;
  },
</code></pre>
<h3>Update the port number in the <code>AuthServer</code> project</h3>
<p>We will update the port number in the <code>AuthServer</code> project to <code>7600</code> in the <code>AuthServer</code>. you can do this by updating the <code>launchSettings.json</code> file.</p>
<pre><code class="language-json">  &quot;applicationUrl&quot;: &quot;https://localhost:7600;http://localhost:7600&quot;
</code></pre>
<blockquote>
<p>Note: after updating the .Net version, you may get the error from non abp packages. You can update the non abp packages to the latest version.</p>
</blockquote>
<p>Build the solution to make sure everything is working fine.</p>
<h2>Replace the IdentityServer with OpenIddict</h2>
<p>Search for <code>IdentityServer</code> in the solution and replace it with <code>OpenIddict</code> in the <code>*.csproj</code> files and <code>*.cs</code> files.</p>
<h2>Update the IdentityServiceDbContext</h2>
<p>Update the <code>IdentityServiceDbContext</code> class to inherit from <code>IOpenIddictDbContext</code>. This will add the required tables for the OpenIddict and remove the tables for the IdentityServer.</p>
<pre><code class="language-csharp">    public DbSet&lt;OpenIddictApplication&gt; Applications { get; set; }
    public DbSet&lt;OpenIddictAuthorization&gt; Authorizations { get; set; }
    public DbSet&lt;OpenIddictScope&gt; Scopes { get; set; }
    public DbSet&lt;OpenIddictToken&gt; Tokens { get; set; }
</code></pre>
<h3>Add the migrations</h3>
<p>After updating the <code>IdentityServiceDbContext</code> class, add the migrations using the following command.</p>
<pre><code class="language-bash">dotnet ef migrations add Init-OpenIddict
</code></pre>
<p>This will add the migrations for the OpenIddict. Now, we can run the migrations using the following command.</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<p>This will remove the tables for the IdentityServer and add the tables for the OpenIddict.</p>
<h2>Update the data seeder</h2>
<p>We will need to update the data seeder in the <code>Tasky.DbMigrator</code>.</p>
<p>Create a new class <code>OpenIddictDataSeeder</code> and add the following code.</p>
<pre><code class="language-csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using OpenIddict.Abstractions;
using Volo.Abp.Authorization.Permissions;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Guids;
using Volo.Abp.MultiTenancy;
using Volo.Abp.OpenIddict.Applications;
using Volo.Abp.PermissionManagement;
using Volo.Abp.Uow;
using Microsoft.Extensions.Localization;
using Volo.Abp;
using JetBrains.Annotations;

namespace Tasky.DbMigrator;

public class OpenIddictDataSeeder : ITransientDependency
{
    private readonly IConfiguration _configuration;
    private readonly ICurrentTenant _currentTenant;
    private readonly IGuidGenerator _guidGenerator;
    private readonly IAbpApplicationManager _applicationManager;
    private readonly IOpenIddictScopeManager _scopeManager;
    private readonly IPermissionDataSeeder _permissionDataSeeder;
    private readonly IStringLocalizer&lt;OpenIddictResponse&gt; L;

    public OpenIddictDataSeeder(
        IAbpApplicationManager applicationManager,
        IOpenIddictScopeManager scopeManager,
        IPermissionDataSeeder permissionDataSeeder,
        IStringLocalizer&lt;OpenIddictResponse&gt; l,
        IGuidGenerator guidGenerator,
        IConfiguration configuration,
        ICurrentTenant currentTenant)
    {
        _configuration = configuration;
        _applicationManager = applicationManager;
        _scopeManager = scopeManager;
        _permissionDataSeeder = permissionDataSeeder;
        _guidGenerator = guidGenerator;
        _currentTenant = currentTenant;
        L = l;
    }

    [UnitOfWork]
    public async virtual Task SeedAsync()
    {
        using (_currentTenant.Change(null))
        {
            await CreateApiResourcesAsync();
            await CreateClientsAsync();
        }
    }

    private async Task CreateClientsAsync()
    {
        var clients = _configuration.GetSection(&quot;Clients&quot;).Get&lt;List&lt;ServiceClient&gt;&gt;();
        var commonScopes = new[] {
            OpenIddictConstants.Permissions.Scopes.Address,
            OpenIddictConstants.Permissions.Scopes.Email,
            OpenIddictConstants.Permissions.Scopes.Phone,
            OpenIddictConstants.Permissions.Scopes.Profile,
            OpenIddictConstants.Permissions.Scopes.Roles,
            &quot;offline_access&quot;
        };

        foreach (var client in clients)
        {
            var isClientSecretAvailable = !string.IsNullOrEmpty(client.ClientSecret);

            await CreateClientAsync(
                    client.ClientId,
                    displayName: client.ClientId,
                    secret: isClientSecretAvailable ? client.ClientSecret : null,
                    type: isClientSecretAvailable ? OpenIddictConstants.ClientTypes.Confidential : OpenIddictConstants.ClientTypes.Public,
                    scopes: commonScopes.Union(client.Scopes).ToList(),
                    grantTypes: client.GrantTypes.ToList(),
                    redirectUris: client.RedirectUris,
                    postLogoutRedirectUris: client.PostLogoutRedirectUris,
                    consentType: OpenIddictConstants.ConsentTypes.Implicit
                );
        }
    }


    private async Task CreateApiResourcesAsync()
    {
        var apiResources = _configuration.GetSection(&quot;ApiResource&quot;).Get&lt;string[]&gt;();

        foreach (var item in apiResources)
        {
            await CreateApiResourceAsync(item);
        }
    }

    private async Task CreateApiResourceAsync(string name)
    {
        if (await _scopeManager.FindByNameAsync(name) == null)
        {
            await _scopeManager.CreateAsync(new OpenIddictScopeDescriptor
            {
                Name = name,
                DisplayName = name + &quot; API&quot;,
                Resources =
                {
                    name
                }
            });
        }
    }

    private async Task CreateClientAsync(
        [NotNull] string name,
        [NotNull] string type,
        [NotNull] string consentType,
        string displayName,
        string secret,
        List&lt;string&gt; grantTypes,
        List&lt;string&gt; scopes,
        string[] redirectUris = null,
        string[] postLogoutRedirectUris = null,
        List&lt;string&gt; permissions = null)
    {
        if (!string.IsNullOrEmpty(secret) &amp;&amp; string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
        {
            throw new BusinessException(L[&quot;NoClientSecretCanBeSetForPublicApplications&quot;]);
        }

        if (string.IsNullOrEmpty(secret) &amp;&amp; string.Equals(type, OpenIddictConstants.ClientTypes.Confidential, StringComparison.OrdinalIgnoreCase))
        {
            throw new BusinessException(L[&quot;TheClientSecretIsRequiredForConfidentialApplications&quot;]);
        }

        if (!string.IsNullOrEmpty(name) &amp;&amp; await _applicationManager.FindByClientIdAsync(name) != null)
        {
            return;
            //throw new BusinessException(L[&quot;TheClientIdentifierIsAlreadyTakenByAnotherApplication&quot;]);
        }

        var client = await _applicationManager.FindByClientIdAsync(name);
        if (client == null)
        {
            var application = new OpenIddictApplicationDescriptor
            {
                ClientId = name,
                Type = type,
                ClientSecret = secret,
                ConsentType = consentType,
                DisplayName = displayName
            };

            Check.NotNullOrEmpty(grantTypes, nameof(grantTypes));
            Check.NotNullOrEmpty(scopes, nameof(scopes));

            if (new[] { OpenIddictConstants.GrantTypes.AuthorizationCode, OpenIddictConstants.GrantTypes.Implicit }.All(grantTypes.Contains))
            {
                application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeIdToken);
                if (string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeIdTokenToken);
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeToken);
                }
            }
            application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Logout);


            foreach (var grantType in grantTypes)
            {
                if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode);
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.Code);
                }

                if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode || grantType == OpenIddictConstants.GrantTypes.Implicit)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Authorization);
                }

                if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode ||
                    grantType == OpenIddictConstants.GrantTypes.ClientCredentials ||
                    grantType == OpenIddictConstants.GrantTypes.Password ||
                    grantType == OpenIddictConstants.GrantTypes.RefreshToken ||
                    grantType == OpenIddictConstants.GrantTypes.DeviceCode)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Token);
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Revocation);
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Introspection);
                }

                if (grantType == OpenIddictConstants.GrantTypes.ClientCredentials)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.ClientCredentials);
                }

                if (grantType == OpenIddictConstants.GrantTypes.Implicit)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.Implicit);
                }

                if (grantType == OpenIddictConstants.GrantTypes.Password)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.Password);
                }

                if (grantType == OpenIddictConstants.GrantTypes.RefreshToken)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.RefreshToken);
                }

                if (grantType == OpenIddictConstants.GrantTypes.DeviceCode)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.DeviceCode);
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Device);
                }

                if (grantType == OpenIddictConstants.GrantTypes.Implicit)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.IdToken);
                    if (string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
                    {
                        application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.IdTokenToken);
                        application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.Token);
                    }
                }
            }

            var buildInScopes = new[]
            {
                OpenIddictConstants.Permissions.Scopes.Address,
                OpenIddictConstants.Permissions.Scopes.Email,
                OpenIddictConstants.Permissions.Scopes.Phone,
                OpenIddictConstants.Permissions.Scopes.Profile,
                OpenIddictConstants.Permissions.Scopes.Roles,
                &quot;offline_access&quot;
            };

            foreach (var scope in scopes)
            {
                if (buildInScopes.Contains(scope))
                {
                    application.Permissions.Add(scope);
                }
                else
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Prefixes.Scope + scope);
                }
            }

            if (redirectUris != null)
            {
                foreach (var redirectUri in redirectUris)
                {
                    if (!redirectUri.IsNullOrEmpty())
                    {
                        if (!Uri.TryCreate(redirectUri, UriKind.Absolute, out var uri) || !uri.IsWellFormedOriginalString())
                        {
                            throw new BusinessException(L[&quot;InvalidRedirectUri&quot;, redirectUri]);
                        }

                        if (application.RedirectUris.All(x =&gt; x != uri))
                        {
                            application.RedirectUris.Add(uri);
                        }
                    }
                }
            }

            if (postLogoutRedirectUris != null)
            {
                foreach (var postLogoutRedirectUri in postLogoutRedirectUris)
                {
                    if (!postLogoutRedirectUri.IsNullOrEmpty())
                    {
                        if (!Uri.TryCreate(postLogoutRedirectUri, UriKind.Absolute, out var uri) || !uri.IsWellFormedOriginalString())
                        {
                            throw new BusinessException(L[&quot;InvalidPostLogoutRedirectUri&quot;, postLogoutRedirectUri]);
                        }

                        if (application.PostLogoutRedirectUris.All(x =&gt; x != uri))
                        {
                            application.PostLogoutRedirectUris.Add(uri);
                        }
                    }
                }
            }

            if (permissions != null)
            {
                await _permissionDataSeeder.SeedAsync(
                    ClientPermissionValueProvider.ProviderName,
                    name,
                    permissions,
                    null
                );
            }

            await _applicationManager.CreateAsync(application);
        }
    }
}
</code></pre>
<p>Create a new class <code>OpenIddictDataSeedContributor</code> and add the following code:</p>
<pre><code class="language-csharp">using System.Threading.Tasks;
using Volo.Abp.Data;
using Volo.Abp.DependencyInjection;

namespace Tasky.DbMigrator;

public class OpenIddictDataSeedContributor : IDataSeedContributor, ITransientDependency
{
    private readonly OpenIddictDataSeeder _OpenIddictDataSeeder;

    public OpenIddictDataSeedContributor(OpenIddictDataSeeder OpenIddictDataSeeder)
    {
        _OpenIddictDataSeeder = OpenIddictDataSeeder;
    }


    public async Task SeedAsync(DataSeedContext context)
    {
        await _OpenIddictDataSeeder.SeedAsync();
    }
}
</code></pre>
<p>With the above code, we have created a new data seed contributor for OpenIddict. Now, we can delete the old <code>IdentityServerDataSeedContributor</code> class and <code>IdentityServerDataSeeder</code> class.</p>
<h2>Seed the Application Client</h2>
<p>Now, we have our OpenIddict data seed contributor. We can run the <code>DbMigration</code> project to create the seed data in the database.</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will create the new Scopes and Clients in the database. We can check the database to see the new data.</p>
<h2>Test the AuthServer</h2>
<p>We can test the AuthServer by running the <code>AuthServer</code> project:</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>If everything is configured correctly, we will be able to login to the AuthServer.</p>
<p>Now, run all the projects using tye and test the entire application with the angular application.</p>
<h2>Conclusion</h2>
<p>In this article, I have shown how to migrate the IdentityServer to OpenIddict. We have also seen how to create a new data seed contributor for OpenIddict and configure the AuthServer to use RabbitMQ and PostgreSQL. We have also tested the AuthServer and the entire application.</p>
<p>you can find the source code for this article on <a href="https://github.com/antosubash/AbpMicroservice">GitHub</a></p>]]></content:encoded>
          </item><item>
          <title>Automatically version and release .Net Application</title>
          <link>https://blog.antosubash.com/posts/automatic-version-and-release</link>
          <guid>https://blog.antosubash.com/posts/automatic-version-and-release</guid>
          <pubDate>Sun, 23 Oct 2022 00:00:00 GMT</pubDate>
          <description>In this post you will see how to automatically version and release a .Net Application using GitHub Actions</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to automatically version and release a .Net Application using GitHub Actions. We will use the conventional commits specification to automatically version and release our application.</p>
<h2>Conventional Commits</h2>
<p>Conventional Commits is a specification for adding human and machine readable meaning to commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with <a href="https://semver.org">SemVer</a>, by describing the features, fixes, and breaking changes made in commit messages. If you want to know more about conventional commits, please check <a href="https://www.conventionalcommits.org/en/v1.0.0/">this</a>.</p>
<h2>Libraries used</h2>
<ul>
<li><a href="https://github.com/versionize/versionize">Versionize</a> - To version the application</li>
<li><a href="https://github.com/alirezanet/husky.net">Husky.Net</a> - To run git hooks in dotnet</li>
<li>Github Actions - To automatically release the application</li>
</ul>
<p>Please note that we will use the <code>Versionize</code> library to version the application and <code>Husky.Net</code> to run git hooks in dotnet. These are amazing libraries and I highly recommend them. please check them out if you want to know more about them and give them a star. It will help the authors to keep working on them. I&#x27;m not affiliated with them in any way. I just like them and I&#x27;m using them in this post.</p>
<h2>Versionize</h2>
<p>Versionize is a library that can be used to version a .Net application. It uses the conventional commits specification to automatically version the application. It can also be used to automatically release the application. It can be used in any .Net application. It can be used in a console application, a web application, a web api, a library, etc. The current supported project types are: <code>csproj</code>, <code>fsproj</code>, <code>vbproj</code>. There is PR to support <code>.props</code> projects. hopefully, it will be merged soon.</p>
<h2>Husky.Net</h2>
<p>Husky.Net is a library that can be used to run git hooks in dotnet. It is a port of the famous <a href="https://github.com/typicode/husky">Husky</a> library. Husky is a library that can be used to run git hooks in nodejs. Husky.Net can be used to run git hooks in dotnet. It can be used in any .Net application.</p>
<blockquote>
<p>Husky is not required for this but it is a nice to have. It will help us to keep the commit messages clean and consistent. If you don&#x27;t want to use it you can skip this section. But I highly recommend it.</p>
</blockquote>
<h2>GitHub Actions</h2>
<p>I think there is no need to explain what GitHub Actions is. If you don&#x27;t know what GitHub Actions is, please check <a href="https://docs.github.com/en/actions">this</a>.</p>
<h2>Create the .Net project</h2>
<h3>Create a github repository</h3>
<p>Create a github repository and clone it locally. You can use the following command to clone the repository.</p>
<pre><code class="language-bash">git clone &quot;url of the repository&quot;
</code></pre>
<p>Now, we will create a .Net project and add it to the repository.</p>
<h3>Create the .Net project using this following command</h3>
<p>Navigate to the your repository folder and run the following command to create a .Net project.</p>
<pre><code class="language-bash">dotnet new console -n VersionMe -o .
</code></pre>
<p>Now we have a .Net console application. We will use this application to test the versioning and releasing.</p>
<h2>Add Version to the .Net project</h2>
<p>To get started add version to you csproj file.</p>
<pre><code class="language-xml">    &lt;Version&gt;1.0.0&lt;/Version&gt;
</code></pre>
<p>Now we can install the versionize tool.</p>
<pre><code class="language-bash">dotnet tool install --global Versionize
</code></pre>
<p>When you want to version the application, run the following command.</p>
<pre><code class="language-bash">versionize
</code></pre>
<p>This will version the application, create a tag for the release and generate a changelog. You can find the changelog in the <code>CHANGELOG.md</code> file. make sure you push the tag to the remote repository.</p>
<pre><code class="language-bash">git push --tags
</code></pre>
<p>For now we have versioned the application manually and tagged the release. we also have a changelog. but to create a release we need to do it manually. we need to use the GitHub UI. But we want to automate this process. We want to automatically create a release when we push a commit to the main branch. We will use GitHub Actions to do this.</p>
<p>Now lets automate this process using github actions.</p>
<h2>Creating github action</h2>
<p>We will create a github action to version and release the application. Create a new file in the <code>.github/workflows</code> folder and name it <code>version-and-release.yml</code>. In the <code>version-and-release.yml</code> file, add the following code.</p>
<pre><code class="language-yaml">name: Version and Release

on:
  push:
    branches: [ &quot;main&quot; ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Install Versionize
      run: dotnet tool install --global Versionize
    - name: Setup git
      run: |
        git config --local user.email &quot;antosubash@live.com&quot;
        git config --local user.name &quot;Anto Subash&quot;
    - name: Versionize Release
      id: versionize
      run: versionize --changelog-all --exit-insignificant-commits
      continue-on-error: true
    - name: No release required
      if: steps.versionize.outcome != &#x27;success&#x27;
      run: echo &quot;Skipping Release. No release required.&quot;
    - name: Push changes to GitHub
      if: steps.versionize.outcome == &#x27;success&#x27;
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
    - name: &quot;Create release&quot;
      if: steps.versionize.outcome == &#x27;success&#x27;
      uses: &quot;actions/github-script@v5&quot;
      with:
        github-token: &quot;${{ secrets.GITHUB_TOKEN }}&quot;
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + &quot;?per_page=1&quot;
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
          } catch (error) {
            core.setFailed(error.message);
          }
</code></pre>
<p>This will run when we push a commit to the main branch. It will version the application, create a tag for the release and generate a changelog. It will also create a release using the GitHub API. You can find the changelog in the <code>CHANGELOG.md</code> file.</p>
<p>If you are new to GitHub Actions, please check <a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions">this</a> to learn more about GitHub Actions. It will help you to understand the above code.</p>
<p>Here is a brief explanation of the above code.</p>
<pre><code class="language-yaml">name: Version and Release
</code></pre>
<p>This is the name of the action.</p>
<pre><code class="language-yaml">on:
  push:
    branches: [ &quot;main&quot; ]
</code></pre>
<p>This will run the action when we push a commit to the main branch.</p>
<pre><code class="language-yaml">jobs:
  build:
    runs-on: ubuntu-latest
</code></pre>
<p>This is the job that will run. We are using ubuntu-latest as the operating system.</p>
<pre><code class="language-yaml">- uses: actions/checkout@v3
  with:
    fetch-depth: 0
</code></pre>
<p>This will checkout the repository.</p>
<pre><code class="language-yaml">- name: Setup .NET
  uses: actions/setup-dotnet@v3
  with:
    dotnet-version: 6.0.x
</code></pre>
<p>This will setup the .Net environment.</p>
<pre><code class="language-yaml">- name: Restore dependencies
  run: dotnet restore
</code></pre>
<p>This will restore the dependencies.</p>
<pre><code class="language-yaml">- name: Build
  run: dotnet build --no-restore
</code></pre>
<p>This will build the application.</p>
<pre><code class="language-yaml">- name: Install Versionize
  run: dotnet tool install --global Versionize
</code></pre>
<p>This will install the versionize tool.</p>
<pre><code class="language-yaml">- name: Setup git
  run: |
        git config --local user.email &quot;antosubash@live.com&quot;
        git config --local user.name &quot;Anto Subash&quot;
</code></pre>
<p>This will setup the git user name and email.</p>
<pre><code class="language-yaml">- name: Versionize Release
  id: versionize
  run: versionize --changelog-all --exit-insignificant-commits
  continue-on-error: true
</code></pre>
<p>This will version the application, create a tag for the release and generate a changelog. You can find the changelog in the <code>CHANGELOG.md</code> file.</p>
<pre><code class="language-yaml">- name: No release required
  if: steps.versionize.outcome != &#x27;success&#x27;
  run: echo &quot;Skipping Release. No release required.&quot;
</code></pre>
<p>This will check if the versionize command was successful. If it was successful, it will continue to the next step. If it was not successful, it will skip the release.</p>
<pre><code class="language-yaml">- name: Push changes to GitHub
  if: steps.versionize.outcome == &#x27;success&#x27;
  uses: ad-m/github-push-action@master
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    branch: ${{ github.ref }}
    tags: true
</code></pre>
<p>This will push the changes to the GitHub repository.</p>
<pre><code class="language-yaml">- name: &quot;Create release&quot;
  if: steps.versionize.outcome == &#x27;success&#x27;
  uses: &quot;actions/github-script@v5&quot;
  with:
    github-token: &quot;${{ secrets.GITHUB_TOKEN }}&quot;
    script: |
      try {
        const tags_url = context.payload.repository.tags_url + &quot;?per_page=1&quot;
        const result = await github.request(tags_url)
        const current_tag = result.data[0].name
        await github.rest.repos.createRelease({
          draft: false,
          generate_release_notes: true,
          name: current_tag,
          owner: context.repo.owner,
          prerelease: false,
          repo: context.repo.repo,
          tag_name: current_tag,
        });
      } catch (error) {
        core.setFailed(error.message);
      }
</code></pre>
<p>This will create a release using the GitHub API.</p>
<h2>Adding Husky.Net</h2>
<p>We will use Husky.Net to lint the commit message. this will make the commit message follow the conventional commits standard.</p>
<blockquote>
<p>As I said earlier, This is not required. But it is a nice to have. If you don&#x27;t want to use it you can skip this section. But I highly recommend it.</p>
</blockquote>
<p>Follow the steps here to add Husky.Net to your project. https://alirezanet.github.io/Husky.Net/guide/getting-started.html#installation</p>
<p>if you are new to git hooks, please check this https://githooks.com. It will help you to understand what git hooks are.</p>
<h3>Add a pre-commit hook</h3>
<p>We will add a pre-commit hook to lint the commit message. Husky.Net will run the pre-commit hook before the commit is made.</p>
<pre><code class="language-bash">dotnet husky add pre-commit
</code></pre>
<p>This will add a pre-commit hook to your project. You can find the hook in the <code>.husky</code> folder. In the <code>pre-commit</code> file, you can add the commands you want to run before the commit is made. In our case, we will run a group of command. This is a good example in case you want to run multiple commands before the commit is made.</p>
<pre><code class="language-bash">husky run -v --group &quot;pre-commit&quot;
</code></pre>
<h3>Add commit-msg hook</h3>
<p>We will add a commit msg hook to lint the commit message before the commit is made. Husky.Net will run the commit msg hook before the commit is made.</p>
<pre><code class="language-bash">dotnet husky add commit-msg
</code></pre>
<p>This will add a commit msg hook to your project. You can find the hook in the <code>.husky</code> folder. In the <code>commit-msg</code> file, you can add the commands you want to run before the commit is made. In our case, we will run commit-msg.</p>
<pre><code class="language-bash">husky run --name &quot;commit-message-linter&quot; --args &quot;$1&quot;
echo
echo Great work! 🥂
echo
</code></pre>
<h3>Add a commit message linter</h3>
<p>We will add a commit message linter to lint the commit message. Husky.Net will run the commit message linter before the commit is made. Create a new folder in the <code>.husky</code> folder and name it <code>csx</code> (csx stands for C# script). In the <code>csx</code> folder, create a new file and name it <code>commit-lint.csx</code>. In the <code>commit-lint.csx</code> file, add the following code.</p>
<pre><code class="language-csharp">using System.Text.RegularExpressions;

private var pattern = @&quot;^(?=.{1,90}$)(?:build|feat|ci|chore|docs|fix|perf|refactor|revert|style|test|wip)(?:\(.+\))*(?::).{4,}(?:#\d+)*(?&lt;![\.\s])$&quot;;
private var msg = File.ReadAllLines(Args[0])[0];

if (Regex.IsMatch(msg, pattern))
    return 0;

Console.ForegroundColor = ConsoleColor.Red;
Console.WriteLine(&quot;Invalid commit message&quot;);
Console.ResetColor();
Console.WriteLine(&quot;e.g: &#x27;feat(scope): subject&#x27; or &#x27;fix: subject&#x27;&quot;);
Console.ForegroundColor = ConsoleColor.Gray;
Console.WriteLine(&quot;more info: https://www.conventionalcommits.org/en/v1.0.0/&quot;);

return 1;
</code></pre>
<h2>Update the task runner</h2>
<p>Now we have our hooks ready. We need to update the task runner to run the hooks. Open the <code>task-runner.json</code> file and update the tasks.</p>
<pre><code class="language-json">{
   &quot;tasks&quot;: [
     {
       &quot;name&quot;: &quot;commit-message-linter&quot;,
       &quot;command&quot;: &quot;husky&quot;,
       &quot;args&quot;: [
         &quot;exec&quot;,
         &quot;.husky/csx/commit-lint.csx&quot;,
         &quot;--args&quot;,
         &quot;${args}&quot;
       ]
     },
     {
       &quot;name&quot;: &quot;dotnet-format&quot;,
       &quot;group&quot;: &quot;pre-commit&quot;,
       &quot;command&quot;: &quot;dotnet-format&quot;,
       &quot;args&quot;: [&quot;--include&quot;, &quot;${staged}&quot;],
       &quot;include&quot;: [&quot;**/*.cs&quot;]
     }
   ]
}
</code></pre>
<h2>Commit and push</h2>
<p>Now we are ready to commit and push our changes. Commit and push your changes. You can find the commit message linter in action.</p>
<p>if you followed the steps correctly, you should see the following output when you didn&#x27;t follow the conventional commits standard.</p>
<pre><code class="language-bash">[Husky] 🚀 Loading tasks ...
--------------------------------------------------
--------------------------------------------------
[Husky] ⚡ Preparing task &#x27;dotnet-format&#x27;
[Husky] 💤 Skipped, no matched files
--------------------------------------------------
[Husky] 🚀 Loading tasks ...
--------------------------------------------------
[Husky] ⚡ Preparing task &#x27;commit-message-linter&#x27;
[Husky] ⌛ Executing task &#x27;commit-message-linter&#x27; ...
Invalid commit message
e.g: &#x27;feat(scope): subject&#x27; or &#x27;fix: subject&#x27;
More info: https://www.conventionalcommits.org/en/v1.0.0/
script execution failed

  ❌ Task &#x27;commit-message-linter&#x27; failed in 2.445ms

husky - commit-msg hook exited with code 1 (error)
</code></pre>
<p>if you commit message is valid, you should see the following output.</p>
<pre><code class="language-bash">[Husky] 🚀 Loading tasks ...
--------------------------------------------------
[Husky] ⚡ Preparing task &#x27;dotnet-format&#x27;
[Husky] 💤 Skipped, no matched files
--------------------------------------------------
[Husky] 🚀 Loading tasks ...
--------------------------------------------------
[Husky] ⚡ Preparing task &#x27;commit-message-linter&#x27;
[Husky] ⌛ Executing task &#x27;commit-message-linter&#x27; ...
[Husky]  ✔ Successfully executed in 404ms
--------------------------------------------------

Great work! 🥂
</code></pre>
<h2>Attach Husky.Net to your project</h2>
<p>To make things easier for other developers, you can attach Husky.Net to your project.</p>
<pre><code class="language-bash">dotnet husky attach &lt;path-to-project-file&gt;
</code></pre>
<p>This will add required configuration to your project file. You can find the configuration in the <code>PropertyGroup</code> section.</p>
<pre><code class="language-xml">&lt;Target Name=&quot;husky&quot; BeforeTargets=&quot;Restore;CollectPackageReferences&quot; Condition=&quot;&#x27;$(HUSKY)&#x27; != 0&quot;&gt;
   &lt;Exec Command=&quot;dotnet tool restore&quot;  StandardOutputImportance=&quot;Low&quot; StandardErrorImportance=&quot;High&quot;/&gt;
   &lt;Exec Command=&quot;dotnet husky install&quot; StandardOutputImportance=&quot;Low&quot; StandardErrorImportance=&quot;High&quot;
         WorkingDirectory=&quot;../../&quot; /&gt;  &lt;!--Update this to the relative path to your project root dir --&gt;
&lt;/Target&gt;
</code></pre>
<h2>Conclusion</h2>
<p>In this article, we have seen how to version and release a dotnet application using versionize and github actions. You can find the source code in the <a href="https://github.com/antosubash/dotnet-version-and-release">github repository</a> for this article. If you have any questions or suggestions, please leave a comment below. Thanks for reading. Happy coding! 🚀 🚀 🚀</p>]]></content:encoded>
          </item><item>
          <title>MicroK8s - Hassle-free Kubernetes</title>
          <link>https://blog.antosubash.com/posts/microk8s-gettings-started</link>
          <guid>https://blog.antosubash.com/posts/microk8s-gettings-started</guid>
          <pubDate>Thu, 15 Sep 2022 14:30:14 GMT</pubDate>
          <description>In this post we will see how to get started with the MicroK8s Kubernetes distribution.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to get started with the microk8s and deploy a simple service. We will see how to access the service from outside the cluster using ingress controller. We will also see how to use the cert-manager to get a valid ssl certificate for the service and then how to use the docker registry to store the docker images and how to use the postgres database in the microk8s cluster. We will use tye to build the application and deploy it in the microk8s cluster.</p>
<h2>What is MicroK8s?</h2>
<p>MicroK8s is the easiest and fastest way to get Kubernetes up and running. Experiment with the latest upstream features and toggle services on and off. Seamlessly move your work from dev to production. It is Minimal and CNCF-certified distribution. it has Batteries included and sensible defaults. Microk8s is built by the Kubernetes team at Canonical. It is a single package of kubernetes that installs on 42 flavours of Linux. It works on all major Linux distributions, Windows, and macOS.</p>
<h2>Why use MicroK8s?</h2>
<p>After moving away from docker swarm. I was looking for simple and easy to use kubernetes distribution. After trying out few options I have settled on microk8s as best option for the replacement of docker swarm. It is very easy to setup and managing it very easy and its perfect for my personal use. It provides all the features I need in the form of addons and removes most of the complexity in managing the kubernetes cluster. It is perfect for personal use. If you a developer who wants to use the kubernetes cluster without the complexities of managing the cluster this is the best option. It is also perfect for the small teams who want to use the kubernetes cluster for their development and testing.</p>
<h2>What is the cost?</h2>
<p>In this post I will create a single node cluster which will cost around 15€ or $. I&#x27;m going to use hetzner cloud and you can use the referral link <a href="https://hetzner.cloud/?ref=ENhA4rCZ5JUM">https://hetzner.cloud/?ref=ENhA4rCZ5JUM</a> and get 20€ for free to try it out.</p>
<h2>What are the goals</h2>
<p>The goals are as follows</p>
<ul>
<li>Setup and connect to the kubernetes cluster using kubectl</li>
<li>Setup reverse proxy to redirect traffic to containers (nginx) and lets encrypt for ssl.</li>
<li>Deploy registry and postgres with storage</li>
<li>Deploy a .Net application which connects to the postgres database</li>
</ul>
<h2>Parts</h2>
<p><a href="/posts/setup-micro-k8s-with-ubuntu">Part 1. Setup MicroK8s With Ubuntu</a></p>
<p><a href="/posts/setup-nginx-and-cert-manager-in-micro-k8s">Part 2. Setup Nginx and cert-manager in MicroK8s</a></p>
<p><a href="/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s">Part 3. Deploy docker registry and postgres database in MicroK8s</a></p>
<p><a href="/posts/create-and-deploy-dotnet-application-in-micro-k8s">Part 4. Create and deploy .Net application in MicroK8s</a></p>
<h2>Repository</h2>
<p>you can find most of the code and yaml files used in the series <a href="https://github.com/antosubash/microk8s-hetzner-deployment">here</a></p>
<h2>Conclusion</h2>
<p>This series is created with developers in mind. I wanted to show how easy it is to use k8s without the complexities. I think after docker swarm this is the best option for the my personal use. Give it a try and let me know how do you like it. I will be happy to hear your feedback. If you have any questions or suggestions please leave a comment below. I will be happy to answer them.</p>]]></content:encoded>
          </item><item>
          <title>Create and deploy .Net application in MicroK8s</title>
          <link>https://blog.antosubash.com/posts/create-and-deploy-dotnet-application-in-micro-k8s</link>
          <guid>https://blog.antosubash.com/posts/create-and-deploy-dotnet-application-in-micro-k8s</guid>
          <pubDate>Wed, 14 Sep 2022 19:55:43 GMT</pubDate>
          <description>In this post we will create a simple abp application and deploy it in the microk8s instance.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will create a simple abp application and deploy it in the microk8s instance. We will use tye to deploy the application in the cluster and setup the ingress for the application the ingress will use cert-manager to get the certificate for the application. this app will connect to a postgres database to store its data.</p>
<h2>Parts</h2>
<p><a href="/posts/setup-micro-k8s-with-ubuntu">Part 1. Setup MicroK8s With Ubuntu</a></p>
<p><a href="/posts/setup-nginx-and-cert-manager-in-micro-k8s">Part 2. Setup Nginx and cert-manager in MicroK8s</a></p>
<p><a href="/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s">Part 3. Deploy docker registry and postgres database in MicroK8s</a></p>
<p>Part 4. Create and deploy .Net application in MicroK8s (this post)</p>
<h2>Repository</h2>
<p>you can find the sample application we will use in this post <a href="https://github.com/antosubash/abp-single-layer">here</a> and the yaml files used in this post <a href="https://github.com/antosubash/abp-single-layer/blob/main/todoapp-generate-production.yaml">here</a></p>
<h2>Create a new application</h2>
<p>We will use the abp cli to create a new application. If you want to create a new application you can use the following command.</p>
<pre><code class="language-bash">abp new TodoApp -t app-nolayers --preview -dbms PostgreSQL
</code></pre>
<p>We are using the app-nolayers template and we are using the PostgreSQL database. You can use the other templates as well. You can find more information about this template <a href="https://docs.abp.io/en/abp/latest/Startup-Templates/Application-Single-Layer">here</a>.</p>
<h2>Build the application</h2>
<p>We will use the tye to build the application. You can find more information about tye <a href="https://github.com/dotnet/tye">here</a></p>
<pre><code class="language-bash">tye init # this will create a tye.yaml file
tye build # this will build the application
</code></pre>
<h2>Update the application</h2>
<p>We will update the application and make some changes. we will remove the migration check and migrate the database on startup. We will also update the tye file with registry information.</p>
<p>lets update the <code>Program.cs</code> file with the following code.</p>
<pre><code class="language-csharp">var builder = WebApplication.CreateBuilder(args);
builder.Host.AddAppSettingsSecretsJson()
    .UseAutofac()
    .UseSerilog();
await builder.AddApplicationAsync&lt;TodoAppModule&gt;();
var app = builder.Build();
await app.InitializeApplicationAsync();
await app.Services.GetRequiredService&lt;TodoAppDbMigrationService&gt;(). MigrateAsync(); // add this line
Log.Information(&quot;Starting TodoApp.&quot;);
await app.RunAsync();
return 0;
</code></pre>
<p>Since we are going to use nginx to serve the application we need to add the forwarded headers middleware. We will add the following code to the <code>TodoAppModule.cs</code> file.</p>
<pre><code class="language-csharp">context.Services.Configure&lt;ForwardedHeadersOptions&gt;(options =&gt;
        {
            options.ForwardedHeaders =
                ForwardedHeaders.XForwardedProto;
        }); // add this line in ConfigureServices method

app.UseForwardedHeaders(); // add this line in  OnApplicationInitialization method
</code></pre>
<p>lets update the <code>tye.yaml</code> file with the following code.</p>
<pre><code class="language-yaml">name: todoapp
registry: registry.kdev.antosubash.com
services:
- name: todoapp
  project: TodoApp/TodoApp.csproj
</code></pre>
<p>lets add the version to the <code>TodoApp.csproj</code> file.</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
    &lt;Version&gt;1.0.0&lt;/Version&gt; &lt;!-- add this line --&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>
<p>lets build the application again.</p>
<pre><code class="language-bash">tye build
</code></pre>
<h2>Push the application to the registry</h2>
<p>lets push the application to the registry. we will use tye to push the application to the registry. tye will build the application and push it to the registry.</p>
<pre><code class="language-bash">tye push
</code></pre>
<blockquote>
<p>this will push the application to the registry. make sure you have logged in to the registry before pushing the application.</p>
</blockquote>
<h2>Deploy the application</h2>
<p>lets deploy the application to the microk8s instance. the first thing is to generate the yaml files. we will use the tye to generate the yaml files.</p>
<pre><code class="language-bash">tye generate
</code></pre>
<p>this will generate the yaml file. we will rename the generated yaml file to <code>todoapp-generate.yaml</code>. we will use the <code>todoapp-generate.yaml</code> file to deploy the application. before deploying the application we need to update the <code>todoapp-generate.yaml</code> file. we will update the image name and add the environment variables. we will also add the ingress resource. we will use the following code to update the <code>todoapp-generate.yaml</code> file.</p>
<pre><code class="language-yaml">kind: Deployment
apiVersion: apps/v1
metadata:
  name: todoapp
  labels:
    app.kubernetes.io/name: &#x27;todoapp&#x27;
    app.kubernetes.io/part-of: &#x27;todoapp&#x27;
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: todoapp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: &#x27;todoapp&#x27;
        app.kubernetes.io/part-of: &#x27;todoapp&#x27;
    spec:
      imagePullSecrets:
      - name: regcred
      containers:
      - name: todoapp
        image: registry.kdev.antosubash.com/todoapp:1.0.4
        imagePullPolicy: Always
        resources:
          limits:
            cpu: &quot;1&quot;
            memory: 1Gi
          requests:
            cpu: &quot;0.5&quot;
            memory: 1Gi
        env:
        - name: ASPNETCORE_URLS
          value: &#x27;http://*&#x27;
        - name: PORT
          value: &#x27;80&#x27;
        - name: CONNECTIONSTRINGS__Default
          value: &#x27;Host=postgres.default.svc.cluster.local;Port=5432;Database=TodoApp;User ID=postgres;Password=my_postgres_password;&#x27;
        - name: ASPNETCORE_ENVIRONMENT
          value: &#x27;Production&#x27;
        - name: App__SelfUrl
          value: &#x27;https://todoapp.kdev.antosubash.com&#x27;
        ports:
        - containerPort: 80
...
---
kind: Service
apiVersion: v1
metadata:
  name: todoapp
  labels:
    app.kubernetes.io/name: &#x27;todoapp&#x27;
    app.kubernetes.io/part-of: &#x27;todoapp&#x27;
spec:
  selector:
    app.kubernetes.io/name: todoapp
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
...
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: http-ingress-todoapp
  annotations:
    cert-manager.io/cluster-issuer: &quot;lets-encrypt&quot;
    kubernetes.io/ingress.class: &quot;public&quot;
    nginx.ingress.kubernetes.io/rewrite-target: &#x27;/$2&#x27;
  labels:
    app.kubernetes.io/part-of: &#x27;todoapp&#x27;
spec:
  tls:
  - hosts:
    - todoapp.kdev.antosubash.com
    secretName: todoapp-tls
  rules:
  - host: todoapp.kdev.antosubash.com
    http:
      paths:
      - backend:
          service:
            name: todoapp
            port:
              number: 80
        pathType: Prefix
        path: /()(.*)
...
</code></pre>
<p>lets deploy the application to the microk8s instance.</p>
<pre><code class="language-bash">kubectl apply -f todoapp-generate.yaml
</code></pre>
<h2>Access the application</h2>
<p>lets access the application. we will use the following url to access the application.</p>
<pre><code class="language-bash">https://todoapp.kdev.antosubash.com
</code></pre>
<h2>Conclusion</h2>
<p>This is the final post of the series. In this post we have seen how to deploy the application to the microk8s instance. we have also seen how to use the tye to deploy the application, build the application and push the application to the registry. we have also seen how to use the ingress resource to access the application. I hope you have enjoyed this series. I will see you in the next post.</p>]]></content:encoded>
          </item><item>
          <title>Deploy docker registry and postgres database in MicroK8s</title>
          <link>https://blog.antosubash.com/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s</link>
          <guid>https://blog.antosubash.com/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s</guid>
          <pubDate>Wed, 14 Sep 2022 19:53:18 GMT</pubDate>
          <description>In this post we will see how to deploy and secure the registry along with deploying a postgres database in microk8s</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to deploy and secure the registry along with deploying a postgres database in microk8s. We will also see how to connect to the created registry. We will also see how to create a secret in kubernetes and use it in the deployment. We will also see how to create a persistent volume and use it in the deployment.</p>
<h2>Parts</h2>
<p><a href="/posts/setup-micro-k8s-with-ubuntu">Part 1. Setup MicroK8s With Ubuntu</a></p>
<p><a href="/posts/setup-nginx-and-cert-manager-in-micro-k8s">Part 2. Setup Nginx and cert-manager in MicroK8s</a></p>
<p>Part 3. Deploy docker registry and postgres database in MicroK8s (this post)</p>
<p><a href="/posts/create-and-deploy-dotnet-application-in-micro-k8s">Part 4. Create and deploy .Net application in MicroK8s</a></p>
<h2>Docker Registry</h2>
<h3>Registry login info</h3>
<p>first lets create a username and password and store it in <code>registry.password</code> file.</p>
<pre><code class="language-bash">touch registry.password
</code></pre>
<p>lets create the username and password.</p>
<pre><code class="language-bash">docker run --entrypoint htpasswd httpd:2 -Bbn youruser yourpassword
</code></pre>
<p>lets store the username and password in the <code>registry.password</code> file.</p>
<pre><code class="language-bash">docker run --entrypoint htpasswd httpd:2 -Bbn youruser yourpassword
</code></pre>
<blockquote>
<p>make sure to replace <code>youruser</code> and <code>yourpassword</code> with your own username and password.</p>
</blockquote>
<p>this will output the username and password. copy the output and paste it in the <code>registry.password</code> file.</p>
<h3>Deploy registry</h3>
<p>lets create a namespace for the registry.</p>
<pre><code class="language-bash">microk8s kubectl create namespace registry
</code></pre>
<p>lets create a secret for the registry.</p>
<pre><code class="language-bash">microk8s create secret generic auth-secret --from-file=registry.password -n registry
</code></pre>
<p>Now we have the auth-secret created. lets create the secret for the docker registry.</p>
<pre><code class="language-yml">kubectl create secret docker-registry regcred -n default --docker-server=registry.yourdomain.com --docker-username=youruser --docker-password=yourpassword --docker-email=myemail@something.com
</code></pre>
<blockquote>
<p>make sure to replace the <code>yourdomain.com</code> with your domain name. also replace the <code>youruser</code> and <code>yourpassword</code> with the username and password you created earlier. also replace the <code>registry.yourdomain.com</code> with your domain name.</p>
</blockquote>
<p>lets create the folder for the registry.</p>
<pre><code class="language-bash">mkdir /mnt/registry
</code></pre>
<p>lets create the registry deployment.</p>
<pre><code class="language-yml">apiVersion: v1
kind: Namespace
metadata:
  name: registry
  labels:
    app: registry
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  namespace: registry
  labels:
    app: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry
  template:
    metadata:
      labels:
        app: registry
    spec:
      containers:
      - name: registry
        resources:
          requests:
            memory: &quot;100Mi&quot;
            cpu: &quot;250m&quot;
          limits:
            memory: &quot;200Mi&quot;
            cpu: &quot;500m&quot;
        image: registry:2
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: repo-vol
          mountPath: &quot;/var/lib/registry&quot;
        - name: certs-vol
          mountPath: &quot;/certs&quot;
          readOnly: true
        - name: auth-vol
          mountPath: &quot;/auth&quot;
          readOnly: true
        env:
        - name: REGISTRY_AUTH
          value: &quot;htpasswd&quot;
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: &quot;Registry Realm&quot;
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: &quot;/auth/registry.password&quot;
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: &quot;/certs/tls.crt&quot;
        - name: REGISTRY_HTTP_TLS_KEY
          value: &quot;/certs/tls.key&quot;
        - name: VIRTUAL_HOST
          value: &quot;registry.kdev.antosubash.com&quot;
     
      volumes:
      - name: repo-vol
        hostPath:
          # directory location on host
          path: /mnt/registry
          # this field is optional
          type: Directory
      - name: certs-vol
        secret:
          secretName: registry-tls-secret
      - name: auth-vol
        secret:
          secretName: auth-secret
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: registry
spec:
  selector:
    app: registry
  ports:
  - port: 5000
    targetPort: 5000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: registry
  namespace: registry
  labels:
    app: registry
  annotations:
    cert-manager.io/cluster-issuer: &quot;lets-encrypt&quot;
    nginx.ingress.kubernetes.io/backend-protocol: &quot;HTTPS&quot;
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
spec:
  tls:
  - hosts:
    - registry.kdev.antosubash.com
    secretName: registry-tls-secret
  rules:
  - host: registry.kdev.antosubash.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: docker-registry
            port:
              number: 5000   
</code></pre>
<blockquote>
<p>make sure to replace the <code>registry.kdev.antosubash.com</code> with your domain name.</p>
</blockquote>
<p>apply the deployment.</p>
<pre><code class="language-bash">microk8s kubectl apply -f registry.yml
</code></pre>
<p>lets check the pods.</p>
<pre><code class="language-bash">microk8s kubectl get pods -n registry
</code></pre>
<p>lets check the services.</p>
<pre><code class="language-bash">microk8s kubectl get services -n registry
</code></pre>
<p>lets check the ingress.</p>
<pre><code class="language-bash">microk8s kubectl get ingress -n registry
</code></pre>
<p>Now we have the registry deployed. lets test it.</p>
<pre><code class="language-bash">docker login registry.kdev.antosubash.com
</code></pre>
<blockquote>
<p>make sure to replace the <code>registry.kdev.antosubash.com</code> with your domain name.</p>
</blockquote>
<p>if you managed to login to the registry, then you have successfully deployed the registry.</p>
<h2>Postgres Database</h2>
<p>For this post, I am using the postgres database. you can use any database you want. I will be using the postgres database because it is the database I am most familiar with.</p>
<p>we will use the <code>PersistentVolume</code> to store the database data. so lets make we have the storage addon enabled.</p>
<pre><code class="language-bash">microk8s status
</code></pre>
<p>if the storage addon is not enabled, then enable it.</p>
<pre><code class="language-bash">microk8s enable hostpath-storage
</code></pre>
<p>Now we have the storage addon enabled. lets deploy the postgres database.</p>
<pre><code class="language-yml">apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes: [ReadWriteOnce]
  resources: { requests: { storage: 5Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      task: postgres
  template:
    metadata:
      labels:
        app: postgres
        task: postgres
    spec:
      containers:
        - name: postgres
          image: kartoza/postgis:12.0
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: &quot;test&quot;
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASS
              value: &quot;my_postgres_password&quot;
            - name: --auth
              value: &quot;md5&quot;
            - name: POSTGRES_MULTIPLE_EXTENSIONS
              value: &quot;postgis,hstore,postgis_topology&quot;
          resources:
            requests:
              memory: &quot;100Mi&quot;
              cpu: &quot;250m&quot;
            limits:
              memory: &quot;200Mi&quot;
              cpu: &quot;500m&quot;
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
    task: postgres
---
</code></pre>
<p>apply the deployment.</p>
<pre><code class="language-bash">microk8s kubectl apply -f postgres.yml
</code></pre>
<p>lets check the pods.</p>
<pre><code class="language-bash">microk8s kubectl get pods
</code></pre>
<p>lets check the services.</p>
<pre><code class="language-bash">microk8s kubectl get services
</code></pre>
<p>lets check the persistent volume claim.</p>
<pre><code class="language-bash">microk8s kubectl get pvc
</code></pre>
<p>Now we have the postgres database deployed. lets test it.</p>
<p>To test the database, we will use the <code>adminer</code> tool. you can use any tool you want.</p>
<p>we will deploy the <code>adminer</code> tool.</p>
<pre><code class="language-yml">apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgweb
spec:
  selector:
    matchLabels:
      app: pgweb
  template:
    metadata:
      labels:
        app: pgweb
    spec:
      containers:
      - name: pgweb
        image: adminer
        resources:
          limits:
            memory: &quot;128Mi&quot;
            cpu: &quot;500m&quot;
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: pgweb-service
spec:
  selector:
    app: pgweb
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgweb-ingress
  labels:
    name: pgweb-ingress
  annotations:
    kubernetes.io/ingress.class: &quot;public&quot;
    cert-manager.io/cluster-issuer: &quot;lets-encrypt&quot;
spec:
  tls:
    - hosts:
      - pgweb.kdev.antosubash.com
      secretName: pgweb-tls
  rules:
  - host: pgweb.kdev.antosubash.com
    http:
      paths:
      - pathType: Prefix
        path: &quot;/&quot;
        backend:
          service:
            name: pgweb-service
            port: 
              number: 8080
</code></pre>
<p>apply the deployment.</p>
<pre><code class="language-bash">microk8s kubectl apply -f pgweb.yml
</code></pre>
<p>lets check the pods.</p>
<pre><code class="language-bash">microk8s kubectl get pods
</code></pre>
<p>lets check the services.</p>
<pre><code class="language-bash">microk8s kubectl get services
</code></pre>
<p>lets check the ingress.</p>
<pre><code class="language-bash">microk8s kubectl get ingress
</code></pre>
<p>Now we have the <code>adminer</code> tool deployed. lets test it.</p>
<blockquote>
<p>make sure to replace the <code>pgweb.kdev.antosubash.com</code> with your domain name.</p>
</blockquote>
<p>Lets visit the <code>adminer</code> tool. <a href="https://pgweb.kdev.antosubash.com">https://pgweb.kdev.antosubash.com</a> and login with the following credentials.</p>
<pre><code class="language-bash">System: PostgreSQL
Server: postgres.default.svc.cluster.local
Username: postgres
Password: my_postgres_password
Database: test
</code></pre>
<h2>Conclusion</h2>
<p>In this post, we have deployed the docker registry and postgres database to the microk8s cluster. we have also deployed the <code>adminer</code> tool to test the database. In the next post, we will deploy a simple dotnet core application to the microk8s cluster.</p>
<p><a href="/posts/create-and-deploy-dotnet-application-in-micro-k8s">Part 4. Create and deploy .Net application in MicroK8s</a></p>
<h2>Credits</h2>
<p>Docker registry is secured based on this post https://timvw.be/2021/11/08/hosting-a-secure-registry-on-microk8s/</p>]]></content:encoded>
          </item><item>
          <title>Setup Nginx and cert-manager in MicroK8s</title>
          <link>https://blog.antosubash.com/posts/setup-nginx-and-cert-manager-in-micro-k8s</link>
          <guid>https://blog.antosubash.com/posts/setup-nginx-and-cert-manager-in-micro-k8s</guid>
          <pubDate>Wed, 14 Sep 2022 19:51:51 GMT</pubDate>
          <description>In this post we will see how to setup nginx reverse proxy and cert-manager in microk8s</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to setup nginx reverse proxy and cert-manager in microk8s. We will use the nginx ingress controller to create a reverse proxy for our applications. We will also use cert-manager to create and manage SSL certificates for our applications.</p>
<h2>Parts</h2>
<p><a href="/posts/setup-micro-k8s-with-ubuntu">Part 1. Setup MicroK8s With Ubuntu</a></p>
<p>Part 2. Setup Nginx and cert-manager in MicroK8s (this post)</p>
<p><a href="/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s">Part 3. Deploy docker registry and postgres database in MicroK8s</a></p>
<p><a href="/posts/create-and-deploy-dotnet-application-in-micro-k8s">Part 4. Create and deploy .Net application in MicroK8s</a></p>
<h3>Cert-Manager</h3>
<h3>What is cert-manager?</h3>
<p>cert-manager adds certificates and certificate issuers as resource types in Kubernetes clusters, and simplifies the process of obtaining, renewing and using those certificates.</p>
<p>It can issue certificates from a variety of supported sources, including Let&#x27;s Encrypt, HashiCorp Vault, and Venafi as well as private PKI. It will ensure certificates are valid and up to date, and attempt to renew certificates at a configured time before expiry.</p>
<p>We are going to use Let&#x27;s Encrypt for the ssl certificates.</p>
<h3>Enable cert-manger</h3>
<p>cert-manager comes as an addon for the microk8s. Make sure the addon is enabled. To check if the addons is enabled. just check the status of the microk8s.</p>
<pre><code class="language-bash">microk8s status
</code></pre>
<p><code>cert-manager</code> addons should be inside the enabled section.</p>
<p>If it is not available in the enabled section. then, run the following command to enable it.</p>
<pre><code class="language-bash">microk8s enable cert-manager
</code></pre>
<p>This will enable the cert-manager in microk8s.</p>
<h3>Add ClusterIssuer</h3>
<p>The first thing you&#x27;ll need to configure after you&#x27;ve enabled cert-manager is an Issuer or a ClusterIssuer. These are resources that represent certificate authorities (CAs) able to sign certificates in response to certificate signing requests.</p>
<h3>Production Issuer</h3>
<p>lets create a production issuer which can be used to get the ssl certificate from lets encrypt.</p>
<pre><code class="language-yaml">apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
 name: lets-encrypt
spec:
 acme:
   email:  username@yourdomain.com # Change the email here
   server: https://acme-v02.api.letsencrypt.org/directory
   privateKeySecretRef:
     name: lets-encrypt-prod
   solvers:
   - http01:
       ingress:
         class: public
</code></pre>
<h3>Staging issuer</h3>
<pre><code class="language-yaml">apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
 name: lets-encrypt-staging
spec:
 acme:
   server: https://acme-staging-v02.api.letsencrypt.org/directory
   email: username@yourdomain.com # Change the email here
   privateKeySecretRef:
     name: lets-encrypt-staging
   solvers:
   - http01:
       ingress:
         class:  public
</code></pre>
<h2>Setup nginx</h2>
<h3>What is Ingress</h3>
<p>Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. An Ingress may be configured to give Services externally-reachable URLs, load balance traffic, terminate SSL / TLS, and offer name-based virtual hosting. An Ingress controller is responsible for fulfilling the Ingress, usually with a load balancer, though it may also configure your edge router or additional frontends to help handle the traffic.</p>
<p>We are going to use <a href="https://kubernetes.github.io/ingress-nginx/">NGINX Ingress Controller</a> which comes as an addon for the microk8s.</p>
<h3>Enable Ingress</h3>
<p>The first step is to make sure the addon is enabled. To verify the that just run the <code>status</code> command.</p>
<pre><code class="language-bash">microk8s status
</code></pre>
<p>Make sure <code>ingress</code> is inside the enabled section.</p>
<p>If it is not available in the enabled section. then, run the following command to enable it.</p>
<pre><code class="language-bash">microk8s enable ingress
</code></pre>
<p>This will enable the ingress in microk8s.</p>
<h2>Testing Ingress and cert-manager</h2>
<p>Now, we have our <code>ingress</code> and <code>cert-manager</code> enabled. lets test these with deploying a simple <code>whoami</code> application.</p>
<pre><code class="language-yaml">kind: Deployment
apiVersion: apps/v1
metadata:
  name: whoami
  labels:
    app: traefiklabs
    name: whoami

spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefiklabs
      task: whoami
  template:
    metadata:
      labels:
        app: traefiklabs
        task: whoami
    spec:
      containers:
        - name: whoami
          image: traefik/whoami
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: &quot;100Mi&quot;
              cpu: &quot;250m&quot;
            limits:
              memory: &quot;200Mi&quot;
              cpu: &quot;500m&quot;

---
apiVersion: v1
kind: Service
metadata:
  name: whoami-service
spec:
  ports:
    - name: http
      port: 80
  selector:
    app: traefiklabs
    task: whoami
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: http-ingress-whoami
  annotations:
    cert-manager.io/cluster-issuer: &quot;lets-encrypt&quot;
    kubernetes.io/ingress.class: &quot;public&quot;
spec:
  tls:
    - hosts:
      -  whoami.kdev.antosubash.com
      secretName: whoami-tls
  rules:
  - host: &quot;whoami.kdev.antosubash.com&quot;
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: whoami-service
            port: 
              number: 80
</code></pre>
<p>you can also find this file in the repo <a href="https://github.com/antosubash/microk8s-hetzner-deployment/blob/main/whoami/whoami.yaml">here</a></p>
<h3>Deploy</h3>
<p>We will use the <code>kubectl</code> to deploy this application.</p>
<pre><code class="language-bash">kubectl apply -f whoami.yaml
</code></pre>
<h2>Conclusion</h2>
<p>In this post we enabled and configured two addons of microk8s. its cert-manager and ingress and to test these addons we also deployed a sample app. In the next post we will see how to deploy registry and postgres database.</p>
<p><a href="/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s">Part 3. Deploy docker registry and postgres database in MicroK8s</a></p>]]></content:encoded>
          </item><item>
          <title>Setup MicroK8s With Ubuntu</title>
          <link>https://blog.antosubash.com/posts/setup-micro-k8s-with-ubuntu</link>
          <guid>https://blog.antosubash.com/posts/setup-micro-k8s-with-ubuntu</guid>
          <pubDate>Wed, 14 Sep 2022 19:50:03 GMT</pubDate>
          <description>In this post we will see how to setup microk8s in ubuntu server.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Introduction</h2>
<p>In this post we will see how to create a single node kubernetes cluster using microk8s. We will use hetzner cloud to create the server and install ubuntu server on it. We will then install microk8s and connect to the cluster using kubectl.</p>
<h2>Parts</h2>
<p>Part 1. Setup MicroK8s With Ubuntu (this post)</p>
<p><a href="/posts/setup-nginx-and-cert-manager-in-micro-k8s">Part 2. Setup Nginx and cert-manager in MicroK8s</a></p>
<p><a href="/posts/deploy-docker-registry-and-postgres-database-in-micro-k8s">Part 3. Deploy docker registry and postgres database in MicroK8s</a></p>
<p><a href="/posts/create-and-deploy-dotnet-application-in-micro-k8s">Part 4. Create and deploy .Net application in MicroK8s</a></p>
<h2>Creating the Ubuntu Server</h2>
<h3>Prerequisites</h3>
<ul>
<li>Hetzner Account</li>
</ul>
<p>I&#x27;m going to use hetzner cloud to create this machine if you don&#x27;t have one then you can use the referral link <a href="here">https://hetzner.cloud/?ref=ENhA4rCZ5JUM</a> and get 20€ for free to try it out.</p>
<h3>Creating a project</h3>
<p>Once you have the hetzner account. login and create a project.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microk8s/microk8s1.gif" alt="Create Project"/></p>
<h3>Setup SSH</h3>
<p>The first step in the project is to SSH for the project.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microk8s/microk8s2.gif" alt="SSH key"/></p>
<h3>Setup Firewall</h3>
<p>Now lets setup the firewall for our server.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microk8s/microk8s3.gif" alt="Firewall"/></p>
<h3>Create server with firewall and ssh key</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microk8s/microk8s4.gif" alt="Create server"/></p>
<h2>Add DNS entry</h2>
<p>Now you have to add a DNS entry for your newly created machine. you can fine the the IP address of the machine in the Hetzner server page.</p>
<p>We need to add <code>A</code> record and a <code>CNAME</code> record.</p>
<pre><code class="language-bash">A XX.XX.XX.XX yourdomain.com
CNAME * yourdomain.com
</code></pre>
<p>For example this is how my sample entry looks like</p>
<p>Record      Host        Value
A           youtube1    95.217.191.119
CNAME       *           kdev1.antosubash.com</p>
<p>This might take some time to reflect so wait for a while to verify it.</p>
<h2>Verify DNS entry</h2>
<p>To verify dns entry we will use a tool called dig.</p>
<p>you can find it here https://toolbox.googleapps.com/apps/dig/#A/</p>
<p>Make sure your domain is pointing to your ip and your subdomain is pointing to your domain</p>
<p>yourdomain.com -&gt; XX.XX.XX.XX
subdomain.yourdomain.com -&gt; XX.XX.XX.XX</p>
<p>So both your domain and subdomain should point to the same IP Which is the IP of the machine we just created.</p>
<h2>Update ssh config</h2>
<p>ssh config file can be &quot;~/.ssh/config&quot;</p>
<p>In the config file add a entry for the newly created server.</p>
<pre><code class="language-bash">Host kdev1.yourdomain.com
   IdentitiesOnly yes
   IdentityFile ~/.ssh/yournewlycreatedkey # Not the pub file
</code></pre>
<h2>Update the server</h2>
<p>Run the following command to update the server</p>
<pre><code class="language-bash">sudo apt update
sudo apt upgrade
</code></pre>
<h2>Install Snapd daemon</h2>
<p>We will use the snap to microk8s. so we will install the snapd first.</p>
<pre><code class="language-bash">sudo apt install snapd
</code></pre>
<p>once the it is installed verify it by checking the version</p>
<pre><code class="language-bash">snap version
</code></pre>
<h2>Install MicroK8s</h2>
<p>The current version of the kubernetes is 1.25 so we are using the following command. To verify the current version take a look at <a href="https://microk8s.io/docs/getting-started">https://microk8s.io/docs/getting-started</a></p>
<pre><code class="language-bash">sudo snap install microk8s --classic --channel=1.25
</code></pre>
<h3>Join the group</h3>
<pre><code class="language-bash">sudo usermod -a -G microk8s $USER

sudo chown -f -R $USER ~/.kube

su - $USER
</code></pre>
<h3>Check the status</h3>
<pre><code class="language-bash">microk8s status --wait-ready
</code></pre>
<h3>Access Kubernetes</h3>
<pre><code class="language-bash">microk8s kubectl get nodes
</code></pre>
<h3>Create alias</h3>
<pre><code class="language-bash">alias kubectl=&#x27;microk8s kubectl&#x27;
</code></pre>
<h3>View Cluster Info</h3>
<pre><code class="language-bash">kubectl cluster-info
</code></pre>
<h3>View Kube config</h3>
<pre><code class="language-bash">microk8s config
</code></pre>
<p>This config which is displayed here is the one we will use to connect to the cluster. copy it and configure your kubectl in your machine.</p>
<p>If you want to know how to install <code>kubectl</code> look here https://kubernetes.io/docs/tasks/tools/</p>
<h2>Enable addons</h2>
<pre><code class="language-bash">microk8s enable dns ingress prometheus cert-manager hostpath-storage
</code></pre>
<h2>Verify addons</h2>
<pre><code class="language-bash">microk8s kubectl get all --all-namespaces
</code></pre>
<h2>Create a setup script</h2>
<p>you can create a setup script to automate the setup process. I have created a setup script which you can find below. this script will install the microk8s and enable the addons.</p>
<p>let&#x27;s create a file called <code>setup.sh</code> and add the following content.</p>
<pre><code class="language-bash">sudo nano setup.sh
</code></pre>
<p>lets set the permissions for the script</p>
<pre><code class="language-bash">sudo chmod +x setup.sh
</code></pre>
<p>Now we have the file and the permissions. lets add the following content to the file.</p>
<pre><code class="language-bash">#!/bin/bash
sudo apt update
sudo apt upgrade
sudo apt install snapd -y
snap version
sudo snap install microk8s --classic --channel=1.25
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube
su - $USER
microk8s status --wait-ready
alias kubectl=&#x27;microk8s kubectl&#x27;
kubectl cluster-info
microk8s enable dns ingress prometheus cert-manager hostpath-storage
microk8s kubectl get all --all-namespaces
microk8s kubectl get nodes
</code></pre>
<h2>Run the setup script</h2>
<pre><code class="language-bash">sudo bash setup.sh
</code></pre>
<p>this will take some time to complete. once it is completed you can verify the status of the cluster by running the following command.</p>
<pre><code class="language-bash">microk8s status
</code></pre>
<h2>Access the cluster</h2>
<p>To access the cluster we will use the <code>kubectl</code> command. you can find the installation guide for kubectl <a href="https://kubernetes.io/docs/tasks/tools/">here</a></p>
<p>Once you have the kubectl installed you can run the following command to access the cluster.</p>
<pre><code class="language-bash">microk8s config &gt; ~/.kube/config
</code></pre>
<p>you can copy the content of the config file and paste it in your <code>~/.kube/config</code> file.</p>
<h2>Using Lens to access the cluster</h2>
<p>Lens is a tool to access the kubernetes cluster. you can find the installation guide <a href="https://k8slens.dev/">here</a>. once you have installed the lens you can add the cluster by clicking the <code>+</code> button. and paste the config file in the <code>kubeconfig</code> field and click the <code>connect</code> button.</p>
<h2>Prepare the terminal with oh-my-zsh</h2>
<p>I am using the oh-my-zsh to prepare my terminal. you can find the installation guide <a href="https://ohmyz.sh/">here</a></p>
<h2>Install oh-my-zsh</h2>
<pre><code class="language-bash">sudo apt install zsh
sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
</code></pre>
<h2>Install autosuggestions and syntax highlighting</h2>
<pre><code class="language-bash">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
</code></pre>
<h2>Update the .zshrc file</h2>
<pre><code class="language-bash">nano ~/.zshrc
</code></pre>
<p>add the following lines to the file</p>
<pre><code class="language-bash">plugins=(git kubectl zsh-autosuggestions zsh-syntax-highlighting)
</code></pre>
<p>Also update the theme to <code>agnoster</code></p>
<pre><code class="language-bash">ZSH_THEME=&quot;agnoster&quot;
</code></pre>
<p>add the kubectl alias to the file</p>
<pre><code class="language-bash">alias kubectl=&#x27;microk8s kubectl&#x27;
</code></pre>
<h2>Update the terminal</h2>
<pre><code class="language-bash">source ~/.zshrc
</code></pre>
<h2>Conclusion</h2>
<p>This is it for this post. We have created a server and installed microk8s and enabled few addons. we have also configured the kubectl to access the cluster. Now we are ready for the next step. In the next step we will see how to setup nginx and cert manager. so that we can deploy our first app.</p>
<p><a href="/posts/setup-nginx-and-cert-manager-in-micro-k8s">Part 2. Setup Nginx and cert-manager in MicroK8s</a></p>]]></content:encoded>
          </item><item>
          <title>NDepend - A tool you can depend on</title>
          <link>https://blog.antosubash.com/posts/ndepend</link>
          <guid>https://blog.antosubash.com/posts/ndepend</guid>
          <pubDate>Tue, 06 Sep 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to use NDepend to improve your .net development.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to use the NDepends to improve you .net development.</p>
<h2>What is NDepend?</h2>
<p>NDepends is a static analyzer. It analyses your code and help you to improve code quality. It creates a dashboard to view the stats about your project and display most relevant info. It creates a in-depth reports that helps to maintain large complex project. It also helps to enforce coding standards.</p>
<p>you can find all the features available here : https://www.ndepend.com/features/</p>
<h2>Benefits of using NDepend</h2>
<ul>
<li>Code maintainability</li>
<li>Enforce code rules</li>
<li>View the Impact of code change and trends</li>
<li>Visualize code dependencies</li>
<li>Explore the technical debt</li>
<li>and many more</li>
</ul>
<h2>Is it free?</h2>
<p>No. It is a paid product. At the time of the this writing it cost €399 for dev machines. I have received the test license to play around.</p>
<h2>Sample Report</h2>
<p>Orchard core sample report: https://www.ndepend.com/Sample-Reports/OnOrchadCore/NDependReport.html#Main</p>
<h2>Getting NDepend</h2>
<p>you can do download it from here https://www.ndepend.com/download</p>
<p>Here is the install guide https://www.ndepend.com/docs/getting-started-with-ndepend#Part1</p>
<h2>Using NDepend</h2>
<p>For this purpose I will use the Tasky Abp Microservice solution. It is a ABP Microservice application which I have created for a youtube series.</p>
<p>The first step is to add NDpend to your solution.</p>
<h3>Adding NDepend</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/ndepend/ndepend1.png" alt="Adding NDepend"/></p>
<p>As shown in the image adding <code>ndepend</code> to your solution is very easy. once added it will start the analysis of the solution and find all the projects and assemblies of your project. once it is done it will prompt with the list of found assemblies. you might want to ignore some assemblies like test and those can be managed in the next step.</p>
<h3>Start Analysis</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/ndepend/ndepend2.png" alt="Start Analysis"/></p>
<p>After the clicking the analysis <code>ndepend</code> will start the analysis of your code. it might take a min for it show the dashboard.</p>
<h3>Dashboard</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/ndepend/ndepend3.png" alt="Dashboard"/></p>
<p>Dashboard is where you will see most of the info about you solution. based on the status of you solution it will create a rating. In my case the rating was <code>B</code> for my tasky microservice solution. It also displays more basic metrics like &quot;Types&quot; and &quot;Line of code&quot;. What I found most interesting is the &quot;Quality Gates&quot; and &quot;Rules&quot; section of the dashboard. It showed 2 problems I didn&#x27;t see before in my code and gave me an explanation on why they are bad.</p>
<p>The problems were</p>
<ul>
<li>Avoid methods with too many parameters</li>
</ul>
<p>It was a Identity server seed method which was very big and doing too many things.</p>
<ul>
<li>Avoid having different types with same name</li>
</ul>
<p>This was a sample Dto class which I forgot to delete. So, the same type was available in multiple services.</p>
<p>This was really helpful. After seeing these problems I was more curious to find out what else was wrong in my solution and I had lots of minor issues. It was a great learning process.</p>
<h3>Info Window</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/ndepend/ndepend4.png" alt="Info Window"/></p>
<p>Info window explains your problem. It show what rules were broken and explain the rule clearly in a simple way. It also shows suggestion on how to fix the problem.</p>
<h3>Dependency graph</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/ndepend/ndepend5.png" alt="Dependency graph"/></p>
<p>This is one thing I wished that VS already had. When I saw the Dependency graph it was easy to understand the structure of the application. This will the first thing I do on any new solution to get the overall view of the solution. This helps to create a memory map of project.</p>
<h3>And many more</h3>
<p>Once it is added the to the solution it starts to track the trend. the trend can be viewed in the graph. it will help us in improving the codebase. there are many more feature for this tool this is just an introduction of very few benefits.</p>
<h2>Final thoughts</h2>
<p>If your are managing a large project then a tool like <code>ndepend</code> is very useful. It has good CI/CD integration so we can generate the nice report for every build and monitor the progress. The only problem I had is with the VS Code integration. There is a standalone instance which we can try with VS Code but there is no integration with VS Code. The rules helps you to write code with best practices and make you a better developer. It also helps with consistency in the codebase.</p>
<p>Next version of the <code>ndepend</code> will have more integration with Rider and VS Code to open source file declaration and diff source files. but not a full integration. Here is how it will look like.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/ndepend/ndepend6.png" alt="Dependency graph"/></p>
<h2>Will I buy it?</h2>
<p>For a personal project - No</p>
<p>For a Commercial project - Yes, for sure.</p>
<p>399 Euro is bit on the expensive side for me to buy it for using it on the hobby project. on the other hand I will buy it for me and my team at work. When you compare the cost and benefit it provides at work. it is worth every penny. hope this helps.</p>]]></content:encoded>
          </item><item>
          <title>Docker Deployment using docker swarm</title>
          <link>https://blog.antosubash.com/posts/docker-swarm-hetzner</link>
          <guid>https://blog.antosubash.com/posts/docker-swarm-hetzner</guid>
          <pubDate>Sun, 31 Jul 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to setup docker swarm for your development environment.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>State is Docker swarm</h2>
<p>The state of docker swarm is a big question for a while now. I have been a docker swarm user for a while and I really like the simplicity of it. But it seems like there is no major development taking place and the only alternative seems to be kubernetes which is quite complex compare to docker swarm. the main take away is that the future of docker swarm is uncertain.</p>
<h2>Why use docker swarm</h2>
<p>Docker include swarm mode for natively managing a cluster of Docker Engines called a swarm. It is very simple to manage multiple docker nodes and create a cluster. It provides a basic cluster management, networking, service discovery and many more. you can find the full list of features <a href="https://docs.docker.com/engine/swarm/#feature-highlights">here</a>. For my personal use I don&#x27;t want to use the complex kubernetes cluster. If you are looking for simple easy to use docker deployment then docker swarm is the best option I can find.</p>
<h2>How much does it cost?</h2>
<p>Main goal of this series is to make sure the cost is low. So, the cost will be less than 15€ or 15$. I&#x27;m going to use hetzner cloud and you can use the referral link <a href="https://hetzner.cloud/?ref=ENhA4rCZ5JUM">here</a> and get 20€ for free to try it out.</p>
<h2>What are the goals</h2>
<p>The goals are as follows</p>
<ul>
<li>Secure the machine properly with proper firewall setup and ssh</li>
<li>Reverse proxy to redirect traffic to containers (traefik)</li>
<li>Deploy Redis, postgres, rabbitmq, registry</li>
<li>Interface for container management (portainer)</li>
<li>Deploy tasky microservice</li>
</ul>
<h2>Parts</h2>
<p><a href="/posts/part-1-setup-docker-with-ubuntu-server-in-hetzner">Part 1. Setting up Ubuntu Server with docker in Hetzner</a></p>
<p><a href="/posts/part-2-setup-docker-swarm-with-traefik-and-portainer">Part 2. Setting up docker swarm with traefik and portainer</a></p>
<p><a href="/posts/part-3-deploy-registry-redis-rabitmq-postgresql-in-docker">Part 3. Deploy redis, rabbitmq, seq, registry and postgres in docker swarm</a></p>
<p><a href="/posts/part-4-prepare-and-deploy-microservice-in-docker">Part 4. Deploy the microservice in docker swarm</a></p>]]></content:encoded>
          </item><item>
          <title>Prepare and deploy the microservice</title>
          <link>https://blog.antosubash.com/posts/part-4-prepare-and-deploy-microservice-in-docker</link>
          <guid>https://blog.antosubash.com/posts/part-4-prepare-and-deploy-microservice-in-docker</guid>
          <pubDate>Sat, 30 Jul 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to deploy the microservice solution to the our server.</description>
          <content:encoded><![CDATA[<h2>Posts in the Series</h2>
<p><a href="/posts/part-1-setup-docker-with-ubuntu-server-in-hetzner">Part 1. Setting up Ubuntu Server with docker in Hetzner</a></p>
<p><a href="/posts/part-2-setup-docker-swarm-with-traefik-and-portainer">Part 2. Setting up docker swarm with traefik and portainer</a></p>
<p><a href="/posts/part-3-deploy-registry-redis-rabitmq-postgresql-in-docker">Part 3. Deploy redis, rabbitmq, seq, registry and postgres in docker swarm</a></p>
<p>Part 4. Prepare and deploy the microservice for deployment (this post)</p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will prepare the microservice project for deployment and deploy it to the docker swarm. I&#x27;m going to use this <a href="/posts/abp-microservice-series">Sample microservice application</a> you can find the repo <a href="https://github.com/antosubash/Tasky">here</a></p>
<h2>Update the github actions</h2>
<pre><code class="language-yml">name: Docker Image CI

on:
  push:
    branches: [ main ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Docker Login
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
      uses: docker/login-action@v1.14.1
      with:
        # Server address of Docker registry. If not set then will default to Docker Hub
        registry: registry.yourdomain.com
        # Username used to log against the Docker registry
        username: ${{ secrets.REGISTRY_USERNAME }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - uses: actions/checkout@v2
    - name: Build the Gateway Docker image
      run: docker build . --file gateway/Tasky.Gateway/Dockerfile --tag gateway:dev
    - name: Docker tag images
      run: docker tag gateway:dev registry.yourdomain.com/gateway:dev
    - name: Push Gateway image
      run: docker push registry.yourdomain.com/gateway:dev
      
    - name: Build the IdentityServer Docker image
      run: docker build . --file apps/Tasky.IdentityServer/Dockerfile --tag identityserver:dev
    - name: Docker tag IdentityServer images
      run: docker tag identityserver:dev registry.yourdomain.com/identityserver:dev
    - name: Push IdentityServer image
      run: docker push registry.yourdomain.com/identityserver:dev
  
    - name: Build the Administration Docker image
      run: docker build . --file services/administration/host/Tasky.Administration.HttpApi.Host/Dockerfile --tag administration:dev
    - name: Docker tag Administration images
      run: docker tag administration:dev registry.yourdomain.com/administration:dev
    - name: Push Administration image
      run: docker push registry.yourdomain.com/administration:dev
      
    - name: Build the IdentityService Docker image
      run: docker build . --file services/identity/host/Tasky.IdentityService.HttpApi.Host/Dockerfile --tag identityservice:dev
    - name: Docker tag identityservice images
      run: docker tag identityservice:dev registry.yourdomain.com/identityservice:dev
    - name: Push IdentityService image
      run: docker push registry.yourdomain.com/identityservice:dev
    
    - name: Build the SaaS Docker image
      run: docker build . --file services/saas/host/Tasky.SaaS.HttpApi.Host/Dockerfile --tag saas:dev
    - name: Docker tag SaaS images
      run: docker tag saas:dev registry.yourdomain.com/saas:dev
    - name: Push SaaS image
      run: docker push registry.yourdomain.com/saas:dev

    - name: Build the DbMigrator Docker image
      run: docker build . --file shared/Tasky.DbMigrator/Dockerfile --tag migrator:dev
    - name: Docker tag DbMigrator images
      run: docker tag migrator:dev registry.yourdomain.com/migrator:dev
    - name: Push DbMigrator image
      run: docker push registry.yourdomain.com/migrator:dev
</code></pre>
<p><code>secrets.REGISTRY_USERNAME</code> and <code>secrets.REGISTRY_PASSWORD</code> are coming from the repository secrets.</p>
<h2>Create docker compose</h2>
<h3>Migrator</h3>
<pre><code class="language-yml">version: &#x27;3.4&#x27;

services:
  dbmigrator:
    image: registry.antosubash.com/migrator:dev
    environment:
      ConnectionStrings__SaaSService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;
      ConnectionStrings__IdentityService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;
      ConnectionStrings__AdministrationService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
      ConnectionStrings__ProjectService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
</code></pre>
<h3>Tasky Services Compose</h3>
<pre><code class="language-yml">version: &#x27;3.4&#x27;

services:
  identityserver:
    image: registry.youtube.antosubash.com/identityserver:dev
    networks:
      - traefik-public
    environment:
      App__SelfUrl: &quot;https://id.tasky.youtube.antosubash.com&quot;
      App__ClientUrl: &quot;https://app.tasky.youtube.antosubash.com,https://gw.tasky.youtube.antosubash.com&quot;
      App__CorsOrigins: &quot;https://app.tasky.youtube.antosubash.com,https://gw.tasky.youtube.antosubash.com&quot;
      App__RedirectAllowedUrls: &quot;https://app.tasky.youtube.antosubash.com,https://gw.tasky.youtube.antosubash.com&quot;
      ConnectionStrings__SaaSService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;
      ConnectionStrings__IdentityService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;
      ConnectionStrings__AdministrationService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
      ConnectionStrings__ProjectService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
      Redis__Configuration : &quot;10.0.0.2:6379,password=my_master_password&quot;
      RabbitMQ__Connections__Default__HostName : &quot;10.0.0.2&quot;
      RabbitMQ__Connections__EventBus__ClientName : &quot;TaskyIdentityService&quot;
      RabbitMQ__Connections__EventBus__ExchangeName : &quot;Tasky&quot;
      Serilog__WriteTo__[0]__Name : &quot;Seq&quot;
      Serilog__WriteTo__[0]__Args__serverUrl : &quot;https://seq.youtube.antosubash.com&quot;
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        - &quot;traefik.http.routers.identityserver.rule=Host(`id.tasky.youtube.antosubash.com`)&quot;
        - &quot;traefik.http.services.identityserver.loadbalancer.server.port=80&quot;
        - &quot;traefik.http.routers.identityserver.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.identityserver.tls=true&quot;
        - &quot;traefik.http.routers.identityserver.tls.certresolver=leresolver&quot;

  gateway:
    image: registry.youtube.antosubash.com/gateway:dev
    networks:
      - traefik-public
    environment:
      ReverseProxy__Clusters__main__Destinations__main__Address : &quot;http://10.0.0.2:7001&quot;
      ReverseProxy__Clusters__identity__Destinations__identity__Address : &quot;http://10.0.0.2:7002&quot;
      ReverseProxy__Clusters__account__Destinations__account__Address : &quot;http://10.0.0.2:7002&quot;
      ReverseProxy__Clusters__saas__Destinations__saas__Address : &quot;http://10.0.0.2:7003&quot;
      ReverseProxy__Clusters__project__Destinations__project__Address : &quot;http://10.0.0.2:7004&quot;
      Serilog__WriteTo__[0]__Name : &quot;Seq&quot;
      Serilog__WriteTo__[0]__Args__serverUrl : &quot;https://seq.youtube.antosubash.com&quot;
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        - &quot;traefik.http.routers.gateway.rule=Host(`gw.tasky.youtube.antosubash.com`)&quot;
        - &quot;traefik.http.services.gateway.loadbalancer.server.port=80&quot;
        - &quot;traefik.http.routers.gateway.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.gateway.tls=true&quot;
        - &quot;traefik.http.routers.gateway.tls.certresolver=leresolver&quot;

  administrationservice:
    image: registry.youtube.antosubash.com/administration:dev
    ports:
      - target: 80
        published: 7001
        protocol: tcp
        mode: host
    environment:
      App__CorsOrigins: http://10.0.0.2:7000
      ConnectionStrings__SaaSService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;
      ConnectionStrings__IdentityService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;
      ConnectionStrings__AdministrationService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
      ConnectionStrings__ProjectService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
      Redis__Configuration : &quot;10.0.0.2:6379,password=my_master_password&quot;
      AuthServer__Authority : &quot;https://id.tasky.youtube.antosubash.com&quot;
      AuthServer__RequireHttpsMetadata : &quot;false&quot;
      AuthServer__SwaggerClientId : &quot;AdministrationService_Swagger&quot;
      AuthServer__SwaggerClientSecret : &quot;1q2w3e*&quot;
      RabbitMQ__Connections__Default__HostName : &quot;10.0.0.2&quot;
      RabbitMQ__Connections__EventBus__ClientName : &quot;TaskyAdministrationService&quot;
      RabbitMQ__Connections__EventBus__ExchangeName : &quot;Tasky&quot;
      Serilog__WriteTo__[0]__Name : &quot;Seq&quot;
      Serilog__WriteTo__[0]__Args__serverUrl : &quot;https://seq.youtube.antosubash.com&quot;

  identityservice:
    image: registry.youtube.antosubash.com/identityservice:dev
    ports:
      - target: 80
        published: 7002
        protocol: tcp
        mode: host
    environment:
      App__CorsOrigins: http://10.0.0.2:7000
      ConnectionStrings__SaaSService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;
      ConnectionStrings__IdentityService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;
      ConnectionStrings__AdministrationService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
      ConnectionStrings__ProjectService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
      Redis__Configuration : &quot;10.0.0.2:6379,password=my_master_password&quot;
      AuthServer__Authority : &quot;https://id.tasky.youtube.antosubash.com&quot;
      AuthServer__RequireHttpsMetadata : &quot;false&quot;
      AuthServer__SwaggerClientId : &quot;IdentityService_Swagger&quot;
      AuthServer__SwaggerClientSecret : &quot;1q2w3e*&quot;
      RabbitMQ__Connections__Default__HostName : &quot;10.0.0.2&quot;
      RabbitMQ__Connections__EventBus__ClientName : &quot;TaskyIdentityService&quot;
      RabbitMQ__Connections__EventBus__ExchangeName : &quot;Tasky&quot;
      Serilog__WriteTo__[0]__Name : &quot;Seq&quot;
      Serilog__WriteTo__[0]__Args__serverUrl : &quot;https://seq.youtube.antosubash.com&quot;

  saasservice:
    image: registry.youtube.antosubash.com/saas:dev
    ports:
      - target: 80
        published: 7003
        protocol: tcp
        mode: host
    environment:
      App__CorsOrigins: http://10.0.0.2:7000
      ConnectionStrings__SaaSService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;
      ConnectionStrings__IdentityService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;
      ConnectionStrings__AdministrationService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
      ConnectionStrings__ProjectService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
      Redis__Configuration : &quot;10.0.0.2:6379,password=my_master_password&quot;
      AuthServer__Authority : &quot;https://id.tasky.youtube.antosubash.com&quot;
      AuthServer__RequireHttpsMetadata : &quot;false&quot;
      AuthServer__SwaggerClientId : &quot;IdentityService_Swagger&quot;
      AuthServer__SwaggerClientSecret : &quot;1q2w3e*&quot;
      RabbitMQ__Connections__Default__HostName : &quot;10.0.0.2&quot;
      RabbitMQ__Connections__EventBus__ClientName : &quot;TaskyIdentityService&quot;
      RabbitMQ__Connections__EventBus__ExchangeName : &quot;Tasky&quot;
      Serilog__WriteTo__[0]__Name : &quot;Seq&quot;
      Serilog__WriteTo__[0]__Args__serverUrl : &quot;https://seq.youtube.antosubash.com&quot;

  projectservice:
    image: registry.youtube.antosubash.com/project:dev
    ports:
      - target: 80
        published: 7004
        protocol: tcp
        mode: host
    environment:
      App__CorsOrigins: http://10.0.0.2:7000
      ConnectionStrings__SaaSService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;
      ConnectionStrings__IdentityService: &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;
      ConnectionStrings__AdministrationService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
      ConnectionStrings__ProjectService : &quot;User ID=postgres;Password=my_postgres_password;Host=10.0.0.2;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
      Redis__Configuration : &quot;10.0.0.2:6379,password=my_master_password&quot;
      AuthServer__Authority : &quot;https://id.tasky.youtube.antosubash.com&quot;
      AuthServer__RequireHttpsMetadata : &quot;false&quot;
      AuthServer__SwaggerClientId : &quot;IdentityService_Swagger&quot;
      AuthServer__SwaggerClientSecret : &quot;1q2w3e*&quot;
      RabbitMQ__Connections__Default__HostName : &quot;10.0.0.2&quot;
      RabbitMQ__Connections__EventBus__ClientName : &quot;TaskyIdentityService&quot;
      RabbitMQ__Connections__EventBus__ExchangeName : &quot;Tasky&quot;
      Serilog__WriteTo__[0]__Name : &quot;Seq&quot;
      Serilog__WriteTo__[0]__Args__serverUrl : &quot;https://seq.youtube.antosubash.com&quot;

networks:
  traefik-public:
    external: true
</code></pre>]]></content:encoded>
          </item><item>
          <title>Deploy redis, rabbitmq, seq, registry and postgres in docker swarm</title>
          <link>https://blog.antosubash.com/posts/part-3-deploy-registry-redis-rabitmq-postgresql-in-docker</link>
          <guid>https://blog.antosubash.com/posts/part-3-deploy-registry-redis-rabitmq-postgresql-in-docker</guid>
          <pubDate>Tue, 21 Jun 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to deploy redis, rabbitmq, postgres and registry.</description>
          <content:encoded><![CDATA[<h2>Posts in the Series</h2>
<p><a href="/posts/part-1-setup-docker-with-ubuntu-server-in-hetzner">Part 1. Setting up Ubuntu Server with docker in Hetzner</a></p>
<p><a href="/posts/part-2-setup-docker-swarm-with-traefik-and-portainer">Part 2. Setting up docker swarm with traefik and portainer</a></p>
<p>Part 3. Deploy redis, rabbitmq, seq, registry and postgres in docker swarm (this post)</p>
<p><a href="/posts/part-4-prepare-and-deploy-microservice-in-docker">Part 4. Deploy the microservice in docker swarm</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to deploy redis, rabbitmq, postgres and registry.</p>
<h2>Deploy docker registry</h2>
<p>We will deploy a docker registry</p>
<h3>Create folder for registry deployment</h3>
<pre><code class="language-bash">mkdir /mnt/auth
mkdir /mnt/registry
</code></pre>
<p>Auth folder is for storing the password and registry folder is for storing the images.</p>
<h3>Create password for registry</h3>
<pre><code class="language-bash">docker run --entrypoint htpasswd httpd:2 -Bbn testuser testpassword
</code></pre>
<p>Copy the output to <code>/mnt/auth/registry.password</code></p>
<h3>Registry docker compose</h3>
<pre><code class="language-yml">version: &#x27;3&#x27;

services:
  registry:
    image: registry:2
    networks:
      - traefik-public
    environment:
      VIRTUAL_HOST: registry.yourdomain.com
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/registry.password
    volumes:
      - /mnt/auth:/auth
      - /mnt/registry:/var/lib/registry
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        - &quot;traefik.http.routers.registry.rule=Host(`registry.yourdomain.com`)&quot;
        - &quot;traefik.http.services.registry.loadbalancer.server.port=5000&quot;
        - &quot;traefik.http.routers.registry.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.registry.tls=true&quot;
        - &quot;traefik.http.routers.registry.tls.certresolver=leresolver&quot;
        
networks:
  traefik-public:
    external: true
</code></pre>
<h2>Deploy redis</h2>
<p>Redis is an in-memory data structure store, used as a distributed, in-memory key–value database, cache and message broker, with optional durability. Redis supports different kinds of abstract data structures, such as strings, lists, maps, sets, sorted sets, HyperLogLogs, bitmaps, streams, and spatial indices.</p>
<h3>Create folder for redis deployment</h3>
<pre><code class="language-bash">mkdir /mnt/redis
</code></pre>
<h3>Redis docker compose</h3>
<pre><code class="language-yml">version: &quot;3&quot;
  
services:
  redis-master:
    image: &quot;bitnami/redis:latest&quot;
    ports:
      - &quot;6379:6379&quot;
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=my_master_password
    volumes:
      - &#x27;/mnt/redis:/bitnami&#x27;
</code></pre>
<h2>Deploy postgres</h2>
<p>PostgreSQL, also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance.</p>
<h3>Create folder for postgres deployment</h3>
<pre><code class="language-bash">mkdir /mnt/postgres
</code></pre>
<h3>Postgres docker compose</h3>
<pre><code class="language-yml">version: &quot;3.2&quot;

services:
  postgres:
    image: kartoza/postgis:12.0
    ports:
      - 5432:5432
    volumes:
      - /mnt/postgres:/var/lib/postgresql
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: postgres
      POSTGRES_PASS: my_postgres_password
      --auth: &quot;md5&quot;
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore,postgis_topology
</code></pre>
<h2>Deploy rabbitmq</h2>
<p>RabbitMQ is an open-source message-broker Software that originally implemented the Advanced Message Queuing Protocol and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol, MQ Telemetry Transport, and other protocols.</p>
<h3>rabbitmq docker compose</h3>
<pre><code class="language-yml">version: &#x27;3.7&#x27;

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    ports:
      - &quot;15672:15672&quot;
      - &quot;5672:5672&quot;
</code></pre>
<h2>Deploy seq</h2>
<p>Seq is the intelligent search, Analysis, and alerting server built specifically for modern structured log data.</p>
<h3>Create folder for seq deployment</h3>
<pre><code class="language-bash">mkdir /mnt/seq
</code></pre>
<h3>seq docker compose</h3>
<pre><code class="language-yml">version: &#x27;3&#x27;

services:
  seq:
    image: datalust/seq
    networks:
      - traefik-public
    environment:
      ACCEPT_EULA: &quot;Y&quot;
    volumes:
      - /mnt/seq:/data
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        - &quot;traefik.http.routers.seq.rule=Host(`seq.yourdomain.com`)&quot;
        - &quot;traefik.http.services.seq.loadbalancer.server.port=80&quot;
        - &quot;traefik.http.routers.seq.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.seq.tls=true&quot;
        - &quot;traefik.http.routers.seq.tls.certresolver=leresolver&quot;
        
networks:
  traefik-public:
    external: true
</code></pre>]]></content:encoded>
          </item><item>
          <title>Setting up docker swarm with traefik and portainer</title>
          <link>https://blog.antosubash.com/posts/part-2-setup-docker-swarm-with-traefik-and-portainer</link>
          <guid>https://blog.antosubash.com/posts/part-2-setup-docker-swarm-with-traefik-and-portainer</guid>
          <pubDate>Mon, 20 Jun 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to create a docker swarm and deploy traefik and portainer in our ubuntu server.</description>
          <content:encoded><![CDATA[<h2>Posts in the Series</h2>
<p><a href="/posts/part-1-setup-docker-with-ubuntu-server-in-hetzner">Part 1. Setting up Ubuntu Server with docker in Hetzner</a></p>
<p>Part 2. Setting up docker swarm with traefik and portainer (this post)</p>
<p><a href="/posts/part-3-deploy-registry-redis-rabitmq-postgresql-in-docker">Part 3. Deploy redis, rabbitmq, seq, registry and postgres in docker swarm</a></p>
<p><a href="/posts/part-4-prepare-and-deploy-microservice-in-docker">Part 4. Deploy the microservice in docker swarm</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to create a docker swarm and deploy traefik and portainer in our ubuntu server.</p>
<h2>What is traefik?</h2>
<p>Traefik is a leading modern reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically.</p>
<p>For more info visit : https://traefik.io/traefik</p>
<h2>What is portainer?</h2>
<p>Portainer is the definitive container management tool for Docker, Docker Swarm with it&#x27;s highly intuitive GUI and API. Portainer is a fully featured management tool for Docker. It runs locally, giving developers a rich UI to build and publish container images, deploy and manage applications and leverage data persistence and horizontal scaling for their applications. And, once an application is deployed into a container, Portainer makes it easy for users to secure, monitor and measure the performance of the platform. The tool negates the need for developers to learn Infrastructure as Code and makes it easy for them to maximize their efficiency which means both users and organizations love it.</p>
<p>For more info visit: https://www.portainer.io/</p>
<h2>What is Docker Swarm?</h2>
<p>Docker swarm is a container orchestration tool, meaning that it allows the user to manage multiple containers deployed across multiple host machines. One of the key benefits associated with the operation of a docker swarm is the high level of availability offered for applications.</p>
<p>For more info: https://docs.docker.com/engine/swarm/</p>
<h2>Init Docker Swarm</h2>
<pre><code class="language-bash">docker swarm init --advertise-addr 10.0.0.3 # change the ip here with your machine ip
</code></pre>
<p>This will initialize docker in swarm mode and also display a join token for the other machines to join the cluster.</p>
<h2>Create a traefik network</h2>
<pre><code class="language-bash">docker network create --driver overlay traefik-public 
</code></pre>
<p>This is our primary network for the traefik.</p>
<h2>Create a htpasswd password</h2>
<pre><code class="language-bash">docker run --rm httpd:2.4-alpine htpasswd -nbB admin &lt;password&gt; | cut -d &quot;:&quot; -f 2
</code></pre>
<p>Escape the $ sign in the password by adding one more $ to the generated password. We need this password to protect our end point in the traefik proxy.</p>
<h2>Create folders</h2>
<h3>for Traefik</h3>
<p>create a folder and set 600 as permission.</p>
<pre><code class="language-bash">mkdir /mnt/data
mkdir /mnt/data/traefik
touch /mnt/data/traefik/acme.json
chmod 600 /mnt/data/traefik/acme.json
</code></pre>
<h3>for Portainer</h3>
<pre><code class="language-bash">mkdir /mnt/data/portainer
</code></pre>
<h2>Traefik docker compose</h2>
<p>Traefik is our main reverse proxy and it will sit in front of all out application. we will control all the routes to our containers using traefik.</p>
<pre><code class="language-yml">version: &quot;3.3&quot;

services:
  traefik:
    image: &quot;traefik:v2.1.4&quot;
    command:
      - --log.level=INFO
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode=true
      - --providers.docker.network=traefik-public
      - --api
      - --api.dashboard=true
      - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      # update your email here
      - --certificatesresolvers.leresolver.acme.email=youremail@test.com
      # Make sure the this file is available and permission is set correctly
      - --certificatesresolvers.leresolver.acme.storage=/le/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
    ports:
      - &quot;80:80&quot;
      - &quot;443:443&quot;
    networks:
      - traefik-public
    volumes:
      - &quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot;
      # Make sure the volume folder is created
      - &quot;/mnt/data/traefik/acme.json:/le/acme.json&quot;
    deploy:
      labels:
        # Dashboard
        - &quot;traefik.enable=true&quot;
        # Change the host url here
        - &quot;traefik.http.routers.traefik.rule=Host(`traefik.example.com`)&quot;
        - &quot;traefik.http.routers.traefik.service=api@internal&quot;
        - &quot;traefik.http.services.traefik.loadbalancer.server.port=8080&quot;
        - &quot;traefik.http.routers.traefik.tls.certresolver=leresolver&quot;
        - &quot;traefik.http.routers.traefik.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.traefik.middlewares=authtraefik&quot;
        # Change the auth password here
        - &quot;traefik.http.middlewares.authtraefik.basicauth.users=admin:yournewpassword&quot; # user/password

        # global redirect to https
        - &quot;traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)&quot;
        - &quot;traefik.http.routers.http-catchall.entrypoints=web&quot;
        - &quot;traefik.http.routers.http-catchall.middlewares=redirect-to-https&quot;

        # middleware redirect
        - &quot;traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https&quot;

  my-app:
    image: containous/whoami:v1.3.0
    networks:
      - traefik-public
    command:
      - --port=8082 # Our service listens on 8082
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        # Change the host url here
        - &quot;traefik.http.routers.my-app.rule=Host(`whoami.example.com`)&quot;
        - &quot;traefik.http.services.my-app.loadbalancer.server.port=8082&quot;
        - &quot;traefik.http.routers.my-app.middlewares=auth&quot;
        - &quot;traefik.http.routers.my-app.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.my-app.tls=true&quot;
        - &quot;traefik.http.routers.my-app.tls.certresolver=leresolver&quot;
        # Change the password here
        - &quot;traefik.http.middlewares.auth.basicauth.users=admin:changeme&quot; # user/password

networks:
  traefik-public:
    external: true
</code></pre>
<h2>Portainer</h2>
<p>Portainer is our container management software. We will use to deploy our docker containers.</p>
<pre><code class="language-yml">version: &quot;3.2&quot;

services:
  agent:
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - traefik-public
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # make sure the folder is available
      - /mnt/volume2/portainer:/data
    networks:
      - traefik-public
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        # change the host here
        - &quot;traefik.http.routers.portainer.rule=Host(`admin.example.com`)&quot;
        - &quot;traefik.http.services.portainer.loadbalancer.server.port=9000&quot;
        - &quot;traefik.http.routers.portainer.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.portainer.tls=true&quot;
        - &quot;traefik.http.routers.portainer.tls.certresolver=leresolver&quot;
      mode: replicated
      placement:
        constraints: [node.role == manager]

networks:
  traefik-public:
    external: true
</code></pre>]]></content:encoded>
          </item><item>
          <title>Setting up Ubuntu Server with docker in Hetzner</title>
          <link>https://blog.antosubash.com/posts/part-1-setup-docker-with-ubuntu-server-in-hetzner</link>
          <guid>https://blog.antosubash.com/posts/part-1-setup-docker-with-ubuntu-server-in-hetzner</guid>
          <pubDate>Sun, 19 Jun 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to create a ubuntu server for docker deployment.</description>
          <content:encoded><![CDATA[<h2>Posts in the Series</h2>
<p>Part 1. Setting up Ubuntu Server with docker in Hetzner (this post)</p>
<p><a href="/posts/part-2-setup-docker-swarm-with-traefik-and-portainer">Part 2. Setting up docker swarm with traefik and portainer</a></p>
<p><a href="/posts/part-3-deploy-registry-redis-rabitmq-postgresql-in-docker">Part 3. Deploy redis, rabbitmq, seq, registry and postgres in docker swarm</a></p>
<p><a href="/posts/part-4-prepare-and-deploy-microservice-in-docker">Part 4. Deploy the microservice in docker swarm</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to setup a ubuntu server for our docker deployment.</p>
<h2>Prerequisites</h2>
<ul>
<li>Hetzner cloud account</li>
</ul>
<p>you can use the referral link here and get 20 Euro to play around. https://hetzner.cloud/?ref=ENhA4rCZ5JUM</p>
<h2>Creating ssh key</h2>
<p>we will use ssh key to login to the server. so lets first create a ssh key.</p>
<pre><code class="language-bash">ssh-keygen -t ed25519 -C &quot;demo@antosubash.com&quot;
</code></pre>
<p>this command will create a ssh key.</p>
<h2>Create ubuntu machine with docker</h2>
<p>For this we will the hetzner apps. Hetzner provides machine with docker CE. this will save us some time.</p>
<h3>Add ssh key to hetzner project</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner1.png" alt="Add ssh to your hetzner project"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner2.png" alt="Add ssh to your hetzner project"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner3.png" alt="Add ssh to your hetzner project"/></p>
<h3>Create server</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner4.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner5.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner6.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner7.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner8.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner9.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner10.png" alt="Create Server"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner11.png" alt="Create Server"/></p>
<h3>Create the firewall for the server</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner12.png" alt="Create firewall"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner13.png" alt="Create firewall"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner14.png" alt="Create firewall"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner15.png" alt="Create firewall"/></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner16.png" alt="Create firewall"/></p>
<h3>IP address of our machine</h3>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/docker-deployment/hetzner17.png" alt="IP address"/></p>
<h2>Add DNS entry</h2>
<p>Now you have to add a DNS entry for your newly created machine. you can fine the the IP address of the machine in the Hetzner server page.</p>
<p>We need to add <code>A</code> record and a <code>CNAME</code> record.</p>
<pre><code class="language-bash">A XX.XX.XX.XX yourdomain.com
CNAME * yourdomain.com
</code></pre>
<p>For example this is how my sample entry looks like</p>
<p>Record      Host        Value
A           youtube1    95.217.191.119
CNAME       *           youtube1.antosubash.com</p>
<p>This might take some time to reflect so wait for a while to verify it.</p>
<h2>Verify DNS entry</h2>
<p>To verify dns entry we will use a tool called dig.</p>
<p>you can find it here https://toolbox.googleapps.com/apps/dig/#A</p>
<p>Make sure your domain is pointing to your ip and your subdomain is pointing to your domain</p>
<p>yourdomain.com -&gt; XX.XX.XX.XX
subdomain.yourdomain.com -&gt; XX.XX.XX.XX</p>
<p>So both your domain and subdomain should point to the same IP Which is the IP of the machine we just created.</p>
<h2>Update ssh config</h2>
<p>ssh config file can be &quot;~/.ssh/config&quot;</p>
<p>In the config file add a entry for the newly created server.</p>
<pre><code class="language-bash">Host youtube1.yourdomain.com
   IdentitiesOnly yes
   IdentityFile ~/.ssh/yournewlycreatedkey # Not the pub file
</code></pre>]]></content:encoded>
          </item><item>
          <title>Blazor state management with Fluxor</title>
          <link>https://blog.antosubash.com/posts/state-management-blazor-fluxor</link>
          <guid>https://blog.antosubash.com/posts/state-management-blazor-fluxor</guid>
          <pubDate>Wed, 01 Jun 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to setup fluxor in Blazor Wasm App</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>What is Fluxor</h2>
<p>Fluxor is a zero boilerplate Flux/Redux library for .Net. The aim of Fluxor is to create a multi-UI, single-state store approach to front-end development without the headaches typically associated with other implementations, such as the overwhelming amount of boiler-plate code required just to add a very basic feature.
Repo: https://github.com/mrpmorris/Fluxor
Docs: https://github.com/mrpmorris/Fluxor/blob/master/Docs/README.md</p>
<h2>When to use Fluxor</h2>
<p>Fluxor uses Flux/Redux approach. It helps you to manage your app’s state in a single place and keep changes in your app more predictable and traceable. It makes it easier to manage the state. But all of these benefits come with tradeoffs and constraints. One might feel it adds up boilerplate code, making simple things a little overwhelming; but that depends upon the architecture decisions. If you are wondering if you need state management or not then you don&#x27;t need it. When your app grows to the scale where managing app state becomes a hassle; and you start looking out for making it easy and simple. That is where you will find Fluxor helpful.</p>
<h2>Creating Blazor Wasm project</h2>
<pre><code class="language-bash">dotnet new blazorwasm -n FluxorWithBlazor
</code></pre>
<p>This will create a blazor wasm app.</p>
<h2>Install Fluxor Packages</h2>
<p>Install Nuget packages</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Fluxor&quot; Version=&quot;5.4.0&quot; /&gt;
&lt;PackageReference Include=&quot;Fluxor.Blazor.Web&quot; Version=&quot;5.4.0&quot; /&gt;
&lt;PackageReference Include=&quot;Fluxor.Blazor.Web.ReduxDevTools&quot; Version=&quot;5.4.0&quot; /&gt;
</code></pre>
<p>Update the <code>Program.cs</code></p>
<pre><code class="language-cs">using Fluxor;

builder.Services.AddFluxor(o =&gt;
{
    o.ScanAssemblies(typeof(Program).Assembly);
    o.UseReduxDevTools(rdt =&gt;
      {
          rdt.Name = &quot;My application&quot;;
      });
});
</code></pre>
<p>Update the <code>App.razor</code></p>
<pre><code class="language-xml">&lt;Fluxor.Blazor.Web.StoreInitializer /&gt;
</code></pre>
<p>Now we are ready to create state in our Blazor application.</p>
<h2>Fluxor Rules</h2>
<ul>
<li>State should always be read-only.</li>
<li>To alter state our app should dispatch an action.</li>
<li>Every reducer that processes the dispatched action type will create new state to reflect the old state combined with the changes expected for the action.</li>
<li>The UI then uses the new state to render its display.</li>
</ul>
<h2>Core Concepts (State, Actions, and Reducers)</h2>
<h3>State</h3>
<p>Imagine your app’s state is described as a plain object. For example, the state of a counter app might look like this:</p>
<pre><code class="language-cs">[FeatureState]
public class CounterState
{
  public int ClickCount { get; }

  public CounterState(int clickCount)
  {
    ClickCount = clickCount;
  }
}
</code></pre>
<p>This object is like a “model” except that there are no setters. This is so that different parts of the code can’t change the state arbitrarily, causing hard-to-reproduce bugs. To change something in the state, you need to dispatch an action.</p>
<h3>Action</h3>
<p>An action is a plain c# object (notice how we don’t introduce any magic?) that describes what happened. Here are a few example actions:</p>
<pre><code class="language-cs">public class IncrementCounterAction
{
}
</code></pre>
<p>Enforcing that every change is described as an action lets us have a clear understanding of what’s going on in the app. If something changed, we know why it changed. Actions are like breadcrumbs of what has happened.</p>
<h3>Reducers</h3>
<p>Finally, to tie state and actions together, we write a function called a reducer. Again, nothing magical about it—it’s just a function that takes state and action as arguments, and returns the next state of the app. It would be hard to write such a function for a big app, so we write smaller functions managing parts of the state:</p>
<pre><code class="language-cs">public static class Reducers
{
    [ReducerMethod]
    public static CounterState ReduceIncrementCounterAction(CounterState state, IncrementCounterAction action) =&gt;
        new(clickCount: state.ClickCount + 1);
}
</code></pre>
<h2>Using the State</h2>
<p>To use the state management we will update the <code>counter</code> page which comes with the default app.</p>
<pre><code class="language-html">@page &quot;/counter&quot;
@using FluxorWithBlazor.State.Counter
@inject IDispatcher dispatcher
@inject IState&lt;CounterState&gt; counterState
&lt;PageTitle&gt;Counter&lt;/PageTitle&gt;

&lt;h1&gt;Counter&lt;/h1&gt;

&lt;p role=&quot;status&quot;&gt;Current count: @counterState.Value.ClickCount&lt;/p&gt;

&lt;button class=&quot;btn btn-primary&quot; @onclick=&quot;IncrementCount&quot;&gt;Click me&lt;/button&gt;

@code {
    private void IncrementCount()
    {
        dispatcher.Dispatch(new IncrementCounterAction());
    }
}
</code></pre>
<p>In the <code>IncrementCount</code> method we are dispatching an action and the current count is displayed buy injecting the state.</p>
<h2>Effects</h2>
<p>Flux state is supposed to be immutable, and that state replaced only by pure functions, which should only take input from their parameters. With this in mind, we need something that will enable us to access other sources of data such as web services, and then reduce the results into our state. That is where the effects comes in. Effect handlers cannot (and should not) affect state directly. They are triggered when the action they are interested in is dispatched through the store, and as a response they can dispatch new actions.</p>
<h2>Fetch data with effects</h2>
<p>We will update the fetch data sample provided in the default blazor application with Effects.</p>
<h3>Fetch data action</h3>
<p>Lets create a action which will initiate the action. this will the be a empty action which will be used to trigger the effect.</p>
<pre><code class="language-cs">public class FetchDataAction
{
}
</code></pre>
<h3>Fetch data result action</h3>
<p>Once the data is received from the server we need a action to update the state. we will use the ´FetchDataResultAction´ for that. It will have a the list of Weather forecast available.</p>
<pre><code class="language-cs">public class FetchDataResultAction
{
    public IEnumerable&lt;WeatherForecast&gt; Forecasts { get; }

    public FetchDataResultAction(IEnumerable&lt;WeatherForecast&gt; forecasts)
    {
        Forecasts = forecasts;
    }
}
</code></pre>
<h2>Weather state</h2>
<p>Weather state will the two property ´Forecasts´ and ´IsLoading´.</p>
<pre><code class="language-cs">[FeatureState]
public class WeatherState
{
  public bool IsLoading { get; }
  public IEnumerable&lt;WeatherForecast&gt; Forecasts { get; }

  private WeatherState() { }
  public WeatherState(bool isLoading, IEnumerable&lt;WeatherForecast&gt; forecasts)
  {
    IsLoading = isLoading;
    Forecasts = forecasts ?? Array.Empty&lt;WeatherForecast&gt;();
  }
}
</code></pre>
<h2>Weather Reducers</h2>
<p>In the reducer we need to manage 2 action which are created by us. One is to trigger the data fetch and the next one is to handle the data result.</p>
<pre><code class="language-cs">public static class Reducers
{
  [ReducerMethod]
  public static WeatherState ReduceFetchDataAction(WeatherState state, FetchDataAction action) =&gt;
    new(isLoading: true, forecasts: null);

  [ReducerMethod]
  public static WeatherState ReduceFetchDataResultAction(WeatherState state, FetchDataResultAction action) =&gt;
    new(isLoading: false, forecasts: action.Forecasts);
}
</code></pre>
<h2>Weather effects</h2>
<p>Effects is where we will make our ´http´ call. We will inject the ´HttpClient´ and use that in the effect method. once the call is successful we will dispatch an action with the data result.</p>
<pre><code class="language-cs">public class Effects
{
    private readonly HttpClient Http;

    public Effects(HttpClient http)
    {
        Http = http;
    }

    [EffectMethod]
    public async Task HandleFetchDataAction(FetchDataAction action, IDispatcher dispatcher)
    {
        var forecasts = await Http.GetFromJsonAsync&lt;WeatherForecast[]&gt;(&quot;sample-data/weather.json&quot;);
        if(forecasts is not null)
        {
            dispatcher.Dispatch(new FetchDataResultAction(forecasts: forecasts!));
        }
    }
}
</code></pre>
<h3>Update the fetch data page</h3>
<p>We need to update the fetch data page to use the weather state.</p>
<pre><code class="language-html">@page &quot;/fetchdata&quot;
@inject IDispatcher dispatcher
@inject IState&lt;WeatherState&gt; weather
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
&lt;PageTitle&gt;Weather forecast&lt;/PageTitle&gt;

&lt;h1&gt;Weather forecast&lt;/h1&gt;

&lt;p&gt;This component demonstrates fetching data from the server.&lt;/p&gt;

@if (weather.Value.IsLoading)
{
	&lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else
{
	&lt;table class=&quot;table&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th&gt;Date&lt;/th&gt;
				&lt;th&gt;Temp. (C)&lt;/th&gt;
				&lt;th&gt;Temp. (F)&lt;/th&gt;
				&lt;th&gt;Summary&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			@foreach (var forecast in weather.Value.Forecasts)
			{
			&lt;tr&gt;
				&lt;td&gt;@forecast.Date.ToShortDateString()&lt;/td&gt;
				&lt;td&gt;@forecast.TemperatureC&lt;/td&gt;
				&lt;td&gt;@forecast.TemperatureF&lt;/td&gt;
				&lt;td&gt;@forecast.Summary&lt;/td&gt;
			&lt;/tr&gt;
			}
		&lt;/tbody&gt;
	&lt;/table&gt;
}

@code {

	protected override void OnInitialized()
	{
		base.OnInitialized();
		dispatcher.Dispatch(new FetchDataAction());
	}
}
</code></pre>
<p>Repo : https://github.com/antosubash/blazor-state-management-with-fluxor</p>]]></content:encoded>
          </item><item>
          <title>.NET Microservice with ABP - Full Series</title>
          <link>https://blog.antosubash.com/posts/abp-microservice-series</link>
          <guid>https://blog.antosubash.com/posts/abp-microservice-series</guid>
          <pubDate>Sat, 23 Apr 2022 00:00:00 GMT</pubDate>
          <description>This post contains all the parts of the microservice development with ABP</description>
          <content:encoded><![CDATA[<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>This post consolidates all the parts of the microservice development in the single place.</p>
<h2>What is ABP?</h2>
<p>ABP framework is a complete infrastructure to create modern web applications by following the best practices and conventions of software development. ABP offers a complete, modular and layered software architecture based on Domain Driven Design principles and patterns. There are a lot of features provided by the ABP Framework to achieve real world scenarios easier, like Event Bus, Background Job System, Audit Logging, BLOB Storing, Data Seeding, Data Filtering, etc. ABP also simplifies (and even automates wherever possible) cross cutting concerns and common non-functional requirements like Exception Handling, Validation, Authorization, Localization, Caching, Dependency Injection, Setting Management, etc.</p>
<p>You can find more info here: https://github.com/abpframework/abp</p>
<p>You can find the documentation here: https://docs.abp.io/en/abp/latest</p>
<p>Here is the <a href="https://docs.abp.io/en/abp/latest/Tutorials/Todo/Index?UI=MVC&amp;DB=EF">Quick Start Guide</a></p>
<h2>Why Microservice with ABP?</h2>
<p>One of the major goals of the ABP framework is to provide a convenient infrastructure to create microservice solutions. To make this possible,</p>
<ul>
<li>Provides a module system that allows you to split your application into modules where each module may have its own database, entities, services, APIs, UI components/pages... etc.</li>
<li>Offers an architectural model to develop your modules to be compatible to microservice development and deployment.</li>
<li>Provides best practices guide to develop your module standards-compliance.</li>
<li>Provides base infrastructure to implement Domain Driven Design in your microservice.</li>
<li>Provide services to automatically create REST-style APIs from your application services.</li>
<li>Provide services to automatically create C# API clients that makes easy to consume your services from another service/application.</li>
<li>Provides a distributed event bus to communicate your services.</li>
</ul>
<h2>Purpose</h2>
<p>By default when you create a ABP application it will be a monolith. There is no definitive guide on how to create a microservice application with all the modules. The purpose of this blog series is to have a base solution of the ABP running as a microservice application. We will have a SaaS service for Tenant Management and Identity Service for Identity and IdentityServer and Admin Service for features, permissions, settings and audit logs. this will be a great base solution for your microservice and you will see how to setup the microservice from the scratch.</p>
<h2>Template</h2>
<p>I have created a template for creating a microservice application based on this series. You can find the template here: https://github.com/antosubash/AbpMicroservice. You can use this template to create your microservice application.</p>]]></content:encoded>
          </item><item>
          <title>Logging with Seq</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-add-central-logging-part-12</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-add-central-logging-part-12</guid>
          <pubDate>Wed, 13 Apr 2022 00:00:00 GMT</pubDate>
          <description>In this post, we will see how to add centralized logging to our microservice application</description>
          <content:encoded><![CDATA[<p>This is the part 12 of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p>Part 12. Central Logging (this post)</p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>This is the Part 12 of the Microservice with ABP series. In this post, we will see how to add centralized logging to our microservice application</p>
<h2>What is Seq?</h2>
<p>Seq is the intelligent search, analysis, and alerting server built specifically for modern structured log data. Seq creates the visibility you need to quickly identify and diagnose problems in complex applications and microservices.</p>
<h2>Why use Seq?</h2>
<p>Application logs are the most useful data available for detecting and solving a wide range of production issues and outages. Seq makes it easier to pinpoint the events and patterns in application behavior that show your system is working correctly — or why it isn&#x27;t.</p>
<p>More info here : https://docs.datalust.co/docs/using-serilog</p>
<h2>Purpose</h2>
<p>In our microservice application, there are four services and one Identity server, and one gateway. This count will keep growing. We use serilog to log the data. But the logs are only available inside the application. This creates a problem. To solve this problem we will use seq. Seq will store all the logs in a central location so that it will make it easy for us to view the application logs and analyze them.</p>
<h2>Pricing</h2>
<p>Seq is free if you run Seq on your developer workstation, or in production if you&#x27;re going solo. what does this mean? it means that if you are using only one user account then it is free.</p>
<h2>Setup the shared project</h2>
<p>Since the logging has to be applied in all the projects we can create the configuration in the shared project and apply it to all the services.</p>
<h3>Install the shared project</h3>
<p>Install the Seq sinks for the serilog</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Serilog.Sinks.Seq&quot; Version=&quot;5.1.1&quot; /&gt;
&lt;PackageReference Include=&quot;Serilog.Settings.Configuration&quot; Version=&quot;3.3.0&quot; /&gt;
</code></pre>
<h3>Create a serilog config helper</h3>
<pre><code class="language-cs">public static class SerilogConfigurationHelper
{
    public static void Configure(string applicationName)
    {
        var configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile(&quot;appsettings.json&quot;)
            .AddEnvironmentVariables()
            .Build();

        Log.Logger = new LoggerConfiguration()
            .ReadFrom.Configuration(configuration)
#if DEBUG
            .MinimumLevel.Debug()
#else
                .MinimumLevel.Information()
#endif
            .MinimumLevel.Override(&quot;Microsoft&quot;, LogEventLevel.Information)
            .MinimumLevel.Override(&quot;Microsoft.EntityFrameworkCore&quot;, LogEventLevel.Warning)
            .Enrich.FromLogContext()
            .Enrich.WithProperty(&quot;Application&quot;, $&quot;{applicationName}&quot;)
            .WriteTo.Async(c =&gt; c.File(&quot;Logs/logs.txt&quot;))
            .WriteTo.Async(c =&gt; c.Console())
            .CreateLogger();
    }
}
</code></pre>
<p>This Seirlog helper will replace all the other log configurations.</p>
<h3>Add Serilog appsettings</h3>
<pre><code class="language-json">&quot;Serilog&quot;: {
    &quot;WriteTo&quot;: [
        { &quot;Name&quot;: &quot;Seq&quot;, &quot;Args&quot;: { &quot;serverUrl&quot;: &quot;http://localhost:5341&quot; } }
    ]
}
</code></pre>
<p>Server url points to location where the seq is hosted. In the above example it is pointed to the localhost instance of the seq.</p>
<h2>Update services</h2>
<p>Logger configuration are preset in the <code>Program.cs</code> file in the services. we need to update the <code>Program.cs</code> file in the with the new log config.</p>
<pre><code class="language-cs">var assemblyName = typeof(Program).Assembly.GetName().Name;
SerilogConfigurationHelper.Configure(assemblyName);
</code></pre>
<p>We are going to read the assembly name and send it to configure the logging. this is useful for separating the logs based on the services.</p>
<h2>Check the logs</h2>
<p>Once all the services are updated run the services and you will be able to see the logs in the seq admin app.</p>
<p>Repo: https://github.com/antosubash/Tasky</p>]]></content:encoded>
          </item><item>
          <title>Add New Service</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-add-new-service-part-11</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-add-new-service-part-11</guid>
          <pubDate>Thu, 07 Apr 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to add docker support and create a CI/CD with github actions</description>
          <content:encoded><![CDATA[<p>This is the part 11 of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p>Part 11. Add a New service (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post, we will add a new service to our microservice application.</p>
<h2>Create service script</h2>
<pre><code class="language-bash">$serviceNameInput = $args[0]

$solution = Get-ChildItem *.sln | Select-Object -First 1 | Get-ItemProperty -Name Name
$name = (Get-Item $solution.PSPath).Basename
$pascalCase = $serviceNameInput -replace &#x27;(?:^|_)(\p{L})&#x27;, { $_.Groups[1].Value.ToUpper() }
$service = $pascalCase + &quot;Service&quot;
$folder = $serviceNameInput.ToLower()

abp new &quot;$name.$service&quot; -t module --no-ui -o services\$folder
Remove-Item -Recurse -Force (Get-ChildItem -Path &quot;services\$folder&quot; -Recurse -Include *.IdentityServer)
Remove-Item -Recurse -Force (Get-ChildItem -Path &quot;services\$folder&quot; -Recurse -Include *.MongoDB.Tests)
Remove-Item -Recurse -Force (Get-ChildItem -Path &quot;services\$folder&quot; -Recurse -Include *.MongoDB)
Remove-Item -Recurse -Force (Get-ChildItem -Path &quot;services\$folder&quot; -Recurse -Include *.Host.Shared)
Remove-Item -Recurse -Force (Get-ChildItem -Path &quot;services\$folder&quot; -Recurse -Include *.Installer)
dotnet sln &quot;.\$name.sln&quot; add (Get-ChildItem -Path &quot;services\$folder&quot; -Recurse -Include *.csproj)
</code></pre>
<h2>Run the script</h2>
<p>Please make sure to run this command in the root of your project where the solution file is located.</p>
<pre><code class="language-bash">.\newservice.ps1 project
</code></pre>
<p>This script will create a new service and do some cleanup and add the project to solution.</p>
<h2>Create shared hosting for Microservice</h2>
<pre><code class="language-bash">dotnet new classlib -n Tasky.Microservice.Shared -o shared\Tasky.Microservice.Shared
</code></pre>
<p>We are creating this project as a shared project for all the new microservice.</p>
<p>Add the reference to <code>AdministrationService</code> and <code>SaaSService</code></p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
  &lt;ProjectReference Include=&quot;..\..\services\administration\src\Tasky.AdministrationService.EntityFrameworkCore\Tasky.AdministrationService.EntityFrameworkCore.csproj&quot; /&gt;
  &lt;ProjectReference Include=&quot;..\..\services\saas\src\Tasky.SaaSService.EntityFrameworkCore\Tasky.SaaSService.EntityFrameworkCore.csproj&quot; /&gt;
  &lt;ProjectReference Include=&quot;..\Tasky.Shared.Hosting\Tasky.Shared.Hosting.csproj&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>Create the <code>TaskyMicroserviceHosting</code> module</p>
<pre><code class="language-cs">[DependsOn(
    typeof(TaskyHostingModule),
    typeof(AdministrationServiceEntityFrameworkCoreModule),
    typeof(SaaSServiceEntityFrameworkCoreModule)
)]
public class TaskyMicroserviceHosting : AbpModule
{

}
</code></pre>
<p>Now we have the shared project we can use for all the new microservice</p>
<h2>Prepare the host project</h2>
<p>Add the reference the of the Shared microservice project</p>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;..\..\..\..\shared\Tasky.Shared.Microservice.Hosting\Tasky.Shared.Microservice.Hosting.csproj&quot; /&gt;
</code></pre>
<p>Update the <code>DependsOn</code> in the host project</p>
<pre><code class="language-cs">[DependsOn(
    typeof(TaskyMicroserviceHosting),
    typeof(ProjectServiceApplicationModule),
    typeof(ProjectServiceEntityFrameworkCoreModule),
    typeof(ProjectServiceHttpApiModule)
    )]
</code></pre>
<p>Update the host port to <code>7004</code></p>
<p>Update the <code>appsettings.json</code></p>
<pre><code class="language-json">{
  &quot;App&quot;: {
    &quot;CorsOrigins&quot;: &quot;http://localhost:4200&quot;
  },
  &quot;ConnectionStrings&quot;: {
    &quot;ProjectService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;,
    &quot;SaaSService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;,
    &quot;AdministrationService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
  },
  &quot;Redis&quot;: {
    &quot;Configuration&quot;: &quot;127.0.0.1&quot;
  },
  &quot;AuthServer&quot;: {
    &quot;Authority&quot;: &quot;https://localhost:7000/&quot;,
    &quot;RequireHttpsMetadata&quot;: &quot;false&quot;,
    &quot;SwaggerClientId&quot;: &quot;ProjectService_Swagger&quot;,
    &quot;SwaggerClientSecret&quot;: &quot;1q2w3e*&quot;
  },
  &quot;RabbitMQ&quot;: {
    &quot;Connections&quot;: {
      &quot;Default&quot;: {
        &quot;HostName&quot;: &quot;localhost&quot;
      }
    },
    &quot;EventBus&quot;: {
      &quot;ClientName&quot;: &quot;Tasky_ProjectService&quot;,
      &quot;ExchangeName&quot;: &quot;Tasky&quot;
    }
  }
}
</code></pre>
<h2>Update the EF core project</h2>
<p>create a <code>ProjectServiceDbContextFactory</code> in the EF core project</p>
<pre><code class="language-cs">public class ProjectServiceDbContextFactory : IDesignTimeDbContextFactory&lt;ProjectServiceDbContext&gt;
{
    public ProjectServiceDbContext CreateDbContext(string[] args)
    {
        var configuration = BuildConfiguration();

        var builder = new DbContextOptionsBuilder&lt;ProjectServiceDbContext&gt;()
            .UseNpgsql(GetConnectionStringFromConfiguration());

        return new ProjectServiceDbContext(builder.Options);
    }

    private static string GetConnectionStringFromConfiguration()
    {
        return BuildConfiguration()
            .GetConnectionString(ProjectServiceDbProperties.ConnectionStringName);
    }

    private static IConfigurationRoot BuildConfiguration()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(
                Path.Combine(
                    Directory.GetParent(Directory.GetCurrentDirectory())?.Parent!.FullName!,
                    $&quot;host{Path.DirectorySeparatorChar}Tasky.ProjectService.HttpApi.Host&quot;
                )
            )
            .AddJsonFile(&quot;appsettings.json&quot;, false);

        return builder.Build();
    }
}
</code></pre>
<h2>Create a project API</h2>
<p>Create the project entity</p>
<pre><code class="language-cs">public class Project : AggregateRoot&lt;Guid&gt;, IMultiTenant
{
    public string Name { get; set; }

    public Guid? TenantId { get; set; }

    public Project(string name)
    {
        Name = name;
    }
}
</code></pre>
<p>Add <code>Projects</code> to the <code>DbContext</code></p>
<pre><code class="language-cs">public DbSet&lt;Project&gt; Projects { get; set; }
</code></pre>
<p>Update the <code>ProjectServiceDbContextModelCreatingExtensions</code> in the <code>ConfigureProjectService</code> method</p>
<pre><code class="language-cs">builder.Entity&lt;Project&gt;(b =&gt;
{
    //Configure table &amp; schema name
    b.ToTable(ProjectServiceDbProperties.DbTablePrefix + &quot;Projects&quot;, ProjectServiceDbProperties.DbSchema);

    b.ConfigureByConvention();
});
</code></pre>
<p>Update the <code>ProjectServiceEntityFrameworkCoreModule</code> in the <code>AddAbpDbContext</code></p>
<pre><code class="language-cs">context.Services.AddAbpDbContext&lt;ProjectServiceDbContext&gt;(options =&gt;
{
    options.AddDefaultRepositories(true);
});
</code></pre>
<h2>Prepare for the migration</h2>
<p>Add the ef core design nuget for the migrations.</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;6.0.1&quot;&gt;
    &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
    &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers&lt;/IncludeAssets&gt;
&lt;/PackageReference&gt;
</code></pre>
<p>Once this is created delete <code>EntityFrameworkCore</code> folder can be created from the host project.</p>
<h2>Migration</h2>
<p>To create migrations</p>
<p><code>dotnet ef migrations add Init</code></p>
<p>To update database</p>
<p><code>dotnet ef database update</code></p>
<h2>Create feature definition in contracts</h2>
<p>Add the Feature package</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Volo.Abp.Features&quot; Version=&quot;5.2.0&quot; /&gt;
</code></pre>
<p>Create <code>ProjectServiceFeatures</code> for the constants</p>
<pre><code class="language-cs">public class ProjectServiceFeatures
{
    public const string GroupName = &quot;ProjectService&quot;;

    public static class Project
    {
        public const string Default = GroupName + &quot;.Project&quot;;
    }
}
</code></pre>
<p>Create <code>ProjectServiceFeaturesDefinitionProvider</code> for creating permissions</p>
<pre><code class="language-cs">public class ProjectServiceFeaturesDefinitionProvider : FeatureDefinitionProvider
{
    public override void Define(IFeatureDefinitionContext context)
    {
        var myGroup = context.AddGroup(ProjectServiceFeatures.GroupName);
        myGroup.AddFeature(
            ProjectServiceFeatures.Project.Default, 
            defaultValue: &quot;false&quot;,            
            displayName: L(&quot;Project&quot;),
            valueType: new ToggleStringValueType());
    }

    private static LocalizableString L(string name)
    {
        return LocalizableString.Create&lt;ProjectServiceResource&gt;(name);
    }
}
</code></pre>
<h2>Create permission</h2>
<p>Create <code>ProjectServicePermissions</code> file</p>
<pre><code class="language-cs">public const string GroupName = &quot;ProjectService&quot;;

public static class Project
{
    public const string Default = GroupName + &quot;.Project&quot;;
    public const string Create = Default + &quot;.Create&quot;;
}
</code></pre>
<p>Create <code>ProjectServicePermissionDefinitionProvider</code> file</p>
<pre><code class="language-cs">public class ProjectServicePermissionDefinitionProvider : PermissionDefinitionProvider
{
    public override void Define(IPermissionDefinitionContext context)
    {
        var projectGroup = context.AddGroup(ProjectServicePermissions.GroupName, L(&quot;Permission:ProjectService&quot;));
        var projectPermission = projectGroup.AddPermission(ProjectServicePermissions.Project.Default, L(&quot;Permission:ProjectService:Default&quot;));
        projectPermission.AddChild(ProjectServicePermissions.Project.Create);

    }

    private static LocalizableString L(string name)
    {
        return LocalizableString.Create&lt;ProjectServiceResource&gt;(name);
    }
}
</code></pre>
<h2>Create AppService Contract</h2>
<p>Create <code>ProjectDto</code> file</p>
<pre><code class="language-cs">public class ProjectDto : EntityDto&lt;Guid&gt;
{
    public string Name { get; set; }
}
</code></pre>
<p>Create <code>IProjectAppService</code> file</p>
<pre><code class="language-cs">public interface IProjectAppService : IApplicationService
{
    Task&lt;List&lt;ProjectDto&gt;&gt; GetAllAsync();

    Task&lt;ProjectDto&gt; Create(ProjectDto projectDto);
}
</code></pre>
<h2>Create AppService in the Application</h2>
<p>Create <code>ProjectAppService</code> file</p>
<pre><code class="language-cs">[RequiresFeature(ProjectServiceFeatures.Project.Default)]
[Authorize(ProjectServicePermissions.Project.Default)]
public class ProjectAppService : ProjectServiceAppService, IProjectAppService
{
    private readonly IRepository&lt;Project, Guid&gt; repository;

    public ProjectAppService(IRepository&lt;Project, Guid&gt; repository)
    {
        this.repository = repository;
    }

    [Authorize(ProjectServicePermissions.Project.Default)]    
    public async Task&lt;List&lt;ProjectDto&gt;&gt; GetAllAsync()
    {
        var projects = await repository.GetListAsync();
        return ObjectMapper.Map&lt;List&lt;Project&gt;,List&lt;ProjectDto&gt;&gt;(projects);
    }

    [Authorize(ProjectServicePermissions.Project.Create)]
    public async Task&lt;ProjectDto&gt; Create(ProjectDto projectDto)
    {
        var project = await repository.InsertAsync(new Project(projectDto.Name));
        return new ProjectDto
        {
            Name = project.Name
        };
    }
}
</code></pre>
<h2>Create a Controller</h2>
<pre><code class="language-cs">[Area(ProjectServiceRemoteServiceConsts.ModuleName)]
[RemoteService(Name = ProjectServiceRemoteServiceConsts.RemoteServiceName)]
[Route(&quot;api/project&quot;)]
public class ProjectController : ProjectServiceController, IProjectAppService
{
    private readonly IProjectAppService _projectService;

    public ProjectController(IProjectAppService sampleAppService)
    {
        _projectService = sampleAppService;
    }

    [HttpGet]
    public async Task&lt;List&lt;ProjectDto&gt;&gt; GetAllAsync()
    {
        return await _projectService.GetAllAsync();
    }

    
    [HttpPost]    
    public async Task&lt;ProjectDto&gt; Create(ProjectDto projectDto)
    {
        return await _projectService.Create(projectDto);
    }
}
</code></pre>
<h2>Update the DbMigrator project</h2>
<p>Add the project reference for the new service</p>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;..\..\services\project\src\Tasky.ProjectService.Application.Contracts\Tasky.ProjectService.Application.Contracts.csproj&quot; /&gt;
&lt;ProjectReference Include=&quot;..\..\services\project\src\Tasky.ProjectService.EntityFrameworkCore\Tasky.ProjectService.EntityFrameworkCore.csproj&quot; /&gt;
</code></pre>
<p>Update the dependency</p>
<pre><code class="language-cs">typeof(ProjectServiceEntityFrameworkCoreModule),
typeof(ProjectServiceApplicationContractsModule)
</code></pre>
<p>Update the <code>MigrateAllDatabasesAsync</code> function in the  <code>TaskyDbMigrationService</code> file</p>
<pre><code class="language-cs">await MigrateDatabaseAsync&lt;ProjectServiceDbContext&gt;(cancellationToken);
</code></pre>
<p>Update the <code>appsettings.json</code></p>
<pre><code class="language-json">{
  &quot;ConnectionStrings&quot;: {
    &quot;SaaSService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;,
    &quot;IdentityService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;,
    &quot;AdministrationService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;,
    &quot;ProjectService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyProjectService;Pooling=false;&quot;
  },
  &quot;ApiScope&quot;: [
    &quot;AuthServer&quot;,
    &quot;SaaSService&quot;,
    &quot;IdentityService&quot;,
    &quot;AdministrationService&quot;,
    &quot;ProjectService&quot;
  ],
  &quot;ApiResource&quot;: [
    &quot;AuthServer&quot;,
    &quot;SaaSService&quot;,
    &quot;IdentityService&quot;,
    &quot;AdministrationService&quot;,
    &quot;ProjectService&quot;
  ],
  &quot;Clients&quot;: [
    {
      &quot;ClientId&quot;: &quot;Tasky_Web&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:5000&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;,
        &quot;ProjectService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;hybrid&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:5000/signin-oidc&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:5000/signout-callback-oidc&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:5000&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;Tasky_App&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;http://localhost:4200&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;AuthServer&quot;,
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;,
        &quot;ProjectService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;http://localhost:4200&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;http://localhost:4200&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;http://localhost:4200&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;AdministrationService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7001&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;,
        &quot;ProjectService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7001/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7001/signout-callback-oidc&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7001&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;IdentityService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7002&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;,
        &quot;ProjectService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7002/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7002&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7002&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;SaaSService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7003&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;,
        &quot;ProjectService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7003/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7003&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7003&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;ProjectService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7004&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;,
        &quot;ProjectService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7004/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7004&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7004&quot;
      ]
    }
  ]
}
</code></pre>
<h2>Prepare the Administration service</h2>
<p>Add reference to the <code>ProjectService.Application.Contracts</code> project.</p>
<pre><code class="language-cs">&lt;ProjectReference Include=&quot;..\..\..\project\src\Tasky.ProjectService.Application.Contracts\Tasky.ProjectService.Application.Contracts.csproj&quot; /&gt;
</code></pre>
<p>Update the dependency in the Admin Host</p>
<pre><code class="language-cs">typeof(ProjectServiceApplicationContractsModule)
</code></pre>
<p>Repo: https://github.com/antosubash/Tasky</p>]]></content:encoded>
          </item><item>
          <title>Docker and CI/CD</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10</guid>
          <pubDate>Sat, 26 Mar 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to add docker support and create a CI/CD with github actions</description>
          <content:encoded><![CDATA[<p>This is the part 10 of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p>Part 10. Docker and CI/CD (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to add docker support to all the services and setup a CI/CD pipeline with github actions.</p>
<h2>Docker support</h2>
<p>Docker support can be added easily by using visual studio. since all the project is available in the solution vs will create a Docker file and add it to the project. In this we will use the Identity server it will be similar for all the other services.</p>
<p>To add Docker support right click on the Identity server project and choose add.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microservice/part10/docker0.png" alt="Add Docker"/></p>
<p>In the add menu choose docker support</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microservice/part10/docker1.png" alt="Add Menu"/></p>
<p>In the docker file option choose linux</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microservice/part10/docker2.png" alt="Docker Options"/></p>
<p>The final docker file will look like this. Here is the location of this sample file https://github.com/antosubash/AbpMicroservice/blob/main/apps/Tasky.IdentityServer/Dockerfile</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/microservice/part10/docker3.png" alt="Docker file"/></p>
<p>We have to do this to all the services.</p>
<h2>CI/CD</h2>
<p>Here is the sample github action file.</p>
<pre><code class="language-yaml">name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build the Gateway Docker image
      run: docker build . --file gateway/Tasky.Gateway/Dockerfile --tag gateway:dev
    - name: Build the IdentityServer Docker image
      run: docker build . --file apps/Tasky.IdentityServer/Dockerfile --tag identityserver:dev
    - name: Build the Administration Docker image
      run: docker build . --file services/administration/host/Tasky.AdministrationService.HttpApi.Host/Dockerfile --tag administration:dev
    - name: Build the IdentityService Docker image
      run: docker build . --file services/identity/host/Tasky.IdentityService.HttpApi.Host/Dockerfile --tag identityservice:dev
    - name: Build the SaaS Docker image
      run: docker build . --file services/saas/host/Tasky.SaaSService.HttpApi.Host/Dockerfile --tag saas:dev
</code></pre>]]></content:encoded>
          </item><item>
          <title>Distributed Event Bus</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-distributed-event-bus-part-9</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-distributed-event-bus-part-9</guid>
          <pubDate>Fri, 25 Mar 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to get the RabbitMQ working for service to service communication</description>
          <content:encoded><![CDATA[<p>This is the part 9 of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p>Part 9. Distributed event bus (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post, we will see how to set up service-to-service communication. We will use RabbitMQ as an event bus. Each service will have a RabbitMQ configuration. ABP comes with the inbuilt support to use the RabbitMQ for events. The packages are already available in the shared project we created in part 2. We just have to add the configuration in the appsettings and implement the events.</p>
<h2>Update appsettings.json</h2>
<h3>Administration service</h3>
<pre><code class="language-xml">&quot;RabbitMQ&quot;: {
  &quot;Connections&quot;: {
    &quot;Default&quot;: {
      &quot;HostName&quot;: &quot;localhost&quot;
    }
  },
  &quot;EventBus&quot;: {
    &quot;ClientName&quot;: &quot;Tasky_Administration&quot;,
    &quot;ExchangeName&quot;: &quot;Tasky&quot;
  }
}
</code></pre>
<h3>Identity service</h3>
<pre><code class="language-xml">&quot;RabbitMQ&quot;: {
  &quot;Connections&quot;: {
    &quot;Default&quot;: {
      &quot;HostName&quot;: &quot;localhost&quot;
    }
  },
  &quot;EventBus&quot;: {
    &quot;ClientName&quot;: &quot;Tasky_Identity&quot;,
    &quot;ExchangeName&quot;: &quot;Tasky&quot;
  }
}
</code></pre>
<h3>SaaS service</h3>
<pre><code class="language-xml">&quot;RabbitMQ&quot;: {
  &quot;Connections&quot;: {
    &quot;Default&quot;: {
      &quot;HostName&quot;: &quot;localhost&quot;
    }
  },
  &quot;EventBus&quot;: {
    &quot;ClientName&quot;: &quot;Tasky_SaaS&quot;,
    &quot;ExchangeName&quot;: &quot;Tasky&quot;
  }
}
</code></pre>
<h3>Identity Server</h3>
<pre><code class="language-xml">&quot;RabbitMQ&quot;: {
  &quot;Connections&quot;: {
    &quot;Default&quot;: {
      &quot;HostName&quot;: &quot;localhost&quot;
    }
  },
  &quot;EventBus&quot;: {
    &quot;ClientName&quot;: &quot;Tasky_AuthServer&quot;,
    &quot;ExchangeName&quot;: &quot;Tasky&quot;
  }
}
</code></pre>
<h2>Tenant Created Event handlers for Administration Service</h2>
<p>When the tenant is created in the SaaS service, the administration service needs to know about the newly created tenant so that we can add permission for the new tenant. This permission is given to the admin role. So that when the user is created with the admin role then he can log in to the newly created tenant. The tenant management module triggers a tenant-created event every time a tenant is created. We don&#x27;t have to do anything extra in our code. We just have to handle the created event. Following is how you can manage the tenant-created event.</p>
<pre><code class="language-cs">using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Volo.Abp.Authorization.Permissions;
using Volo.Abp.DependencyInjection;
using Volo.Abp.EventBus.Distributed;
using Volo.Abp.MultiTenancy;
using Volo.Abp.PermissionManagement;
using Volo.Abp.Uow;

namespace Tasky.Administration.EventHandler;

public class TenantCreatedEventHandler : IDistributedEventHandler&lt;TenantCreatedEto&gt;, ITransientDependency
{
    private readonly ICurrentTenant _currentTenant;
    private readonly ILogger&lt;TenantCreatedEventHandler&gt; _logger;
    private readonly IPermissionDataSeeder _permissionDataSeeder;
    private readonly IPermissionDefinitionManager _permissionDefinitionManager;
    private readonly IUnitOfWorkManager _unitOfWorkManager;

    public TenantCreatedEventHandler(
        ICurrentTenant currentTenant,
        IUnitOfWorkManager unitOfWorkManager,
        IPermissionDefinitionManager permissionDefinitionManager,
        IPermissionDataSeeder permissionDataSeeder,
        ILogger&lt;TenantCreatedEventHandler&gt; logger)
    {
        _currentTenant = currentTenant;
        _unitOfWorkManager = unitOfWorkManager;
        _permissionDefinitionManager = permissionDefinitionManager;
        _permissionDataSeeder = permissionDataSeeder;
        _logger = logger;
    }

    public async Task HandleEventAsync(TenantCreatedEto eventData)
    {
        try
        {
            await SeedDataAsync(eventData.Id);
        }
        catch (Exception ex)
        {
            await HandleErrorTenantCreatedAsync(eventData, ex);
        }
    }

    private Task HandleErrorTenantCreatedAsync(TenantCreatedEto eventData, Exception ex)
    {
        throw new NotImplementedException();
    }

    private async Task SeedDataAsync(Guid? tenantId)
    {
        _logger.LogInformation($&quot;Seeding ${tenantId}&quot;);
        using (_currentTenant.Change(tenantId))
        {
            var abpUnitOfWorkOptions = new AbpUnitOfWorkOptions {IsTransactional = true};
            using var uow = _unitOfWorkManager.Begin(abpUnitOfWorkOptions, true);
            var multiTenancySide = tenantId is null
                ? MultiTenancySides.Host
                : MultiTenancySides.Tenant;

            var permissionNames = _permissionDefinitionManager
                .GetPermissions()
                .Where(p =&gt; p.MultiTenancySide.HasFlag(multiTenancySide))
                .Where(p =&gt; !p.Providers.Any() || p.Providers.Contains(RolePermissionValueProvider.ProviderName))
                .Select(p =&gt; p.Name)
                .ToArray();

            await _permissionDataSeeder.SeedAsync(
                RolePermissionValueProvider.ProviderName,
                &quot;admin&quot;,
                permissionNames,
                tenantId
            );

            await uow.CompleteAsync();
        }
    }
}
</code></pre>
<h2>Tenant Created Event handlers for Identity Service</h2>
<p>Similar to what we have done in the administration service. we need to handle the tenant created event in the identity service to create the admin user for the newly created tenant. we can create the event handler and seed the user with the default username and password.</p>
<pre><code class="language-cs">using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Volo.Abp.DependencyInjection;
using Volo.Abp.EventBus.Distributed;
using Volo.Abp.MultiTenancy;
using Volo.Abp.Identity;
using System.Collections.Generic;

namespace Tasky.IdentityService.EventHandler;

public class TenantCreatedEventHandler : IDistributedEventHandler&lt;TenantCreatedEto&gt;, ITransientDependency
{
    private readonly ICurrentTenant _currentTenant;
    private readonly ILogger&lt;TenantCreatedEventHandler&gt; _logger;
    private readonly IIdentityDataSeeder _identityDataSeeder;
    public TenantCreatedEventHandler(
        ICurrentTenant currentTenant,
        IIdentityDataSeeder identityDataSeeder,
        ILogger&lt;TenantCreatedEventHandler&gt; logger)
    {
        _currentTenant = currentTenant;
        _identityDataSeeder = identityDataSeeder;
        _logger = logger;
    }

    public async Task HandleEventAsync(TenantCreatedEto eventData)
    {
        try
        {
            using (_currentTenant.Change(eventData.Id))
            {
                
                _logger.LogInformation($&quot;Creating admin user for tenant {eventData.Id}...&quot;);
                await _identityDataSeeder.SeedAsync(
                    eventData.Properties.GetOrDefault(IdentityDataSeedContributor.AdminEmailPropertyName) ?? &quot;admin@abp.io&quot;,
                    eventData.Properties.GetOrDefault(IdentityDataSeedContributor.AdminPasswordPropertyName) ?? &quot;1q2w3E*&quot;,
                    eventData.Id
                );
            }
        }
        catch (Exception ex)
        {
            await HandleErrorTenantCreatedAsync(eventData, ex);
        }
    }

    private Task HandleErrorTenantCreatedAsync(TenantCreatedEto eventData, Exception ex)
    {
        throw new NotImplementedException();
    }
}
</code></pre>
<h2>Run</h2>
<p>Use tye to run all the services. When the service starts it will create the queue in the RabbitMQ. So make sure you have RabbitMQ running.</p>
<pre><code class="language-bash">tye run
</code></pre>
<h2>Test</h2>
<p>To test the event bus. Login to the angular app in <code>http://localhost:4200</code> as admin and create a new tenant. Once the tenant is created logout and try to login to the tenant you just created. if the event bus is working then you can login with default username and password for the newly created tenant.</p>]]></content:encoded>
          </item><item>
          <title>IdentityServer and Angular</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8</guid>
          <pubDate>Sun, 20 Mar 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to get the IdentityServer and the Angular App working with other services</description>
          <content:encoded><![CDATA[<p>This is eight post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p>Part 8. Identity server and Angular App (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>We have copied the IdentityServer and Angular app from the default tired app. So they are configured to work with the tired app. we will modify the Identity server to use the newly created services and the change the config of the angular app to use the Reverse proxy we created with Yarp.</p>
<h2>IdentityServer</h2>
<p>Even thought we already have the Identity service. it only provides the API endpoints to manage the user. We need the Identity server to do the JWT auth and also for the login and registration. IdentityServer is the default way to login user in the ABP framework right now. But there are plans to replace IdentityServer and replace it with the <a href="https://github.com/openiddict/openiddict-core">OpenIdDict</a> if you want to know more about this go and check here https://github.com/abpframework/abp/issues/11989</p>
<h3>Remove the wrong reference</h3>
<p>During the code generation by default Identity server will have the reference for the <code>EFCore</code> project. But after moving the Identity server this reference will be wrong. So the first step is to remove all the project reference in the <code>csproj</code> file of the identity server.</p>
<h3>Add new reference</h3>
<p>Once the old references are removed we need to add the new reference to the identity server project. The Identity server should know about all 3 base services <code>identity</code>, <code>administration</code> and <code>saas</code>. So we need to add the reference for the <code>EFCore</code> projects of all the 3 services. Along with we also need to add the reference for the Shared project so that we can reuse some code.</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;ProjectReference Include=&quot;..\..\services\administration\src\Tasky.AdministrationService.EntityFrameworkCore\Tasky.AdministrationService.EntityFrameworkCore.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\services\identity\src\Tasky.IdentityService.EntityFrameworkCore\Tasky.IdentityService.EntityFrameworkCore.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\services\saas\src\Tasky.SaaSService.EntityFrameworkCore\Tasky.SaaSService.EntityFrameworkCore.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\shared\Tasky.Shared.Hosting\Tasky.Shared.Hosting.csproj&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<h3>Update the connection string</h3>
<p>Once we added the reference to the <code>EFCore</code> projects we need to add the connection string for the services in the <code>appsettings.json</code> file so that the Identity server can find the database.</p>
<pre><code class="language-xml">&quot;ConnectionStrings&quot;: {
  &quot;SaaSService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;,
  &quot;IdentityService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;,
  &quot;AdministrationService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
},
</code></pre>
<h3>Update CORS urls</h3>
<p>All the services and apps need to contact the Identity server to validate the tokens. so we should add the urls of the service in the <code>CorsOrigins</code> section of the <code>appsettings.json</code></p>
<pre><code class="language-json">&quot;CorsOrigins&quot;: &quot;http://localhost:4200,https://localhost:7001,https://localhost:7002,https://localhost:7003&quot;,
</code></pre>
<h3>Update the Authority URL</h3>
<p>All the service has <code>Authority</code> url in the <code>appsettings.json</code> file. we have to change that file to point to the identity server.</p>
<pre><code class="language-json">&quot;Authority&quot;: &quot;https://localhost:7000/&quot;,
</code></pre>
<h3>Update the module dependency</h3>
<p>Identity server project should have a <code>IdentityServerModule</code> in the root of the project directory. In that module we need update the module dependency so that the <code>EFCore</code> modules will be loaded correctly. We also should add the shared module.</p>
<pre><code class="language-cs">typeof(AbpAccountWebIdentityServerModule),
typeof(AbpAccountApplicationModule),
typeof(AbpAccountHttpApiModule),
typeof(AbpAspNetCoreMvcUiBasicThemeModule),
typeof(AdministrationServiceEntityFrameworkCoreModule),
typeof(SaaSServiceEntityFrameworkCoreModule),
typeof(IdentityServiceEntityFrameworkCoreModule),
typeof(TaskyHostingModule)
</code></pre>
<p>Once this is done. our identity server is ready for our use. launch the identity server and see if you can login as a super admin.</p>
<h3>Running Identity server</h3>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This should launch the identity server and it should be running in the port <code>7000</code></p>
<h2>Angular App</h2>
<p>angular app in abp is a self contained app. there is not dependency to any other abp project. so to run the we just have to point the angular app in the correct direction and it should work. We need to change 2 things in the angular app. one is the <code>OAuthConfig</code> so that it know where is the identity server is running and the <code>API</code> endpoint which is the reverse proxy in our case which has all the endpoints. you will be able to find the <code>environment.ts</code> file in <code>apps\angular\src\environments</code>.</p>
<pre><code class="language-ts">import { Environment } from &#x27;@abp/ng.core&#x27;;

const baseUrl = &#x27;http://localhost:4200&#x27;;

export const environment = {
  production: false,
  application: {
    baseUrl: &#x27;http://localhost:4200/&#x27;,
    name: &#x27;Tasky&#x27;,
    logoUrl: &#x27;&#x27;,
  },
  oAuthConfig: {
    issuer: &#x27;https://localhost:7000&#x27;,
    redirectUri: baseUrl,
    clientId: &#x27;Tasky_App&#x27;,
    responseType: &#x27;code&#x27;,
    scope: &#x27;offline_access IdentityService AdministrationService SaaSService role email openid profile&#x27;,
    requireHttps: true
  },
  apis: {
    default: {
      url: &#x27;https://localhost:7500&#x27;,
      rootNamespace: &#x27;Tasky&#x27;,
    }
  },
} as Environment;
</code></pre>
<h3>Run</h3>
<p>Once you have updated the <code>environment.ts</code> make sure the packages are installed for your angular app.</p>
<h4>To install packages</h4>
<pre><code class="language-bash">yarn
</code></pre>
<blockquote>
<p>you need to have yarn installed for this command to work</p>
</blockquote>
<p>This command will install all the packages needed for your angular app.</p>
<h4>To Run</h4>
<p>To run the angular app run the following command</p>
<pre><code class="language-bash">yarn start
</code></pre>
<p>This will start the angular dev server and your application will be running in the port <code>4200</code>.</p>]]></content:encoded>
          </item><item>
          <title>Yarp and Tye</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-yarp-and-tye-part-7</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-yarp-and-tye-part-7</guid>
          <pubDate>Sat, 19 Mar 2022 05:00:00 GMT</pubDate>
          <description>In this post we will see how to create a reverse proxy with Yarp and integrate Tye for our microservice application</description>
          <content:encoded><![CDATA[<p>This is seventh post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p>Part 7. Yarp and Tye (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Tye</h2>
<p>Lets init the tye.</p>
<h3>Install tye</h3>
<pre><code class="language-bash">dotnet tool install -g Microsoft.Tye --version &quot;0.11.0-alpha.22111.1&quot;
</code></pre>
<h3>Init Tye</h3>
<pre><code class="language-bash">tye init --force
</code></pre>
<p>This will generate a <code>tye.yaml</code> file.</p>
<pre><code class="language-yaml">name: tasky
services:
- name: tasky-identityserver
  project: apps/Tasky.IdentityServer/Tasky.IdentityServer.csproj
  bindings:
    - protocol: https
      port: 7000
- name: tasky-gateway
  project: gateway/Tasky.Gateway/Tasky.Gateway.csproj
  bindings:
    - protocol: https
      port: 7500
- name: tasky-administrationservice-httpapi-host
  project: services/administration/host/Tasky.AdministrationService.HttpApi.Host/Tasky.AdministrationService.HttpApi.Host.csproj
  bindings:
    - protocol: https
      port: 7001
- name: tasky-identityservice-httpapi-host
  project: services/identity/host/Tasky.IdentityService.HttpApi.Host/Tasky.IdentityService.HttpApi.Host.csproj
  bindings:
    - protocol: https
      port: 7002
- name: tasky-saasservice-httpapi-host
  project: services/saas/host/Tasky.SaaSService.HttpApi.Host/Tasky.SaaSService.HttpApi.Host.csproj
  bindings:
    - protocol: https
      port: 7003
</code></pre>
<h3>Run Tye</h3>
<pre><code class="language-bash">tye run --watch
</code></pre>
<h2>Yarp</h2>
<p>Yarp is our proxy server which will redirect the request to other services. So lets update the <code>Tasky.Gateway</code>.</p>
<h3>Install nuget</h3>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Yarp.ReverseProxy&quot; Version=&quot;1.0.0&quot; /&gt;
</code></pre>
<h3>Update the Program.cs</h3>
<pre><code class="language-cs">var builder = WebApplication.CreateBuilder(args);
builder.Services.AddReverseProxy()
    .LoadFromConfig(builder.Configuration.GetSection(&quot;ReverseProxy&quot;));
var app = builder.Build();
app.MapReverseProxy();
app.Run();
</code></pre>
<h3>Update appsettings.json</h3>
<pre><code class="language-json">{
  &quot;Logging&quot;: {
    &quot;LogLevel&quot;: {
      &quot;Default&quot;: &quot;Information&quot;,
      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;
    }
  },
  &quot;AllowedHosts&quot;: &quot;*&quot;,
  &quot;ReverseProxy&quot;: {
    &quot;Routes&quot;: {
      &quot;main&quot;: {
        &quot;ClusterId&quot;: &quot;main&quot;,
        &quot;Match&quot;: {
          &quot;Path&quot;: &quot;{**catch-all}&quot;
        }
      },
      &quot;identity&quot;: {
        &quot;ClusterId&quot;: &quot;identity&quot;,
        &quot;Match&quot;: {
          &quot;Path&quot;: &quot;/api/identity/{*any}&quot;
        }
      },
      &quot;account&quot;: {
        &quot;ClusterId&quot;: &quot;account&quot;,
        &quot;Match&quot;: {
          &quot;Path&quot;: &quot;/api/account/{*any}&quot;
        }
      },
      &quot;saas&quot;: {
        &quot;ClusterId&quot;: &quot;saas&quot;,
        &quot;Match&quot;: {
          &quot;Path&quot;: &quot;/api/multi-tenancy/{*any}&quot;
        }
      }
    },
    &quot;Clusters&quot;: {
      &quot;main&quot;: {
        &quot;Destinations&quot;: {
          &quot;main&quot;: {
            &quot;Address&quot;: &quot;https://localhost:7001&quot;
          }
        }
      },
      &quot;identity&quot;: {
        &quot;Destinations&quot;: {
          &quot;identity&quot;: {
            &quot;Address&quot;: &quot;https://localhost:7002&quot;
          }
        }
      },
      &quot;account&quot;: {
        &quot;Destinations&quot;: {
          &quot;account&quot;: {
            &quot;Address&quot;: &quot;https://localhost:7002&quot;
          }
        }
      },
      &quot;saas&quot;: {
        &quot;Destinations&quot;: {
          &quot;saas&quot;: {
            &quot;Address&quot;: &quot;https://localhost:7003&quot;
          }
        }
      }
    }
  }
}
</code></pre>]]></content:encoded>
          </item><item>
          <title>DbMigration</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-db-migration-part-6</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-db-migration-part-6</guid>
          <pubDate>Sat, 19 Mar 2022 04:00:00 GMT</pubDate>
          <description>In this post we will see how to create migration project for our microservice application</description>
          <content:encoded><![CDATA[<p>This is sixth post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p>Part 6. DB Migration (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Add the references</h2>
<p>For migrations we need to first add contracts and EF core projects as a reference in the db migrator. We need to do this for all the services.</p>
<pre><code class="language-xml">    &lt;ItemGroup&gt;
        &lt;ProjectReference Include=&quot;..\..\services\AdministrationService\src\Tasky.AdministrationService.Application.Contracts\Tasky.AdministrationService.Application.Contracts.csproj&quot;/&gt;
        &lt;ProjectReference Include=&quot;..\..\services\AdministrationService\src\Tasky.AdministrationService.EntityFrameworkCore\Tasky.AdministrationService.EntityFrameworkCore.csproj&quot;/&gt;
        &lt;ProjectReference Include=&quot;..\..\services\identity\src\Tasky.IdentityService.Application.Contracts\Tasky.IdentityService.Application.Contracts.csproj&quot;/&gt;
        &lt;ProjectReference Include=&quot;..\..\services\identity\src\Tasky.IdentityService.EntityFrameworkCore\Tasky.IdentityService.EntityFrameworkCore.csproj&quot;/&gt;
        &lt;ProjectReference Include=&quot;..\..\services\SaaSService\src\Tasky.SaaSService.Application.Contracts\Tasky.SaaSService.Application.Contracts.csproj&quot;/&gt;
        &lt;ProjectReference Include=&quot;..\..\services\SaaSService\src\Tasky.SaaSService.EntityFrameworkCore\Tasky.SaaSService.EntityFrameworkCore.csproj&quot;/&gt;
    &lt;/ItemGroup&gt;
</code></pre>
<p>We are adding <code>EntityFrameworkCore</code> and <code>Contracts</code> projects to the DbMigrations project.</p>
<h2>Create <code>DbMigrationService</code></h2>
<p>Db migration service is where we can manage the migration and seeding of data of all the services in a single location.</p>
<pre><code class="language-cs">using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Tasky.AdministrationService.EntityFrameworkCore;
using Tasky.IdentityService.EntityFrameworkCore;
using Tasky.SaaSService.EntityFrameworkCore;
using Volo.Abp.Data;
using Volo.Abp.DependencyInjection;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.Identity;
using Volo.Abp.MultiTenancy;
using Volo.Abp.TenantManagement;
using Volo.Abp.Uow;

namespace Tasky.DbMigrator;

public class TaskyDbMigrationService : ITransientDependency
{
    private readonly ICurrentTenant _currentTenant;
    private readonly IDataSeeder _dataSeeder;
    private readonly ILogger&lt;TaskyDbMigrationService&gt; _logger;
    private readonly ITenantRepository _tenantRepository;
    private readonly IUnitOfWorkManager _unitOfWorkManager;

    public TaskyDbMigrationService(
        ILogger&lt;TaskyDbMigrationService&gt; logger,
        ITenantRepository tenantRepository,
        IDataSeeder dataSeeder,
        ICurrentTenant currentTenant,
        IUnitOfWorkManager unitOfWorkManager)
    {
        _logger = logger;
        _tenantRepository = tenantRepository;
        _dataSeeder = dataSeeder;
        _currentTenant = currentTenant;
        _unitOfWorkManager = unitOfWorkManager;
    }

    public async Task MigrateAsync(CancellationToken cancellationToken)
    {
        await MigrateHostAsync(cancellationToken);
        await MigrateTenantsAsync(cancellationToken);
        _logger.LogInformation(&quot;Migration completed!&quot;);
    }

    private async Task MigrateHostAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation(&quot;Migrating Host side...&quot;);
        await MigrateAllDatabasesAsync(null, cancellationToken);
        await SeedDataAsync();
    }

    private async Task MigrateTenantsAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation(&quot;Migrating tenants...&quot;);

        var tenants =
            await _tenantRepository.GetListAsync(includeDetails: true, cancellationToken: cancellationToken);
        var migratedDatabaseSchemas = new HashSet&lt;string&gt;();
        foreach (var tenant in tenants)
        {
            using (_currentTenant.Change(tenant.Id))
            {
                // Database schema migration
                var connectionString = tenant.FindDefaultConnectionString();
                if (!connectionString.IsNullOrWhiteSpace() &amp;&amp; //tenant has a separate database
                    !migratedDatabaseSchemas.Contains(connectionString)) //the database was not migrated yet
                {
                    _logger.LogInformation($&quot;Migrating tenant database: {tenant.Name} ({tenant.Id})&quot;);
                    await MigrateAllDatabasesAsync(tenant.Id, cancellationToken);
                    migratedDatabaseSchemas.AddIfNotContains(connectionString);
                }

                //Seed data
                _logger.LogInformation($&quot;Seeding tenant data: {tenant.Name} ({tenant.Id})&quot;);
                await SeedDataAsync();
            }
        }
    }

    private async Task MigrateAllDatabasesAsync(
        Guid? tenantId,
        CancellationToken cancellationToken)
    {
        using (var uow = _unitOfWorkManager.Begin(true))
        {
            if (tenantId == null)
            {
                /* SaaSService schema should only be available in the host side */
                await MigrateDatabaseAsync&lt;SaaSServiceDbContext&gt;(cancellationToken);
            }

            await MigrateDatabaseAsync&lt;AdministrationServiceDbContext&gt;(cancellationToken);
            await MigrateDatabaseAsync&lt;IdentityServiceDbContext&gt;(cancellationToken);

            await uow.CompleteAsync(cancellationToken);
        }

        _logger.LogInformation(
            $&quot;All databases have been successfully migrated ({(tenantId.HasValue ? $&quot;tenantId: {tenantId}&quot; : &quot;HOST&quot;)}).&quot;);
    }

    private async Task MigrateDatabaseAsync&lt;TDbContext&gt;(
        CancellationToken cancellationToken)
        where TDbContext : DbContext, IEfCoreDbContext
    {
        _logger.LogInformation($&quot;Migrating {typeof(TDbContext).Name.RemovePostFix(&quot;DbContext&quot;)} database...&quot;);

        var dbContext = await _unitOfWorkManager.Current.ServiceProvider
            .GetRequiredService&lt;IDbContextProvider&lt;TDbContext&gt;&gt;()
            .GetDbContextAsync();

        await dbContext
            .Database
            .MigrateAsync(cancellationToken);
    }

    private async Task SeedDataAsync()
    {
        await _dataSeeder.SeedAsync(
            new DataSeedContext(_currentTenant.Id)
                .WithProperty(IdentityDataSeedContributor.AdminEmailPropertyName, &quot;admin@abp.io&quot;)
                .WithProperty(IdentityDataSeedContributor.AdminPasswordPropertyName, &quot;1q2w3E*&quot;)
        );
    }
}
</code></pre>
<h2>Update appsettings.json</h2>
<p>The appsettings has a different structure form the normal structure you will usually see in the abp projects. We use this as a data source to seed the <code>ApiScope</code>, <code>ApiResource</code> and <code>Identity server clients</code>.</p>
<pre><code class="language-json">{
  &quot;ConnectionStrings&quot;: {
    &quot;SaaSService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskySaaSService;Pooling=false;&quot;,
    &quot;IdentityService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyIdentityService;Pooling=false;&quot;,
    &quot;AdministrationService&quot;: &quot;User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyAdministrationService;Pooling=false;&quot;
  },
  &quot;ApiScope&quot;: [
    &quot;AuthServer&quot;,
    &quot;SaaSService&quot;,
    &quot;IdentityService&quot;,
    &quot;AdministrationService&quot;
  ],
  &quot;ApiResource&quot;: [
    &quot;AuthServer&quot;,
    &quot;SaaSService&quot;,
    &quot;IdentityService&quot;,
    &quot;AdministrationService&quot;
  ],
  &quot;Clients&quot;: [
    {
      &quot;ClientId&quot;: &quot;Tasky_Web&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7004&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;hybrid&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7004/signin-oidc&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7004/signout-callback-oidc&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7004&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;Tasky_App&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;http://localhost:4200&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;AuthServer&quot;,
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;http://localhost:4200&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;http://localhost:4200&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;http://localhost:4200&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;AdministrationService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7001&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7001/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7001/signout-callback-oidc&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7001&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;IdentityService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7002&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7002/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7002&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7002&quot;
      ]
    },
    {
      &quot;ClientId&quot;: &quot;SaaSService_Swagger&quot;,
      &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
      &quot;RootUrls&quot;: [
        &quot;https://localhost:7003&quot;
      ],
      &quot;Scopes&quot;: [
        &quot;SaaSService&quot;,
        &quot;IdentityService&quot;,
        &quot;AdministrationService&quot;
      ],
      &quot;GrantTypes&quot;: [
        &quot;authorization_code&quot;
      ],
      &quot;RedirectUris&quot;: [
        &quot;https://localhost:7003/swagger/oauth2-redirect.html&quot;
      ],
      &quot;PostLogoutRedirectUris&quot;: [
        &quot;https://localhost:7003&quot;
      ],
      &quot;AllowedCorsOrigins&quot;: [
        &quot;https://localhost:7003&quot;
      ]
    }
  ]
}
</code></pre>
<h2>Create <code>IdentityServerDataSeedContributor</code> for identity server</h2>
<pre><code class="language-cs">using System.Threading.Tasks;
using Volo.Abp.Data;
using Volo.Abp.DependencyInjection;

namespace Tasky.DbMigrator;

public class IdentityServerDataSeedContributor : IDataSeedContributor, ITransientDependency
{
    private readonly IdentityServerDataSeeder _identityServerDataSeeder;

    public IdentityServerDataSeedContributor(IdentityServerDataSeeder identityServerDataSeeder)
    {
        _identityServerDataSeeder = identityServerDataSeeder;
    }


    public async Task SeedAsync(DataSeedContext context)
    {
        await _identityServerDataSeeder.SeedAsync();
    }
}
</code></pre>
<h2>Create <code>IdentityServerDataSeeder</code> for reading json and create resource</h2>
<p>This service seeds the <code>ApiScope</code>, <code>ApiResource</code> and <code>Identity server clients</code> for the Identity server.</p>
<p><code>ServiceClient</code> is a class to parse the Identity server clients</p>
<pre><code class="language-cs">public class ServiceClient
{
    public string ClientId { get; set; }
    public string ClientSecret { get; set; }
    public string[] RootUrls { get; set; }
    public string[] Scopes { get; set; }
    public string[] GrantTypes { get; set; }
    public string[] RedirectUris { get; set; }
    public string[] PostLogoutRedirectUris { get; set; }
    public string[] AllowedCorsOrigins { get; set; }
}
</code></pre>
<pre><code class="language-cs">using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using IdentityServer4.Models;
using Microsoft.Extensions.Configuration;
using Volo.Abp.Authorization.Permissions;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Guids;
using Volo.Abp.IdentityServer.ApiResources;
using Volo.Abp.IdentityServer.ApiScopes;
using Volo.Abp.IdentityServer.Clients;
using Volo.Abp.IdentityServer.IdentityResources;
using Volo.Abp.MultiTenancy;
using Volo.Abp.PermissionManagement;
using Volo.Abp.Uow;
using ApiResource = Volo.Abp.IdentityServer.ApiResources.ApiResource;
using ApiScope = Volo.Abp.IdentityServer.ApiScopes.ApiScope;
using Client = Volo.Abp.IdentityServer.Clients.Client;

namespace Tasky.DbMigrator;

public class IdentityServerDataSeeder : ITransientDependency
{
    private readonly IApiResourceRepository _apiResourceRepository;
    private readonly IApiScopeRepository _apiScopeRepository;
    private readonly IClientRepository _clientRepository;
    private readonly IConfiguration _configuration;
    private readonly ICurrentTenant _currentTenant;
    private readonly IGuidGenerator _guidGenerator;
    private readonly IIdentityResourceDataSeeder _identityResourceDataSeeder;
    private readonly IPermissionDataSeeder _permissionDataSeeder;

    public IdentityServerDataSeeder(
        IClientRepository clientRepository,
        IApiResourceRepository apiResourceRepository,
        IApiScopeRepository apiScopeRepository,
        IIdentityResourceDataSeeder identityResourceDataSeeder,
        IGuidGenerator guidGenerator,
        IPermissionDataSeeder permissionDataSeeder,
        IConfiguration configuration,
        ICurrentTenant currentTenant)
    {
        _clientRepository = clientRepository;
        _apiResourceRepository = apiResourceRepository;
        _apiScopeRepository = apiScopeRepository;
        _identityResourceDataSeeder = identityResourceDataSeeder;
        _guidGenerator = guidGenerator;
        _permissionDataSeeder = permissionDataSeeder;
        _configuration = configuration;
        _currentTenant = currentTenant;
    }

    [UnitOfWork]
    public async virtual Task SeedAsync()
    {
        using (_currentTenant.Change(null))
        {
            await _identityResourceDataSeeder.CreateStandardResourcesAsync();
            await CreateApiResourcesAsync();
            await CreateApiScopesAsync();
            await CreateClientsAsync();
        }
    }

    private async Task CreateClientsAsync()
    {
        var clients = _configuration.GetSection(&quot;Clients&quot;).Get&lt;List&lt;ServiceClient&gt;&gt;();
        var commonScopes = new[] {
            &quot;email&quot;,
            &quot;openid&quot;,
            &quot;profile&quot;,
            &quot;role&quot;,
            &quot;phone&quot;,
            &quot;address&quot;
        };

        foreach (var client in clients)
        {
            await CreateClientAsync(
                client.ClientId,
                commonScopes.Union(client.Scopes),
                client.GrantTypes,
                client.ClientSecret.Sha256(),
                requireClientSecret: false,
                redirectUris: client.RedirectUris,
                postLogoutRedirectUris: client.PostLogoutRedirectUris,
                corsOrigins: client.AllowedCorsOrigins
            );
        }
    }


    private async Task CreateApiResourcesAsync()
    {
        var commonApiUserClaims = new[] {
            &quot;email&quot;,
            &quot;email_verified&quot;,
            &quot;name&quot;,
            &quot;phone_number&quot;,
            &quot;phone_number_verified&quot;,
            &quot;role&quot;
        };

        var apiResources = _configuration.GetSection(&quot;ApiResource&quot;).Get&lt;string[]&gt;();

        foreach (var item in apiResources)
        {
            await CreateApiResourceAsync(item, commonApiUserClaims);
        }
    }

    private async Task CreateApiScopesAsync()
    {
        var apiScopes = _configuration.GetSection(&quot;ApiScope&quot;).Get&lt;string[]&gt;();
        foreach (var item in apiScopes)
        {
            await CreateApiScopeAsync(item);
        }
    }

    private async Task&lt;ApiResource&gt; CreateApiResourceAsync(string name, IEnumerable&lt;string&gt; claims)
    {
        var apiResource = await _apiResourceRepository.FindByNameAsync(name);
        if (apiResource == null)
        {
            apiResource = await _apiResourceRepository.InsertAsync(
                new ApiResource(
                    _guidGenerator.Create(),
                    name,
                    name + &quot; API&quot;
                ),
                true
            );
        }

        foreach (var claim in claims)
        {
            if (apiResource.FindClaim(claim) == null)
            {
                apiResource.AddUserClaim(claim);
            }
        }

        return await _apiResourceRepository.UpdateAsync(apiResource);
    }

    private async Task&lt;ApiScope&gt; CreateApiScopeAsync(string name)
    {
        var apiScope = await _apiScopeRepository.FindByNameAsync(name);
        if (apiScope == null)
        {
            apiScope = await _apiScopeRepository.InsertAsync(
                new ApiScope(
                    _guidGenerator.Create(),
                    name,
                    name + &quot; API&quot;
                ),
                true
            );
        }

        return apiScope;
    }

    private async Task&lt;Client&gt; CreateClientAsync(
        string name,
        IEnumerable&lt;string&gt; scopes,
        IEnumerable&lt;string&gt; grantTypes,
        string secret = null,
        IEnumerable&lt;string&gt; redirectUris = null,
        IEnumerable&lt;string&gt; postLogoutRedirectUris = null,
        string frontChannelLogoutUri = null,
        bool requireClientSecret = true,
        bool requirePkce = false,
        IEnumerable&lt;string&gt; permissions = null,
        IEnumerable&lt;string&gt; corsOrigins = null)
    {
        var client = await _clientRepository.FindByClientIdAsync(name);
        if (client == null)
        {
            client = await _clientRepository.InsertAsync(
                new Client(
                    _guidGenerator.Create(),
                    name
                ) {
                    ClientName = name,
                    ProtocolType = &quot;oidc&quot;,
                    Description = name,
                    AlwaysIncludeUserClaimsInIdToken = true,
                    AllowOfflineAccess = true,
                    AbsoluteRefreshTokenLifetime = 31536000, //365 days
                    AccessTokenLifetime = 31536000, //365 days
                    AuthorizationCodeLifetime = 300,
                    IdentityTokenLifetime = 300,
                    RequireConsent = false,
                    FrontChannelLogoutUri = frontChannelLogoutUri,
                    RequireClientSecret = requireClientSecret,
                    RequirePkce = requirePkce
                },
                true
            );
        }

        foreach (var scope in scopes)
        {
            if (client.FindScope(scope) == null)
            {
                client.AddScope(scope);
            }
        }

        foreach (var grantType in grantTypes)
        {
            if (client.FindGrantType(grantType) == null)
            {
                client.AddGrantType(grantType);
            }
        }

        if (!secret.IsNullOrEmpty())
        {
            if (client.FindSecret(secret) == null)
            {
                client.AddSecret(secret);
            }
        }

        foreach (var redirectUrl in redirectUris)
        {
            if (client.FindRedirectUri(redirectUrl) == null)
            {
                client.AddRedirectUri(redirectUrl);
            }
        }

        foreach (var postLogoutRedirectUri in postLogoutRedirectUris)
        {
            if (client.FindPostLogoutRedirectUri(postLogoutRedirectUri) == null)
            {
                client.AddPostLogoutRedirectUri(postLogoutRedirectUri);
            }
        }

        if (permissions != null)
        {
            await _permissionDataSeeder.SeedAsync(
                ClientPermissionValueProvider.ProviderName,
                name,
                permissions
            );
        }

        if (corsOrigins != null)
        {
            foreach (var origin in corsOrigins)
            {
                if (!origin.IsNullOrWhiteSpace() &amp;&amp; client.FindCorsOrigin(origin) == null)
                {
                    client.AddCorsOrigin(origin);
                }
            }
        }

        return await _clientRepository.UpdateAsync(client);
    }
}
</code></pre>
<h2>Update the <code>TaskyDbMigratorModule</code></h2>
<pre><code class="language-cs">typeof(AdministrationServiceEntityFrameworkCoreModule),
typeof(AdministrationServiceApplicationContractsModule),
typeof(IdentityServiceEntityFrameworkCoreModule),
typeof(IdentityServiceApplicationContractsModule),
typeof(SaaSServiceEntityFrameworkCoreModule),
typeof(SaaSServiceApplicationContractsModule)
</code></pre>
<p>Repo: https://github.com/antosubash/AbpMicroservice</p>]]></content:encoded>
          </item><item>
          <title>SaaS Services</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-saas-services-part-5</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-saas-services-part-5</guid>
          <pubDate>Sat, 19 Mar 2022 03:00:00 GMT</pubDate>
          <description>In this post we will see how to do the create SaaS Service for our microservice application</description>
          <content:encoded><![CDATA[<p>This is fifth post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p>Part 5. SaaS Service (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to setup SaaS service. we only have tenant management module in this service.</p>
<h2>Add the shared project as a reference to the host</h2>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;..\..\..\..\shared\Tasky.Shared.Hosting\Tasky.Shared.Hosting.csproj&quot; /&gt;
</code></pre>
<h2>Update the connection string</h2>
<p><code>User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskySaaSService;Pooling=false;</code></p>
<h2>Update the <code>SaaSServiceHttpApiHostModule</code></h2>
<p>Update the depends on.</p>
<pre><code class="language-cs">[DependsOn(
    typeof(TaskyHostingModule),
    typeof(SaaSServiceApplicationModule),
    typeof(SaaSServiceEntityFrameworkCoreModule),
    typeof(SaaSServiceHttpApiModule),
)]
</code></pre>
<p>Remove the things which are configured in the shared project.</p>
<h2>Create the <code>DbContextFactory</code> in the EntityFrameworkCore project</h2>
<pre><code class="language-cs">using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace Tasky.SaaSService.EntityFrameworkCore;

public class SaaSServiceDbContextFactory : IDesignTimeDbContextFactory&lt;SaaSServiceDbContext&gt;
{
    public SaaSServiceDbContext CreateDbContext(string[] args)
    {
        var builder = new DbContextOptionsBuilder&lt;SaaSServiceDbContext&gt;()
            .UseNpgsql(GetConnectionStringFromConfiguration());

        return new SaaSServiceDbContext(builder.Options);
    }

    private static string GetConnectionStringFromConfiguration()
    {
        return BuildConfiguration()
            .GetConnectionString(SaaSServiceDbProperties.ConnectionStringName);
    }

    private static IConfigurationRoot BuildConfiguration()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(
                Path.Combine(
                    Directory.GetParent(Directory.GetCurrentDirectory())?.Parent!.FullName!,
                    $&quot;host{Path.DirectorySeparatorChar}Tasky.SaaSService.HttpApi.Host&quot;
                )
            )
            .AddJsonFile(&quot;appsettings.json&quot;, false);

        return builder.Build();
    }
}
</code></pre>
<h2>Update the <code>Tasky.SaaSService.EntityFrameworkCore</code></h2>
<p>Update the nuget packages</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore.PostgreSql&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Tools&quot; Version=&quot;6.0.1&quot;/&gt;
</code></pre>
<p>Update the <code>SaaSServiceDbContext</code></p>
<pre><code class="language-cs">using Microsoft.EntityFrameworkCore;
using Volo.Abp.Data;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.TenantManagement;
using Volo.Abp.TenantManagement.EntityFrameworkCore;

namespace Tasky.SaaSService.EntityFrameworkCore;

[ConnectionStringName(SaaSServiceDbProperties.ConnectionStringName)]
public class SaaSServiceDbContext : AbpDbContext&lt;SaaSServiceDbContext&gt;, ITenantManagementDbContext, ISaaSServiceDbContext
{
    public SaaSServiceDbContext(DbContextOptions&lt;SaaSDbContext&gt; options)
        : base(options)
    {
    }

    public DbSet&lt;Tenant&gt; Tenants { get; set; }

    public DbSet&lt;TenantConnectionString&gt; TenantConnectionStrings { get; set; }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        builder.ConfigureSaaSService();
        builder.ConfigureTenantManagement();
    }
}
</code></pre>
<p>Update the <code>SaaSServiceEntityFrameworkCoreModule</code></p>
<pre><code class="language-cs">using System;
using Microsoft.Extensions.DependencyInjection;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.Modularity;
using Volo.Abp.TenantManagement.EntityFrameworkCore;

namespace Tasky.SaaSService.EntityFrameworkCore;

[DependsOn(
    typeof(SaaSServiceDomainModule),
    typeof(AbpTenantManagementEntityFrameworkCoreModule),
    typeof(AbpEntityFrameworkCoreModule),
    typeof(AbpEntityFrameworkCorePostgreSqlModule)
)]
public class SaaSServiceEntityFrameworkCoreModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        Configure&lt;AbpDbContextOptions&gt;(options =&gt;
        {
            options.UseNpgsql();
        });

        AppContext.SetSwitch(&quot;Npgsql.EnableLegacyTimestampBehavior&quot;, true);

        context.Services.AddAbpDbContext&lt;SaaSDbContext&gt;(options =&gt;
        {
            options.ReplaceDbContext&lt;ITenantManagementDbContext&gt;();
            options.AddDefaultRepositories(true);
        });
    }
}
</code></pre>
<p>Once this is created delete <code>EntityFrameworkCore</code> folder can be created.</p>
<h2>Migration</h2>
<p>To create migrations</p>
<p><code>dotnet ef migrations add Init</code></p>
<p>To update database</p>
<p><code>dotnet ef database update</code></p>
<p>Repo: https://github.com/antosubash/AbpMicroservice</p>]]></content:encoded>
          </item><item>
          <title>Identity Services</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-identity-services-part-4</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-identity-services-part-4</guid>
          <pubDate>Sat, 19 Mar 2022 02:00:00 GMT</pubDate>
          <description>In this post we will see how to do the create Identity service for our microservice application</description>
          <content:encoded><![CDATA[<p>This is forth post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p>Part 4. Identity Service (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to configure Identity Service. In the identity service we have already add 2 modules Identity and IdentityServer. we need to configure the Identity service to use these modules.</p>
<h2>Add the shared project as a reference to the host</h2>
<p>We need to do the same thing we did in the admin service. Add the shared project as a reference and clean up host module.</p>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;..\..\..\..\shared\Tasky.Shared.Hosting\Tasky.Shared.Hosting.csproj&quot; /&gt;
</code></pre>
<h2>Update the connection string</h2>
<p><code>User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=TaskyIdentityService;Pooling=false;</code></p>
<h2>Update the <code>IdentityServiceHttpApiHostModule</code></h2>
<p>Update the depends on with the shared hosting module.</p>
<pre><code class="language-cs">[DependsOn(
    typeof(TaskyHostingModule),
    typeof(IdentityServiceApplicationModule),
    typeof(IdentityServiceEntityFrameworkCoreModule),
    typeof(IdentityServiceHttpApiModule),
)]
</code></pre>
<p>Remove the things which are configured in the shared project.</p>
<h2>Create the <code>DbContextFactory</code> in the EntityFrameworkCore project</h2>
<pre><code class="language-cs">using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace Tasky.IdentityService.EntityFrameworkCore;

public class IdentityServiceDbContextFactory : IDesignTimeDbContextFactory&lt;IdentityServiceDbContext&gt;
{
    public IdentityServiceDbContext CreateDbContext(string[] args)
    {
        var builder = new DbContextOptionsBuilder&lt;IdentityServiceDbContext&gt;()
            .UseNpgsql(GetConnectionStringFromConfiguration());

        return new IdentityServiceDbContext(builder.Options);
    }

    private static string GetConnectionStringFromConfiguration()
    {
        return BuildConfiguration()
            .GetConnectionString(IdentityServiceDbProperties.ConnectionStringName);
    }

    private static IConfigurationRoot BuildConfiguration()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(
                Path.Combine(
                    Directory.GetParent(Directory.GetCurrentDirectory())?.Parent!.FullName!,
                    $&quot;host{Path.DirectorySeparatorChar}Tasky.IdentityService.HttpApi.Host&quot;
                )
            )
            .AddJsonFile(&quot;appsettings.json&quot;, false);

        return builder.Build();
    }
}
</code></pre>
<h2>Update the <code>IdentityServiceDbContext</code></h2>
<pre><code class="language-cs">using Microsoft.EntityFrameworkCore;
using Volo.Abp.Data;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.Identity;
using Volo.Abp.Identity.EntityFrameworkCore;
using Volo.Abp.IdentityServer.ApiResources;
using Volo.Abp.IdentityServer.ApiScopes;
using Volo.Abp.IdentityServer.Clients;
using Volo.Abp.IdentityServer.Devices;
using Volo.Abp.IdentityServer.EntityFrameworkCore;
using Volo.Abp.IdentityServer.Grants;
using Volo.Abp.IdentityServer.IdentityResources;

namespace Tasky.IdentityService.EntityFrameworkCore;

[ConnectionStringName(IdentityServiceDbProperties.ConnectionStringName)]
public class IdentityServiceDbContext : AbpDbContext&lt;IdentityServiceDbContext&gt;, IIdentityDbContext,
    IIdentityServerDbContext, IIdentityServiceDbContext
{
    public IdentityServiceDbContext(DbContextOptions&lt;IdentityServiceDbContext&gt; options)
        : base(options)
    {
    }

    public DbSet&lt;IdentityUser&gt; Users { get; set; }
    public DbSet&lt;IdentityRole&gt; Roles { get; set; }
    public DbSet&lt;IdentityClaimType&gt; ClaimTypes { get; set; }
    public DbSet&lt;OrganizationUnit&gt; OrganizationUnits { get; set; }
    public DbSet&lt;IdentitySecurityLog&gt; SecurityLogs { get; set; }
    public DbSet&lt;IdentityLinkUser&gt; LinkUsers { get; set; }
    public DbSet&lt;ApiResource&gt; ApiResources { get; set; }
    public DbSet&lt;ApiResourceSecret&gt; ApiResourceSecrets { get; set; }
    public DbSet&lt;ApiResourceClaim&gt; ApiResourceClaims { get; set; }
    public DbSet&lt;ApiResourceScope&gt; ApiResourceScopes { get; set; }
    public DbSet&lt;ApiResourceProperty&gt; ApiResourceProperties { get; set; }
    public DbSet&lt;ApiScope&gt; ApiScopes { get; set; }
    public DbSet&lt;ApiScopeClaim&gt; ApiScopeClaims { get; set; }
    public DbSet&lt;ApiScopeProperty&gt; ApiScopeProperties { get; set; }
    public DbSet&lt;IdentityResource&gt; IdentityResources { get; set; }
    public DbSet&lt;IdentityResourceClaim&gt; IdentityClaims { get; set; }
    public DbSet&lt;IdentityResourceProperty&gt; IdentityResourceProperties { get; set; }
    public DbSet&lt;Client&gt; Clients { get; set; }
    public DbSet&lt;ClientGrantType&gt; ClientGrantTypes { get; set; }
    public DbSet&lt;ClientRedirectUri&gt; ClientRedirectUris { get; set; }
    public DbSet&lt;ClientPostLogoutRedirectUri&gt; ClientPostLogoutRedirectUris { get; set; }
    public DbSet&lt;ClientScope&gt; ClientScopes { get; set; }
    public DbSet&lt;ClientSecret&gt; ClientSecrets { get; set; }
    public DbSet&lt;ClientClaim&gt; ClientClaims { get; set; }
    public DbSet&lt;ClientIdPRestriction&gt; ClientIdPRestrictions { get; set; }
    public DbSet&lt;ClientCorsOrigin&gt; ClientCorsOrigins { get; set; }
    public DbSet&lt;ClientProperty&gt; ClientProperties { get; set; }
    public DbSet&lt;PersistedGrant&gt; PersistedGrants { get; set; }
    public DbSet&lt;DeviceFlowCodes&gt; DeviceFlowCodes { get; set; }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        builder.ConfigureIdentityService();
        builder.ConfigureIdentity();
        builder.ConfigureIdentityServer();
    }
}
</code></pre>
<h2>Update the <code>Tasky.IdentityService.EntityFrameworkCore</code> project</h2>
<p>Update the nuget packages with ef core packages. we will replace the module db context and configure the DbContext options in this module.</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore.PostgreSql&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Tools&quot; Version=&quot;6.0.1&quot;/&gt;
</code></pre>
<p>Update the <code>IdentityServiceEntityFrameworkCoreModule</code> file.</p>
<pre><code class="language-cs">using System;
using Microsoft.Extensions.DependencyInjection;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.Identity.EntityFrameworkCore;
using Volo.Abp.IdentityServer.EntityFrameworkCore;
using Volo.Abp.Modularity;

namespace Tasky.IdentityService.EntityFrameworkCore;

[DependsOn(
    typeof(IdentityServiceDomainModule),
    typeof(AbpEntityFrameworkCoreModule),
    typeof(AbpIdentityEntityFrameworkCoreModule),
    typeof(AbpIdentityServerEntityFrameworkCoreModule)
)]
public class IdentityServiceEntityFrameworkCoreModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        Configure&lt;AbpDbContextOptions&gt;(options =&gt;
        {
            options.UseNpgsql();
        });
        AppContext.SetSwitch(&quot;Npgsql.EnableLegacyTimestampBehavior&quot;, true);
        context.Services.AddAbpDbContext&lt;IdentityServiceDbContext&gt;(options =&gt;
        {
            options.ReplaceDbContext&lt;IIdentityDbContext&gt;();
            options.ReplaceDbContext&lt;IIdentityServerDbContext&gt;();

            options.AddDefaultRepositories(true);
        });
    }
}
</code></pre>
<p>Once this is created delete <code>EntityFrameworkCore</code> folder can be created.</p>
<h2>Migration</h2>
<p>To create migrations</p>
<p><code>dotnet ef migrations add Init</code></p>
<p>To update database</p>
<p><code>dotnet ef database update</code></p>
<p>Repo: https://github.com/antosubash/AbpMicroservice</p>]]></content:encoded>
          </item><item>
          <title>Administration Services</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-administration-services-part-3</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-administration-services-part-3</guid>
          <pubDate>Sat, 19 Mar 2022 01:00:00 GMT</pubDate>
          <description>In this post we will see how to do the create Administration service for our microservice application</description>
          <content:encoded><![CDATA[<p>This is third post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p>Part 3. Administration Service (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Setup Administration service</h2>
<p>Adminstration service is where we uses Audit log, feature, settings and permission management modules. We will use a separate database to store everything in the administration service.</p>
<h2>Add the shared project as a reference to the host</h2>
<p>We need to add shared project as the reference to the Administration service. once this is added we can do some cleanup in the host module of the administration.</p>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;..\..\..\..\shared\Tasky.Shared.Hosting\Tasky.Shared.Hosting.csproj&quot; /&gt;
</code></pre>
<h2>Update the connection string</h2>
<p><code>User ID=postgres;Password=postgres;Host=localhost;Port=5432;Database=AdministrationService;Pooling=false;</code></p>
<h2>Update the <code>AdministrationServiceHttpApiHostModule</code></h2>
<p>Update the depends on with the shared module. Once the shared module is added then we can removed most of the modules in the host module. Below is how the final depends on looks like.</p>
<pre><code class="language-cs">[DependsOn(
    typeof(TaskyHostingModule),
    typeof(AdministrationServiceApplicationModule),
    typeof(AdministrationServiceEntityFrameworkCoreModule),
    typeof(AdministrationServiceHttpApiModule),
)]
</code></pre>
<p>Remove the things which are configured in the shared project.</p>
<h2>Create the <code>DbContextFactory</code> in the EntityFrameworkCore project</h2>
<p>We need to create a <code>Factory</code> class for the <code>DbContext</code> so that we can create migration in the <code>EfCore</code> project. this is necessary to build the configuration form the host project.</p>
<pre><code class="language-cs">using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace Tasky.AdministrationService.EntityFrameworkCore;

public class AdministrationServiceDbContextFactory : IDesignTimeDbContextFactory&lt;AdministrationServiceDbContext&gt;
{
    public AdministrationServiceDbContext CreateDbContext(string[] args)
    {
        var builder = new DbContextOptionsBuilder&lt;AdministrationServiceDbContext&gt;()
            .UseNpgsql(GetConnectionStringFromConfiguration());

        return new AdministrationServiceDbContext(builder.Options);
    }

    private static string GetConnectionStringFromConfiguration()
    {
        return BuildConfiguration()
            .GetConnectionString(AdministrationServiceDbProperties.ConnectionStringName);
    }

    private static IConfigurationRoot BuildConfiguration()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(
                Path.Combine(
                    Directory.GetParent(Directory.GetCurrentDirectory())?.Parent!.FullName!,
                    $&quot;host{Path.DirectorySeparatorChar}Tasky.AdministrationService.HttpApi.Host&quot;
                )
            )
            .AddJsonFile(&quot;appsettings.json&quot;, false);

        return builder.Build();
    }
}
</code></pre>
<h2>Update the <code>AdministrationServiceDbContext</code></h2>
<p>In the <code>DbContext</code> we need to updated it with the DbContext of the modules. We have added 4 modules in the administration service and all modules have a db context. So we have to inherit from the db context of the modules. this is add the <code>DBSet</code> of the modules to the administration module.</p>
<pre><code class="language-cs">using Microsoft.EntityFrameworkCore;
using Volo.Abp.Data;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.AuditLogging.EntityFrameworkCore;
using Volo.Abp.FeatureManagement.EntityFrameworkCore;
using Volo.Abp.PermissionManagement.EntityFrameworkCore;
using Volo.Abp.SettingManagement.EntityFrameworkCore;
using Volo.Abp.AuditLogging;
using Volo.Abp.FeatureManagement;
using Volo.Abp.PermissionManagement;
using Volo.Abp.SettingManagement;

namespace Tasky.AdministrationService.EntityFrameworkCore;

[ConnectionStringName(AdministrationServiceDbProperties.ConnectionStringName)]
public class AdministrationServiceDbContext : AbpDbContext&lt;AdministrationServiceDbContext&gt;,
    IPermissionManagementDbContext,
    ISettingManagementDbContext,
    IFeatureManagementDbContext,
    IAuditLoggingDbContext,
    IAdministrationServiceDbContext
{
    /* Add DbSet for each Aggregate Root here. Example:
     * public DbSet&lt;Question&gt; Questions { get; set; }
     */

    public AdministrationServiceDbContext(DbContextOptions&lt;AdministrationServiceDbContext&gt; options)
        : base(options)
    {
    }

    public DbSet&lt;AuditLog&gt; AuditLogs { get; set; }
    public DbSet&lt;FeatureValue&gt; FeatureValues { get; set; }
    public DbSet&lt;PermissionGrant&gt; PermissionGrants { get; set; }
    public DbSet&lt;Setting&gt; Settings { get; set; }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        builder.ConfigureAdministrationService();
        builder.ConfigurePermissionManagement();
        builder.ConfigureSettingManagement();
        builder.ConfigureAuditLogging();
        builder.ConfigureFeatureManagement();
    }
}
</code></pre>
<h2>Update the <code>AdministrationServiceEntityFrameworkCoreModule</code></h2>
<p>This is the final setup before creating the migration. we have to inform the ef core that we are using <code>postgres</code> as database. we can do that configuring <code>AbpDbContextOptions</code> and replace the db context of the modules with the administration db context.</p>
<pre><code class="language-cs">using Microsoft.Extensions.DependencyInjection;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.Modularity;
using Volo.Abp.AuditLogging.EntityFrameworkCore;
using Volo.Abp.FeatureManagement.EntityFrameworkCore;
using Volo.Abp.PermissionManagement.EntityFrameworkCore;
using Volo.Abp.SettingManagement.EntityFrameworkCore;
using System;

namespace Tasky.AdministrationService.EntityFrameworkCore;

[DependsOn(
    typeof(AdministrationServiceDomainModule),
    typeof(AbpEntityFrameworkCoreModule)
)]
[DependsOn(typeof(AbpAuditLoggingEntityFrameworkCoreModule))]
[DependsOn(typeof(AbpFeatureManagementEntityFrameworkCoreModule))]
[DependsOn(typeof(AbpPermissionManagementEntityFrameworkCoreModule))]
[DependsOn(typeof(AbpSettingManagementEntityFrameworkCoreModule))]
public class AdministrationServiceEntityFrameworkCoreModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        Configure&lt;AbpDbContextOptions&gt;(options =&gt;
        {
            options.UseNpgsql();
        });
        
        AppContext.SetSwitch(&quot;Npgsql.EnableLegacyTimestampBehavior&quot;, true);
        context.Services.AddAbpDbContext&lt;AdministrationServiceDbContext&gt;(options =&gt;
        {
            options.ReplaceDbContext&lt;IPermissionManagementDbContext&gt;();
            options.ReplaceDbContext&lt;ISettingManagementDbContext&gt;();
            options.ReplaceDbContext&lt;IFeatureManagementDbContext&gt;();
            options.ReplaceDbContext&lt;IAuditLoggingDbContext&gt;();

            options.AddDefaultRepositories(true);
        });
    }
}
</code></pre>
<h2>Prepare for the migration</h2>
<p>Add the ef core design nuget for the migrations.</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;6.0.1&quot;&gt;
    &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
    &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers&lt;/IncludeAssets&gt;
&lt;/PackageReference&gt;
</code></pre>
<p>Once this is created delete <code>EntityFrameworkCore</code> folder can be created from the host project.</p>
<h2>Migration</h2>
<p>To create migrations</p>
<p><code>dotnet ef migrations add Init</code></p>
<p>To update database</p>
<p><code>dotnet ef database update</code></p>
<p>Repo: https://github.com/antosubash/AbpMicroservice</p>]]></content:encoded>
          </item><item>
          <title>Shared Project</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-shared-project-part-2</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-shared-project-part-2</guid>
          <pubDate>Sat, 19 Mar 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to do the create a Shared project which will be used by all services</description>
          <content:encoded><![CDATA[<p>This is second post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p><a href="/posts/netcore-microservice-with-abp-init-part-1">Part 1. Initial Setup</a></p>
<p>Part 2. Shared Project (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Setup Shared project</h2>
<p>We need the shared project so that we can share some start up code. This part is not necessary but it is good to have and shared module which will we can reuse.</p>
<h2>Install nuget</h2>
<p>The setup script in the part 1 of this series has created a empty class library project called <code>Tasky.Shared.Hosting</code>. we will add the following nuget packages to that project. These nuget packages are essential for all the microservice we are going to create. So we will install these in a shared project and add this shared project as a reference in all the services. This will we can save some time.</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Volo.Abp.Autofac&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EventBus.RabbitMQ&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.Localization&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.MultiTenancy&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.AspNetCore.Mvc.UI.MultiTenancy&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Serilog.AspNetCore&quot; Version=&quot;4.1.0&quot;/&gt;
&lt;PackageReference Include=&quot;Serilog.Sinks.Async&quot; Version=&quot;1.5.0&quot;/&gt;
&lt;PackageReference Include=&quot;IdentityModel&quot; Version=&quot;5.1.0&quot;/&gt;
&lt;PackageReference Include=&quot;Microsoft.AspNetCore.Authentication.JwtBearer&quot; Version=&quot;6.0.0&quot;/&gt;
&lt;PackageReference Include=&quot;Microsoft.AspNetCore.DataProtection.StackExchangeRedis&quot; Version=&quot;6.0.0&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.Caching.StackExchangeRedis&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.Http.Client.IdentityModel.Web&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.Identity.HttpApi.Client&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.AspNetCore.Serilog&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.Swashbuckle&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore&quot; Version=&quot;5.1.4&quot;/&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore.PostgreSql&quot; Version=&quot;5.1.4&quot;/&gt;
</code></pre>
<h2>Shared module</h2>
<p>Lets create a shared <code>TaskyHostingModule</code> which can be added as dependency for all of our services.</p>
<pre><code class="language-cs">using Volo.Abp.AspNetCore.MultiTenancy;
using Volo.Abp.AspNetCore.Serilog;
using Volo.Abp.Autofac;
using Volo.Abp.Caching.StackExchangeRedis;
using Volo.Abp.Data;
using Volo.Abp.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore.PostgreSql;
using Volo.Abp.EventBus.RabbitMq;
using Volo.Abp.Localization;
using Volo.Abp.Modularity;
using Volo.Abp.MultiTenancy;
using Volo.Abp.Swashbuckle;

namespace Tasky.Shared.Hosting;

[DependsOn(
    typeof(AbpAutofacModule),
    typeof(AbpDataModule),
    typeof(AbpCachingStackExchangeRedisModule),
    typeof(AbpAspNetCoreSerilogModule),
    typeof(AbpAspNetCoreMultiTenancyModule),
    typeof(AbpSwashbuckleModule),
    typeof(AbpEventBusRabbitMqModule),
    typeof(AbpEntityFrameworkCoreModule),
    typeof(AbpEntityFrameworkCorePostgreSqlModule)
)]
public class TaskyHostingModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        Configure&lt;AbpDbContextOptions&gt;(options =&gt;
        {
            options.UseNpgsql();
        });

        Configure&lt;AbpMultiTenancyOptions&gt;(options =&gt;
        {
            options.IsEnabled = true;
        });

        Configure&lt;AbpDbConnectionOptions&gt;(options =&gt;
        {
            options.Databases.Configure(&quot;SaaSService&quot;, database =&gt;
            {
                database.MappedConnections.Add(&quot;AbpTenantManagement&quot;);
                database.IsUsedByTenants = false;
            });

            options.Databases.Configure(&quot;AdministrationService&quot;, database =&gt;
            {
                database.MappedConnections.Add(&quot;AbpAuditLogging&quot;);
                database.MappedConnections.Add(&quot;AbpPermissionManagement&quot;);
                database.MappedConnections.Add(&quot;AbpSettingManagement&quot;);
                database.MappedConnections.Add(&quot;AbpFeatureManagement&quot;);
            });

            options.Databases.Configure(&quot;IdentityService&quot;, database =&gt;
            {
                database.MappedConnections.Add(&quot;AbpIdentity&quot;);
                database.MappedConnections.Add(&quot;AbpIdentityServer&quot;);
            });
        });

        Configure&lt;AbpLocalizationOptions&gt;(options =&gt;
        {
            options.Languages.Add(new LanguageInfo(&quot;ar&quot;, &quot;ar&quot;, &quot;العربية&quot;));
            options.Languages.Add(new LanguageInfo(&quot;cs&quot;, &quot;cs&quot;, &quot;Čeština&quot;));
            options.Languages.Add(new LanguageInfo(&quot;en&quot;, &quot;en&quot;, &quot;English&quot;));
            options.Languages.Add(new LanguageInfo(&quot;en-GB&quot;, &quot;en-GB&quot;, &quot;English (UK)&quot;));
            options.Languages.Add(new LanguageInfo(&quot;fi&quot;, &quot;fi&quot;, &quot;Finnish&quot;));
            options.Languages.Add(new LanguageInfo(&quot;fr&quot;, &quot;fr&quot;, &quot;Français&quot;));
            options.Languages.Add(new LanguageInfo(&quot;hi&quot;, &quot;hi&quot;, &quot;Hindi&quot;, &quot;in&quot;));
            options.Languages.Add(new LanguageInfo(&quot;is&quot;, &quot;is&quot;, &quot;Icelandic&quot;, &quot;is&quot;));
            options.Languages.Add(new LanguageInfo(&quot;it&quot;, &quot;it&quot;, &quot;Italiano&quot;, &quot;it&quot;));
            options.Languages.Add(new LanguageInfo(&quot;hu&quot;, &quot;hu&quot;, &quot;Magyar&quot;));
            options.Languages.Add(new LanguageInfo(&quot;pt-BR&quot;, &quot;pt-BR&quot;, &quot;Português&quot;));
            options.Languages.Add(new LanguageInfo(&quot;ro-RO&quot;, &quot;ro-RO&quot;, &quot;Română&quot;));
            options.Languages.Add(new LanguageInfo(&quot;ru&quot;, &quot;ru&quot;, &quot;Русский&quot;));
            options.Languages.Add(new LanguageInfo(&quot;sk&quot;, &quot;sk&quot;, &quot;Slovak&quot;));
            options.Languages.Add(new LanguageInfo(&quot;tr&quot;, &quot;tr&quot;, &quot;Türkçe&quot;));
            options.Languages.Add(new LanguageInfo(&quot;zh-Hans&quot;, &quot;zh-Hans&quot;, &quot;简体中文&quot;));
            options.Languages.Add(new LanguageInfo(&quot;zh-Hant&quot;, &quot;zh-Hant&quot;, &quot;繁體中文&quot;));
            options.Languages.Add(new LanguageInfo(&quot;de-DE&quot;, &quot;de-DE&quot;, &quot;Deutsch&quot;));
            options.Languages.Add(new LanguageInfo(&quot;es&quot;, &quot;es&quot;, &quot;Español&quot;));
        });
    }
}
</code></pre>
<p>This is the first setup of our microservice application. the package and the modules in this project will become the base of all the services.</p>
<p>Repo: https://github.com/antosubash/AbpMicroservice</p>]]></content:encoded>
          </item><item>
          <title>Initial setup</title>
          <link>https://blog.antosubash.com/posts/netcore-microservice-with-abp-init-part-1</link>
          <guid>https://blog.antosubash.com/posts/netcore-microservice-with-abp-init-part-1</guid>
          <pubDate>Fri, 18 Mar 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to do the initial setup for a abp microservice application.</description>
          <content:encoded><![CDATA[<p>This is first post of the series: <a href="/posts/abp-microservice-series">.NET Microservice with ABP</a></p>
<h2>Posts in the Series</h2>
<p>Part 1. Initial Setup (this post)</p>
<p><a href="/posts/netcore-microservice-with-abp-shared-project-part-2">Part 2. Shared Project</a></p>
<p><a href="/posts/netcore-microservice-with-abp-administration-services-part-3">Part 3. Administration Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-services-part-4">Part 4. Identity Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-saas-services-part-5">Part 5. SaaS Service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-db-migration-part-6">Part 6. DB Migration</a></p>
<p><a href="/posts/netcore-microservice-with-abp-yarp-and-tye-part-7">Part 7. Yarp and Tye</a></p>
<p><a href="/posts/netcore-microservice-with-abp-identity-server-and-angular-part-8">Part 8. Identity server and Angular App</a></p>
<p><a href="/posts/netcore-microservice-with-abp-distributed-event-bus-part-9">Part 9. Distributed event bus</a></p>
<p><a href="/posts/netcore-microservice-with-abp-docker-and-ci-cd-part-10">Part 10. Docker and CI/CD</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-new-service-part-11">Part 11. Add a New service</a></p>
<p><a href="/posts/netcore-microservice-with-abp-add-central-logging-part-12">Part 12. Central Logging</a></p>
<h2>Table of contents</h2>
<h2>Initial Setup</h2>
<p>This is the first step in creating your ABP microservice application. We will create the projects structure and the required projects for your microservice setup.</p>
<p>Most of the architecture is based on the EShopOnAbp Sample microservice application here https://github.com/abpframework/eShopOnAbp.</p>
<h2>Startup script</h2>
<p>To simplify the project creation I have created a PowerShell script which will create the required projects and folders for use. You can copy and run this file to just create your base projects. The main reason to create this PowerShell script is the get started quickly. Setting up a microservice solution is a time-consuming process <strong>this script will not create a working solution</strong>. This will only create required projects in the particular structure. I came up with this structure following the <a href="https://github.com/abpframework/eShopOnAbp">EShopOnAbp</a> application. you can update this script with your structure.</p>
<p>You can find the startup script here https://github.com/antosubash/abp-setup/blob/main/init.ps1</p>
<pre><code class="language-bash">$name = $args[0]

dotnet new web -n &quot;$name.IdentityServer&quot; -o &quot;apps\$name.IdentityServer&quot;
dotnet new web -n &quot;$name.Gateway&quot; -o &quot;gateway\$name.Gateway&quot;
dotnet new classlib -n &quot;$name.Shared.Hosting&quot; -o &quot;shared\$name.Shared.Hosting&quot;
dotnet new console -n &quot;$name.DbMigrator&quot; -o &quot;shared\$name.DbMigrator&quot;
abp new &quot;$name.AdministrationService&quot; -t module --no-ui -o services\administration
abp new &quot;$name.IdentityService&quot; -t module --no-ui -o services\identity
abp new &quot;$name.SaaSService&quot; -t module --no-ui -o services\saas
dotnet new sln -n &quot;$name&quot;
dotnet sln &quot;.\$name.sln&quot; add (Get-ChildItem -r **/*.csproj)
abp new &quot;$name&quot; -t app -u angular -dbms PostgreSQL -m none --separate-identity-server --database-provider ef -csf -o temp
Move-Item -Path &quot;.\temp\$name\angular\&quot; -Destination .\apps\angular
Move-Item -Path &quot;.\temp\$name\aspnet-core\src\$name.DbMigrator&quot; -Destination .\shared\ -Force
Move-Item -Path &quot;.\temp\$name\aspnet-core\src\$name.IdentityServer&quot; -Destination .\apps\ -Force
Remove-Item -Recurse -Force .\temp\ 
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.Installer.csproj)
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.Host.Shared.csproj)
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.MongoDB.csproj)
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.MongoDB.Tests.csproj)
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.AdministrationService.IdentityServer.csproj)
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.IdentityService.IdentityServer.csproj)
dotnet sln &quot;.\$name.sln&quot; remove (Get-ChildItem -r **/*.SaaSService.IdentityServer.csproj)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.SaaSService.IdentityServer)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.IdentityService.IdentityServer)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.AdministrationService.IdentityServer)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.MongoDB.Tests)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.MongoDB)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.Host.Shared)
Remove-Item -Recurse -Force (Get-ChildItem -r **/*.Installer)
abp add-module Volo.AuditLogging -s &quot;services\administration\$name.AdministrationService.sln&quot; --skip-db-migrations
abp add-module Volo.FeatureManagement -s &quot;services\administration\$name.AdministrationService.sln&quot; --skip-db-migrations
abp add-module Volo.PermissionManagement -s &quot;services\administration\$name.AdministrationService.sln&quot; --skip-db-migrations
abp add-module Volo.SettingManagement -s &quot;services\administration\$name.AdministrationService.sln&quot; --skip-db-migrations

abp add-module Volo.Identity -s &quot;services\identity\$name.IdentityService.sln&quot; --skip-db-migrations
abp add-module Volo.IdentityServer -s &quot;services\identity\$name.IdentityService.sln&quot; --skip-db-migrations

abp add-module Volo.TenantManagement -s &quot;services\saas\$name.SaaSService.sln&quot; --skip-db-migrations
</code></pre>
<h2>Running the startup script</h2>
<p>To run the startup script just create a new powershell script in the location where you want to create the solution and create a file called <code>init.ps1</code> and copy and past the above mentioned scripts.</p>
<p>To run the script</p>
<pre><code class="language-bash">.\init.ps1 YourProjectName
</code></pre>
<p>This will trigger the scripts and the project creation will start. Wait until the script is done and open the solution to see the created projects.</p>
<blockquote>
<p>This script will only create the project and the projects are not ready for running it.</p>
</blockquote>
<p>If you want to know more about what the script is doing please check out the video above which will have an explanation of what the script is doing.</p>
<p>Here is the sample repo with the working version of this solution: https://github.com/antosubash/AbpMicroservice</p>]]></content:encoded>
          </item><item>
          <title>Removing IdentityServer from ABP No Layer Template</title>
          <link>https://blog.antosubash.com/posts/abp-remove-identity-server-from-abp-no-layers-app</link>
          <guid>https://blog.antosubash.com/posts/abp-remove-identity-server-from-abp-no-layers-app</guid>
          <pubDate>Sun, 30 Jan 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to remove identity server from the No Layer ABP template</description>
          <content:encoded><![CDATA[]]></content:encoded>
          </item><item>
          <title>Introduction to ABP No Layer Template</title>
          <link>https://blog.antosubash.com/posts/abp-no-layer-template</link>
          <guid>https://blog.antosubash.com/posts/abp-no-layer-template</guid>
          <pubDate>Sat, 29 Jan 2022 00:00:00 GMT</pubDate>
          <description>In this post we will explore the new experimental no layer template from the ABP framework</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>ABP team released a new experimental app template with the name &quot;app-nolayers&quot;. This is a minimal single project ABP application. They have removed all the DDD projects and provided a simple starting point. This will be helpful for the new developers who are trying out the ABP framework. Developers can learn the ABP framework without the DDD complexities.</p>
<h2>Update the ABP CLI</h2>
<p>Make sure you have recent version cli before creating the app. you can also use the following command to update the cli.</p>
<pre><code class="language-bash">dotnet tool update -g Volo.Abp.Cli
</code></pre>
<h2>Creating the No Layers app</h2>
<p>To create the no layers app run the following command.</p>
<pre><code class="language-bash">abp new Acme.BookStore -t app-nolayers
</code></pre>
<p>This will create the Bookstore app as a single project application.</p>
<h2>Run the migrations</h2>
<p>Navigate to the <code>Acme.BookStore</code> folder. Since this is the no-layers application there is no migrations project. To run the migration add the &quot;--migrate-database&quot; cli argument</p>
<pre><code class="language-bash">dotnet run --migrate-database
</code></pre>
<p>This will add the migrations and seed the database for you. Database will add the <code>admin</code> user and the required permissions.</p>
<h2>Running the app</h2>
<p>To run the app use <code>dotnet watch</code> or <code>dotnet run</code>.</p>
<p>You will see a empty app running.</p>
<p>This app has all the modules of the normal abp application. you have IdentityServer configured as well.</p>]]></content:encoded>
          </item><item>
          <title>Add tailwindcss to your ABP MVC UI</title>
          <link>https://blog.antosubash.com/posts/abp-add-tailwindcss-to-dotnet-mvc</link>
          <guid>https://blog.antosubash.com/posts/abp-add-tailwindcss-to-dotnet-mvc</guid>
          <pubDate>Tue, 11 Jan 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to add tailwind css to your ABP MVC UI.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will explore how to add TailWind CSS to your ABP MVC application. We will configure tailwind and create a new landing page with tailwind. Tailwind comes with the JIT mode. so you will only use the css need not the whole library. This will result in smaller css file compared to another framework.</p>
<h2>Prerequisites</h2>
<p>Make sure to install <code>node</code>, <code>npm</code>, <code>.net6</code> and <code>abp</code></p>
<h2>Create an abp App and Run Migrations</h2>
<h3>Create the App</h3>
<p>Run the following command to create the abp app.</p>
<pre><code class="language-bash">abp new AbpTailwindMvc
</code></pre>
<h3>Run Migrations</h3>
<p>change directory to <code>src/AbpTailwindMvc.DbMigrator</code> and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will create the migrations and seed the data for your project.</p>
<h2>Install Tailwind</h2>
<p>Navigate to <code>src/AbpTailwindMvc.Web</code> project and then init npm.</p>
<h3>Install npm packages</h3>
<p>Lets add the required packages for the tailwind css.</p>
<pre><code class="language-bash">npm install -D tailwindcss postcss autoprefixer
</code></pre>
<h3>Initialize Tailwind</h3>
<p>To initialize tailwind run the following command.</p>
<pre><code class="language-bash">npx tailwindcss init --postcss
</code></pre>
<p>This will create tailwind config file <code>tailwind.config.js</code> and postcss config file <code>postcss.config.js</code></p>
<h3>Update the tailwind config</h3>
<pre><code class="language-js">module.exports = {
  content: [
    &#x27;!**/{bin,obj,node_modules}/**&#x27;,
    &#x27;**/*.{cshtml,html}&#x27;,
  ],
  theme: {
    extend: {},
  },
  corePlugins: {
    preflight: false,
  },
  //prefix: &#x27;tw-&#x27;,
  plugins: [],
}
</code></pre>
<p>We have make 2 changes in the default config.</p>
<ul>
<li>We have updated the content to look for <code>cshtml</code> and <code>html</code> files</li>
<li>We have remove the preflight</li>
</ul>
<h3>Create Tailwind css files</h3>
<p>We need to create 2 <code>css</code> files</p>
<ul>
<li><code>/Style/tailwind.css</code> // This is the input</li>
<li><code>/wwwroot/tailwind.css</code> // This is the output</li>
</ul>
<p>Update the input file with the <code>imports</code></p>
<pre><code class="language-css">@import &quot;tailwindcss/components&quot;;
@import &quot;tailwindcss/utilities&quot;;
</code></pre>
<h3>Update the package.json</h3>
<p>We will update the scripts section of the <code>package.json</code></p>
<pre><code class="language-js">&quot;scripts&quot;: {
&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
&quot;buildcss:dev&quot;: &quot;npx tailwindcss --config tailwind.config.js --postcss postcss.config.js -i ./Style/tailwind.css -o ./wwwroot/tailwind.css&quot;,
&quot;buildcss:release&quot;: &quot;npx tailwindcss --config tailwind.config.js --postcss postcss.config.js -i ./Style/tailwind.css -o ./wwwroot/tailwind.css --minify&quot;,
&quot;watch&quot;: &quot;npx tailwindcss --config tailwind.config.js --postcss postcss.config.js -i ./Style/tailwind.css -o ./wwwroot/tailwind.css --watch&quot;
},
</code></pre>
<p>We have add the 3 new scripts to the our <code>package.json</code></p>
<ul>
<li><code>buildcss:dev</code> this will build the css based on the tailwind config</li>
<li><code>buildcss:release</code> this will build minified css based on the tailwind config</li>
<li><code>watch</code> will watch for the new changes and create update the output file</li>
</ul>
<h3>Add tailwindcss to you MVC app bundle</h3>
<p>In the <code>AbpTailwindMvcWebModule</code> update the <code>ConfigureBundles</code> method</p>
<pre><code class="language-cs">Configure&lt;AbpBundlingOptions&gt;(options =&gt;
            {
                options.StyleBundles.Configure(
                    BasicThemeBundles.Styles.Global,
                    bundle =&gt;
                    {
                        bundle.AddFiles(&quot;/global-styles.css&quot;);
                        bundle.AddFiles(&quot;/tailwind.css&quot;);
                    }
                );
            });
</code></pre>
<h3>Update csproj</h3>
<p>We need to build the css before the project is launched. To do that we will update the <code>csproj</code> and create a build task.</p>
<pre><code class="language-xml">&lt;Target Name=&quot;BuildCSS&quot; BeforeTargets=&quot;Compile&quot;&gt;
    &lt;Exec Command=&quot;npm run buildcss:dev&quot; Condition=&quot; &#x27;$(Configuration)&#x27; == &#x27;Debug&#x27; &quot; /&gt;
    &lt;Exec Command=&quot;npm run buildcss:release&quot; Condition=&quot; &#x27;$(Configuration)&#x27; == &#x27;Release&#x27; &quot; /&gt;
&lt;/Target&gt;
</code></pre>
<p>This command will run the npm command before the build so that we will have our css complied and ready to be displayed.</p>
<h3>Usage</h3>
<p>To apply a background color use <code>bg-gray-200</code> you will see the color change.</p>
<p>Repo: https://github.com/antosubash/AbpTailwindMvcUI</p>]]></content:encoded>
          </item><item>
          <title>Generate typescript client from swagger / OpenApi</title>
          <link>https://blog.antosubash.com/posts/abp-generate-typescript-client-from-swagger-and-openapi</link>
          <guid>https://blog.antosubash.com/posts/abp-generate-typescript-client-from-swagger-and-openapi</guid>
          <pubDate>Sat, 08 Jan 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to use how to use the NSwag to generate a typescript client with ABP</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to use NSwag to generate typescript client from swagger and open api. We will use abp as a sample app and generate typescript client.</p>
<h2>Create an abp App and Run Migrations</h2>
<h3>Create the App</h3>
<p>Run the following command to create the abp app.</p>
<pre><code class="language-bash">abp new AbpNSwag
</code></pre>
<h3>Run Migrations</h3>
<p>change directory to <code>src/AbpNSwag.DbMigrator</code> and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<h2>Fix the type name in the swagger</h2>
<h3>Create type extension</h3>
<p>Change the custom schema id for NSwag generation</p>
<pre><code class="language-cs">using System;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace AbpNSwag
{
    public static class TypeExtensions
    {
        public static string FriendlyId(this Type type, bool fullyQualified = false)
        {
            var typeName = fullyQualified
                ? type.FullNameSansTypeParameters().Replace(&quot;+&quot;, &quot;.&quot;)
                : type.Name;

            if (type.IsGenericType)
            {
                var genericArgumentIds = type.GetGenericArguments()
                    .Select(t =&gt; t.FriendlyId(fullyQualified))
                    .ToArray();

                return new StringBuilder(typeName)
                    .Replace(string.Format(&quot;`{0}&quot;, genericArgumentIds.Count()), string.Empty)
                    .Append(string.Format(&quot;[{0}]&quot;, string.Join(&quot;,&quot;, genericArgumentIds).TrimEnd(&#x27;,&#x27;)))
                    .ToString();
            }

            return typeName;
        }

        public static string FullNameSansTypeParameters(this Type type)
        {
            var fullName = type.FullName;
            if (string.IsNullOrEmpty(fullName))
                fullName = type.Name;
            var chopIndex = fullName.IndexOf(&quot;[[&quot;);
            return (chopIndex == -1) ? fullName : fullName.Substring(0, chopIndex);
        }

        public static string[] GetEnumNamesForSerialization(this Type enumType)
        {
            return enumType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static)
                .Select(fieldInfo =&gt;
                {
                    var memberAttribute = fieldInfo.GetCustomAttributes(false).OfType&lt;EnumMemberAttribute&gt;().FirstOrDefault();
                    return (memberAttribute == null || string.IsNullOrWhiteSpace(memberAttribute.Value))
                        ? fieldInfo.Name
                        : memberAttribute.Value;
                })
                .ToArray();
        }
    }
}
</code></pre>
<p>This file is copied from the here https://github.com/domaindrivendev/Swashbuckle.WebApi/blob/master/Swashbuckle.Core/Swagger/TypeExtensions.cs</p>
<h3>Change the custom schema id and operation id</h3>
<p>Update <code>AddAbpSwaggerGenWithOAuth</code> method call in your web project.</p>
<pre><code class="language-cs">options.CustomSchemaIds(type =&gt; type.FriendlyId().Replace(&quot;[&quot;, &quot;Of&quot;).Replace(&quot;]&quot;, &quot;&quot;));
options.CustomOperationIds(options =&gt; $&quot;{options.ActionDescriptor.RouteValues[&quot;controller&quot;]}{options.ActionDescriptor.RouteValues[&quot;action&quot;]}&quot;);
</code></pre>
<p>this will fix the generic list problem and simplify the name in the swagger ui.</p>
<p>Now we are ready to generate the typescript client.</p>
<h2>Install NSwag</h2>
<pre><code class="language-bash">npm install nswag -g
</code></pre>
<h2>Generate typescript client</h2>
<pre><code class="language-bash">nswag openapi2tsclient /input:https://localhost:44392/swagger/v1/swagger.json /output:generated/MyProjectModels.ts /typeScriptTemplate Axios
</code></pre>
<p>This will generate the <code>Axios</code> client for you to use.</p>
<h2>Other generators</h2>
<p>Other options is to use the <code>openapi-typescript-codegen</code> package. Install the package globally.</p>
<pre><code class="language-bash">npm install openapi-typescript-codegen -g
</code></pre>
<p>create the local copy of swagger json from here https://localhost:44392/swagger/v1/swagger.json now we can use this json file to generate type script client.</p>
<pre><code class="language-bash">openapi -i swagger.json -o api -c axios
</code></pre>
<p>this will generate axios client with proper structure.</p>
<p>Repo : https://github.com/antosubash/AbpNSwag</p>]]></content:encoded>
          </item><item>
          <title>Add tailwindcss to your ABP Blazor UI</title>
          <link>https://blog.antosubash.com/posts/abp-add-tailwindcss-to-blazor-ui</link>
          <guid>https://blog.antosubash.com/posts/abp-add-tailwindcss-to-blazor-ui</guid>
          <pubDate>Wed, 05 Jan 2022 00:00:00 GMT</pubDate>
          <description>In this post we will see how to add tailwind css to your ABP Blazor UI.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will explore how to add TailWind CSS to your ABP Blazor application. We will configure tailwind in a way that it will not conflict with your current bootstrap theme. Tailwind comes with the JIT mode. so you will only use the css need not the whole library. This will result in smaller css file compared to another framework.</p>
<h2>Prerequisites</h2>
<p>Make sure to install <code>node</code>, <code>npm</code>, <code>.net6</code> and <code>abp</code></p>
<h2>Create an abp App and Run Migrations</h2>
<h3>Create the App</h3>
<p>Run the following command to create the abp app.</p>
<pre><code class="language-bash">abp new AbpTailwindBlazor -t app -u blazor --mobile none
</code></pre>
<h3>Run Migrations</h3>
<p>change directory to <code>src/AbpTailwindBlazor.DbMigrator</code> and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will create the migrations and seed the data for your project.</p>
<h2>Install Tailwind</h2>
<p>Navigate to <code>src/AbpTailwindBlazor.Blazor</code> project and then init npm.</p>
<h3>Init Npm</h3>
<p>To init npm run the following command.</p>
<pre><code class="language-bash">npm init --yes
</code></pre>
<p>This will create the <code>package.json</code> file with the default values.</p>
<h3>Install npm packages</h3>
<p>Lets add the required packages for the tailwind css.</p>
<pre><code class="language-bash">npm install -D tailwindcss postcss autoprefixer
</code></pre>
<h3>Initialize Tailwind</h3>
<p>To initialize tailwind run the following command.</p>
<pre><code class="language-bash">npx tailwindcss init --postcss
</code></pre>
<p>This will create tailwind config file <code>tailwind.config.js</code> and postcss config file <code>postcss.config.js</code></p>
<h3>Update the tailwind config</h3>
<pre><code class="language-js">module.exports = {
  content: [
    &#x27;!**/{bin,obj,node_modules}/**&#x27;,
    &#x27;**/*.{razor,html}&#x27;,
  ],
  theme: {
    extend: {},
  },
  corePlugins: {
    preflight: false,
  },
  prefix: &#x27;tw-&#x27;,
  plugins: [],
}
</code></pre>
<p>We have make 3 changes in the default config.</p>
<ul>
<li>We have updated the content to look for <code>razor</code> and <code>html</code> files</li>
<li>We have remove the preflight</li>
<li>We have add <code>prefix</code> to all the tailwind css</li>
</ul>
<h3>Create Tailwind css files</h3>
<p>We need to create 2 <code>css</code> files</p>
<ul>
<li><code>/Style/tailwind.css</code> // This is the input</li>
<li><code>/wwwroot/tailwind.css</code> // This is the output</li>
</ul>
<p>Update the input file with the <code>imports</code></p>
<pre><code class="language-css">@import &quot;tailwindcss/components&quot;;
@import &quot;tailwindcss/utilities&quot;;
</code></pre>
<h3>Update the package.json</h3>
<p>We will update the scripts section of the <code>package.json</code></p>
<pre><code class="language-js">&quot;scripts&quot;: {
&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
&quot;buildcss:dev&quot;: &quot;npx tailwindcss --config tailwind.config.js --postcss postcss.config.js -i ./Style/tailwind.css -o ./wwwroot/tailwind.css&quot;,
&quot;buildcss:release&quot;: &quot;npx tailwindcss --config tailwind.config.js --postcss postcss.config.js -i ./Style/tailwind.css -o ./wwwroot/tailwind.css --minify&quot;,
&quot;watch&quot;: &quot;npx tailwindcss --config tailwind.config.js --postcss postcss.config.js -i ./Style/tailwind.css -o ./wwwroot/tailwind.css --watch&quot;
},
</code></pre>
<p>We have add the 3 new scripts to the our <code>package.json</code></p>
<ul>
<li><code>buildcss:dev</code> this will build the css based on the tailwind config</li>
<li><code>buildcss:release</code> this will build minified css based on the tailwind config</li>
<li><code>watch</code> will watch for the new changes and create update the output file</li>
</ul>
<h3>Update the Index page</h3>
<p>The Index page is the <code>index.html</code> file inside the <code>wwwroot</code> folder.</p>
<p>We have add our generated css file to the blazor.</p>
<pre><code class="language-html">&lt;link href=&quot;tailwind.css&quot; rel=&quot;stylesheet&quot;/&gt;
</code></pre>
<h3>Update csproj</h3>
<p>We need to build the css before the project is launched. To do that we will update the <code>csproj</code> and create a build task.</p>
<pre><code class="language-xml">&lt;Target Name=&quot;BuildCSS&quot; BeforeTargets=&quot;Compile&quot;&gt;
    &lt;Exec Command=&quot;npm run buildcss:dev&quot; Condition=&quot; &#x27;$(Configuration)&#x27; == &#x27;Debug&#x27; &quot; /&gt;
    &lt;Exec Command=&quot;npm run buildcss:release&quot; Condition=&quot; &#x27;$(Configuration)&#x27; == &#x27;Release&#x27; &quot; /&gt;
&lt;/Target&gt;
</code></pre>
<p>This command will run the npm command before the build so that we will have our css complied and ready to be displayed.</p>
<h3>Usage</h3>
<p>To use the tailwind css you should use the <code>tw-</code> prefix. so to apply a background color use <code>tw-bg-gray-200</code> you will see the color change.</p>
<p>Repo: https://github.com/antosubash/AbpTailwindBlazor</p>]]></content:encoded>
          </item><item>
          <title>Minimal Api with ABP - Swagger and CRUD - Part 3</title>
          <link>https://blog.antosubash.com/posts/abp-crud-with-minimal-api-p3</link>
          <guid>https://blog.antosubash.com/posts/abp-crud-with-minimal-api-p3</guid>
          <pubDate>Fri, 31 Dec 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to use minimal api with the ABP application to create a CRUD app.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this we will continue with the last one and create a CRUD API with Minimal API.</p>
<p>This is a continuation of <a href="https://blog.antosubash.com/posts/abp-with-minimal-api-p2">Part 2</a></p>
<h2>Create the project</h2>
<pre><code class="language-bash">dotnet new web -n MinimalAbpCRUD
</code></pre>
<p>Navigate to the <code>MinimalAbpCRUD</code> folder and add the required packages.</p>
<h2>Add required packages</h2>
<p>To add the required packages use the <code>dotnet add package</code> command.</p>
<pre><code class="language-bash">dotnet add package Volo.Abp.Autofac
dotnet add package Volo.Abp.AspNetCore.Mvc
dotnet add package Swashbuckle.AspNetCore 
dotnet add package Volo.Abp.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Design
</code></pre>
<h2>Create Entity</h2>
<p>We will create a simple <code>Book</code> Entity.</p>
<pre><code class="language-cs">public class Book : AuditedAggregateRoot&lt;Guid&gt;
{
    public Book(Guid id, string name)
    {
        this.Id = id;
        this.Name = name;
    }
    public string Name { get; set; }
}
</code></pre>
<h2>Create DB Context</h2>
<pre><code class="language-cs">public class MyDbContext : AbpDbContext&lt;MyDbContext&gt;
{
    public DbSet&lt;Book&gt; Books =&gt; Set&lt;Book&gt;();

    public MyDbContext(DbContextOptions&lt;MyDbContext&gt; options)
        : base(options)
    {
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);
        optionsBuilder.UseSqlite();
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);
        builder.Entity&lt;Book&gt;(b =&gt;
        {
            b.ToTable(&quot;Books&quot;);
            b.ConfigureByConvention();
            b.HasData(new Book(Guid.NewGuid(),&quot;My Book&quot;));
        });
    }
}
</code></pre>
<p>This db context will configure the entity and also seed the database with one data.</p>
<h2>Create the minimal module</h2>
<pre><code class="language-cs">[DependsOn(
    typeof(AbpAspNetCoreMvcModule),
    typeof(AbpAutofacModule),
    typeof(AbpEntityFrameworkCoreSqliteModule)
)]
public class MinimalModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {  
        context.Services.AddEndpointsApiExplorer();
        context.Services.AddSwaggerGen();   
        context.Services.AddAbpDbContext&lt;MyDbContext&gt;(options =&gt;
        {
            options.AddDefaultRepositories(includeAllEntities: true);
        }); 
        Configure&lt;AbpDbContextOptions&gt;(options =&gt;
        {
            options.UseSqlite();
        });
    }

    public override void OnApplicationInitialization(ApplicationInitializationContext context)
    {
        var app = context.GetApplicationBuilder();
        var env = context.GetEnvironment();
        if (env.IsDevelopment())
        {
            app.UseSwagger();
            app.UseSwaggerUI();
        }
        app.UseHttpsRedirection();
    }
}
</code></pre>
<h2>Create the minimal api</h2>
<pre><code class="language-cs">var builder = WebApplication.CreateBuilder(args);
builder.Host.AddAppSettingsSecretsJson().UseAutofac();
builder.Services.ReplaceConfiguration(builder.Configuration);
builder.Services.AddApplication&lt;MinimalModule&gt;();
var app = builder.Build();

app.MapGet(&quot;/book&quot;, async ([FromServices] IRepository&lt;Book, Guid&gt; repository) =&gt;
{
    return await repository.GetListAsync();
});

app.MapPost(&quot;/book&quot;, async (string name, [FromServices] IRepository&lt;Book, Guid&gt; repository) =&gt;
{
    var newBook = await repository.InsertAsync(new Book(Guid.NewGuid(),name));
    return Results.Created($&quot;/book/{newBook.Id}&quot;, newBook);
});

app.MapPut(&quot;/book/{id}&quot;, async (Guid id, string name, [FromServices] IRepository&lt;Book, Guid&gt; repository) =&gt;
{
    var book = await repository.GetAsync(id);
    book.Name = name;
    return await repository.UpdateAsync(book);
});

app.MapDelete(&quot;/book/{id}&quot;, async (Guid id, [FromServices] IRepository&lt;Book, Guid&gt; repository) =&gt;
{
    var book = await repository.GetAsync(id);
    await repository.DeleteAsync(id);
});

app.InitializeApplication();
app.Run();
</code></pre>
<h2>Add connection string</h2>
<p>update the <code>appsettings.json</code> with the <code>ConnectionStrings</code></p>
<pre><code class="language-js">&quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;Filename=./db.sqlite&quot;
}
</code></pre>
<h2>Create migration</h2>
<p>Now our app is ready lets create migrations for the DBcontext.</p>
<pre><code class="language-bash">dotnet ef migrations add init
</code></pre>
<h2>Apply migrations to DB</h2>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>Run the App</h2>
<pre><code class="language-bash">dotnet run
</code></pre>
<h2>View the Book</h2>
<p>Once the application is launched navigate to <code>/swagger</code> you will see swagger UI.</p>
<p>Repo : https://github.com/antosubash/AbpMinimalApiCRUD</p>]]></content:encoded>
          </item><item>
          <title>Minimal Api with ABP - EF Core - Part 2</title>
          <link>https://blog.antosubash.com/posts/abp-with-minimal-api-p2</link>
          <guid>https://blog.antosubash.com/posts/abp-with-minimal-api-p2</guid>
          <pubDate>Thu, 30 Dec 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to use minimal api with the ABP application and configure EF core.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this we will continue with the last one and add Ef core to our Minimal ABP module.</p>
<p>This is a continuation of <a href="https://blog.antosubash.com/posts/abp-with-minimal-api-p1">Part 1</a></p>
<h2>Create the project</h2>
<pre><code class="language-bash">dotnet new web -n MinimalEFWithAbp
</code></pre>
<p>Navigate to the <code>MinimalEFWithAbp</code> folder and add the required packages.</p>
<h2>Add required packages</h2>
<p>To add the required packages use the <code>dotnet add package</code> command.</p>
<pre><code class="language-bash">dotnet add package Volo.Abp.Autofac
dotnet add package Volo.Abp.AspNetCore.Mvc
dotnet add package Volo.Abp.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Design
</code></pre>
<h2>Create Entity</h2>
<p>We will create a simple <code>Book</code> Entity.</p>
<pre><code class="language-cs">public class Book : AuditedAggregateRoot&lt;Guid&gt;
{
    public Book(Guid id, string name)
    {
        this.Id = id;
        this.Name = name;
    }
    public string Name { get; set; }
}
</code></pre>
<h2>Create DB Context</h2>
<pre><code class="language-cs">public class MyDbContext : AbpDbContext&lt;MyDbContext&gt;
{
    public DbSet&lt;Book&gt; Books =&gt; Set&lt;Book&gt;();

    public MyDbContext(DbContextOptions&lt;MyDbContext&gt; options)
        : base(options)
    {
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);
        optionsBuilder.UseSqlite();
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);
        builder.Entity&lt;Book&gt;(b =&gt;
        {
            b.ToTable(&quot;Books&quot;);
            b.ConfigureByConvention();
            b.HasData(new Book(Guid.NewGuid(),&quot;My Book&quot;));
        });
    }
}
</code></pre>
<p>This db context will configure the entity and also seed the database with one data.</p>
<h2>Create the minimal module</h2>
<pre><code class="language-cs">[DependsOn(
    typeof(AbpAspNetCoreMvcModule),
    typeof(AbpAutofacModule),
    typeof(AbpEntityFrameworkCoreSqliteModule)
)]
public class MinimalModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {     
        context.Services.AddAbpDbContext&lt;MyDbContext&gt;(options =&gt;
        {
            options.AddDefaultRepositories(includeAllEntities: true);
        }); 
        Configure&lt;AbpDbContextOptions&gt;(options =&gt;
        {
            options.UseSqlite();
        });
    }
}
</code></pre>
<h2>Create the minimal api</h2>
<pre><code class="language-cs">var builder = WebApplication.CreateBuilder(args);
builder.Host.AddAppSettingsSecretsJson()
    .UseAutofac();
builder.Services.ReplaceConfiguration(builder.Configuration);
builder.Services.AddApplication&lt;MinimalModule&gt;();
var app = builder.Build();

app.MapGet(&quot;/book&quot;, async ([FromServices] IRepository&lt;Book, Guid&gt; repository) =&gt;
{
    return await repository.GetListAsync();
});

app.InitializeApplication();
app.Run();
</code></pre>
<p>We have one <code>GET</code> request which will return the data from the db.</p>
<h2>Add connection string</h2>
<p>update the <code>appsettings.json</code> with the <code>ConnectionStrings</code></p>
<pre><code class="language-js">&quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;Filename=./db.sqlite&quot;
}
</code></pre>
<h2>Create migration</h2>
<p>Now our app is ready lets create migrations for the DBcontext.</p>
<pre><code class="language-bash">dotnet ef migrations add init
</code></pre>
<h2>Apply migrations to DB</h2>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>Run the App</h2>
<pre><code class="language-bash">dotnet run
</code></pre>
<h2>View the Book</h2>
<p>Once the application is launched navigate to <code>/book</code> you will see the seeded book as a json response.</p>
<p>Repo : https://github.com/antosubash/AbpMinimalApiWithEFCore</p>]]></content:encoded>
          </item><item>
          <title>Minimal Api with ABP - Hello World - Part 1</title>
          <link>https://blog.antosubash.com/posts/abp-with-minimal-api-p1</link>
          <guid>https://blog.antosubash.com/posts/abp-with-minimal-api-p1</guid>
          <pubDate>Wed, 29 Dec 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to use minimal api with the ABP application.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>Minimal api in .Net 6 provides a new way for creating http api. Minimal API provides simplicity and removes lot of boilerplate. We will see how to use the minimal api with ABP.</p>
<h2>Hello world</h2>
<p>First lets create a empty c# project.</p>
<pre><code class="language-bash">dotnet new web -n HelloWorld
</code></pre>
<p>This will create a empty hello world project.</p>
<p>Let add the abp packages.</p>
<pre><code class="language-bash">dotnet add package Volo.Abp.Autofac
dotnet add package Volo.Abp.AspNetCore.Mvc
</code></pre>
<h3>Minimal Module</h3>
<p>lets create a very simple module.</p>
<pre><code class="language-cs">[DependsOn(
    typeof(AbpAspNetCoreMvcModule),
    typeof(AbpAutofacModule)
)]
public class MinimalModule : AbpModule
{
}
</code></pre>
<p>This module depends on <code>AbpAspNetCoreMvcModule</code> and <code>AbpAutofacModule</code>. The configure service method is used to register the assembly of <code>MinimalModule</code> for dependency injection.</p>
<h3>Hello service</h3>
<p>lets create a simple service which will say hello world.</p>
<pre><code class="language-cs">public class HelloService : ITransientDependency
{
    public string SayHi()
    {
        return &quot;Hi from service&quot;;
    }
}
</code></pre>
<h3>Minimal Application</h3>
<p>Lets create the minimal application</p>
<pre><code class="language-cs">using Volo.Abp;
using Microsoft.AspNetCore.Mvc;
using Volo.Abp.AspNetCore.Mvc;
using Volo.Abp.Autofac;
using Volo.Abp.Modularity;
using Volo.Abp.DependencyInjection;
var builder = WebApplication.CreateBuilder(args);
builder.Host.UseAutofac();
builder.Services.ReplaceConfiguration(builder.Configuration);
builder.Services.AddApplication&lt;MinimalModule&gt;();

var app = builder.Build();

app.MapGet(&quot;/hi&quot;, ([FromServices] HelloService helloService) =&gt;
{
    return helloService.SayHi();
});

app.InitializeApplication();
app.Run();
</code></pre>
<p>This application has only one end point <code>/hi</code> which prints hello world. We are Injecting the hello world service we created and then we are calling the <code>SayHi</code> method from the service.</p>
<p>To run the app.</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>Repo: https://github.com/antosubash/AbpMinimalApiHelloWorld</p>]]></content:encoded>
          </item><item>
          <title>Add a new Module and convert it to a microservice in ABP</title>
          <link>https://blog.antosubash.com/posts/abp-module-to-microservice</link>
          <guid>https://blog.antosubash.com/posts/abp-module-to-microservice</guid>
          <pubDate>Sat, 27 Nov 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to create a modular abp application and convert it to microservice. We will add a new module to tiered abp app and then use the separate database to store the modules data and then convert the module to a microservice..</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to create a modular abp application and convert it to microservice. We will add a new module to tiered abp app and then use the separate database to store the modules data and then convert the module to a microservice.</p>
<p>In this sample we will create Tiered app which is called <code>MainApp</code>. Then we will add a module called <code>ProjectService</code>.</p>
<h2>Creating the abp application and run migrations</h2>
<pre><code class="language-bash">abp new MainApp -t app -u mvc --tiered
</code></pre>
<h2>Run Migrations</h2>
<p>Change directory to src/MainApp.DbMigrator and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will apply the migrations to the db and we can run the <code>MainApp.Web</code> project. This will host the UI and API..</p>
<h2>Add a new Module</h2>
<p>Now we will add a new module to our MainApp. Move back to the <code>root</code> folder of your project.</p>
<pre><code class="language-bash">abp add-module ProjectService --new
</code></pre>
<p>This will create a ProjectService and it will be available in the modules folder.</p>
<h2>Add and configure the host to the module</h2>
<p>We need to add a host for our module. first we have to navigate to the the src folder of the Module.</p>
<pre><code class="language-bash">cd .\modules\ProjectService\src\
</code></pre>
<p>Now lets create a Web Api project to host our module.</p>
<pre><code class="language-bash">dotnet new webapi -n ProjectService.HttpApi.Host
</code></pre>
<p>Now open the ProjectService solution and the newly created Host project to the solution.</p>
<p>Update the <code>appsettings.json</code> with the following</p>
<pre><code class="language-json">{
  &quot;App&quot;: {
    &quot;SelfUrl&quot;: &quot;{Host Url}&quot;,
    &quot;CorsOrigins&quot;: &quot;https://*.MainApp.com&quot;
  },
  &quot;AuthServer&quot;: {
    &quot;Authority&quot;: &quot;{ Identity Server Url }&quot;,
    &quot;RequireHttpsMetadata&quot;: &quot;true&quot;,
    &quot;SwaggerClientId&quot;: &quot;ProjectService_Swagger&quot;,
    &quot;SwaggerClientSecret&quot;: &quot;1q2w3e*&quot;
  },
  &quot;ConnectionStrings&quot;: {
    &quot;ProjectService&quot;: &quot;Server=(LocalDb)\\MSSQLLocalDB;Database=ProjectService;Trusted_Connection=True&quot;
  },
  &quot;Redis&quot;: {
    &quot;Configuration&quot;: &quot;127.0.0.1&quot;
  },
  &quot;Logging&quot;: {
    &quot;LogLevel&quot;: {
      &quot;Default&quot;: &quot;Information&quot;,
      &quot;Microsoft&quot;: &quot;Warning&quot;,
      &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot;
    }
  }
}
</code></pre>
<p>Add the following packages to the <code>ProjectService.HttpApi.Host</code> project.</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;PackageReference Include=&quot;Serilog.AspNetCore&quot; Version=&quot;4.1.0&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.AspNetCore.MultiTenancy&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.Autofac&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.Core&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore.SqlServer&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.Swashbuckle&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.AspNetCore.Authentication.JwtBearer&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Volo.Abp.AspNetCore.Serilog&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Serilog.Extensions.Logging&quot; Version=&quot;3.0.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Serilog.Sinks.Async&quot; Version=&quot;1.4.0&quot; /&gt;
    &lt;PackageReference Include=&quot;Serilog.Sinks.File&quot; Version=&quot;4.1.0&quot; /&gt;
    &lt;PackageReference Include=&quot;Serilog.Sinks.Console&quot; Version=&quot;3.1.1&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>These are the essential packages for our host.</p>
<p>Add <code>ProjectService.Application</code>, <code>ProjectService.EntityFrameworkCore</code>, <code>ProjectService.HttpApi</code> projects as a reference to your <code>ProjectService.HttpApi.Host</code></p>
<p>We are adding the projects reference because the host project module will depend on the module from these projects.</p>
<p>Create a <code>ProjectServiceHostModule</code> in the newly created <code>ProjectService.HttpApi.Host</code>. This will be a abp module where we will setup the host.</p>
<p>Here is the sample for the <code>ProductService</code>.</p>
<pre><code class="language-cs">using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Cors;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using ProjectService.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using Volo.Abp;
using Volo.Abp.AspNetCore.MultiTenancy;
using Volo.Abp.AspNetCore.Mvc;
using Volo.Abp.AspNetCore.Serilog;
using Volo.Abp.Autofac;
using Volo.Abp.Modularity;
using Volo.Abp.Swashbuckle;

namespace ProjectService.HttpApi.Host
{

    [DependsOn(
    typeof(ProjectServiceHttpApiModule),
    typeof(ProjectServiceApplicationModule),
    typeof(ProjectServiceEntityFrameworkCoreModule),
    typeof(AbpAspNetCoreMultiTenancyModule),
    typeof(AbpAutofacModule),
    typeof(AbpAspNetCoreSerilogModule),
    typeof(AbpSwashbuckleModule)
    )]
    public class ProjectServiceHostModule : AbpModule
    {
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            var configuration = context.Services.GetConfiguration();
            context.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =&gt;
                {
                    options.Authority = configuration[&quot;AuthServer:Authority&quot;];
                    options.RequireHttpsMetadata = Convert.ToBoolean(configuration[&quot;AuthServer:RequireHttpsMetadata&quot;]);
                    options.Audience = &quot;ProjectService&quot;;
                });

            context.Services.AddAbpSwaggerGenWithOAuth(
                configuration[&quot;AuthServer:Authority&quot;],
                new Dictionary&lt;string, string&gt;
                {
                    {&quot;ProjectService&quot;, &quot;ProjectService API&quot;}
                },
                options =&gt;
                {
                    options.SwaggerDoc(&quot;v1&quot;, new OpenApiInfo { Title = &quot;ProjectService API&quot;, Version = &quot;v1&quot; });
                    options.DocInclusionPredicate((docName, description) =&gt; true);
                    options.CustomSchemaIds(type =&gt; type.FullName);
                });

            Configure&lt;AbpAspNetCoreMvcOptions&gt;(options =&gt;
            {
                options.ConventionalControllers.Create(typeof(ProjectServiceApplicationModule).Assembly);
            });

            context.Services.AddCors(options =&gt;
            {
                options.AddDefaultPolicy(builder =&gt;
                {
                    builder
                        .WithOrigins(
                            configuration[&quot;App:CorsOrigins&quot;]
                                .Split(&quot;,&quot;, StringSplitOptions.RemoveEmptyEntries)
                                .Select(o =&gt; o.Trim().RemovePostFix(&quot;/&quot;))
                                .ToArray()
                        )
                        .WithAbpExposedHeaders()
                        .SetIsOriginAllowedToAllowWildcardSubdomains()
                        .AllowAnyHeader()
                        .AllowAnyMethod()
                        .AllowCredentials();
                });
            });
        }

        public override void OnApplicationInitialization(ApplicationInitializationContext context)
        {
            var app = context.GetApplicationBuilder();
            var env = context.GetEnvironment();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseCorrelationId();
            app.UseCors();
            app.UseAbpRequestLocalization();
            app.UseStaticFiles();
            app.UseRouting();
            app.UseAuthentication();
            app.UseAbpClaimsMap();
            app.UseMultiTenancy();
            app.UseAuthorization();
            app.UseSwagger();
            app.UseAbpSwaggerUI(options =&gt; {
                options.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;ProjectService Service API&quot;);
                var configuration = context.ServiceProvider.GetRequiredService&lt;IConfiguration&gt;();
                options.OAuthClientId(configuration[&quot;AuthServer:SwaggerClientId&quot;]); 
                options.OAuthClientSecret(configuration[&quot;AuthServer:SwaggerClientSecret&quot;]); 
            });
            app.UseAbpSerilogEnrichers();
            app.UseAuditing();
            app.UseUnitOfWork();
            app.UseConfiguredEndpoints();
        }
    }
}
</code></pre>
<p>In this module the depends on section configures the modules that it depends on in the <code>DependsOn</code> section and we will configure the JWT auth and the swagger UI for the host.</p>
<p>Update the <code>Program.cs</code></p>
<pre><code class="language-cs">using System;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Serilog;
using Serilog.Events;

namespace ProjectService
{
    public class Program
    {
        public static int Main(string[] args)
        {
            Log.Logger = new LoggerConfiguration()
#if DEBUG
                .MinimumLevel.Debug()
#else
                .MinimumLevel.Information()
#endif
                .MinimumLevel.Override(&quot;Microsoft&quot;, LogEventLevel.Information)
                .MinimumLevel.Override(&quot;Microsoft.EntityFrameworkCore&quot;, LogEventLevel.Warning)
                .Enrich.FromLogContext()
                .WriteTo.Async(c =&gt; c.File(&quot;Logs/logs.txt&quot;))
#if DEBUG
                .WriteTo.Async(c =&gt; c.Console())
#endif
                .CreateLogger();

            try
            {
                Log.Information(&quot;Starting ProjectService.Host.&quot;);
                CreateHostBuilder(args).Build().Run();
                return 0;
            }
            catch (Exception ex)
            {
                Log.Fatal(ex, &quot;Host terminated unexpectedly!&quot;);
                return 1;
            }
            finally
            {
                Log.CloseAndFlush();
            }
        }

        internal static IHostBuilder CreateHostBuilder(string[] args) =&gt;
            Host.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration(build =&gt;
                {
                    build.AddJsonFile(&quot;appsettings.secrets.json&quot;, optional: true);
                })
                .ConfigureWebHostDefaults(webBuilder =&gt;
                {
                    webBuilder.UseStartup&lt;Startup&gt;();
                })
                .UseAutofac()
                .UseSerilog();
    }

}
</code></pre>
<p>Program file is updated to use the serilog with enrichers.</p>
<p>Update the <code>Startup.cs</code></p>
<pre><code class="language-cs">using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using ProjectService.HttpApi.Host;

namespace ProjectService
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddApplication&lt;ProjectServiceHostModule&gt;();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            app.InitializeApplication();
        }
    }
}
</code></pre>
<p>In the startup file we are configuring our newly created Host module.</p>
<p>Create a <code>HomeController.cs</code> in the <code>Controller</code> folder and update wit the following text.</p>
<pre><code class="language-cs">using Microsoft.AspNetCore.Mvc;
using Volo.Abp.AspNetCore.Mvc;

namespace ProjectService.HttpApi.Host.Controllers
{
    public class HomeController : AbpController
    {
        public ActionResult Index()
        {
            return Redirect(&quot;~/swagger&quot;);
        }
    }
}
</code></pre>
<p>Now our default route will be swagger.</p>
<p>We are mostly done with the host and now we can create the AppService.</p>
<h2>Add new Entity to the ProjectService</h2>
<p>We are going to create a simple <code>Project</code> entity and create a AppService for that project. This section of the tutorial is based on the <a href="https://docs.abp.io/en/abp/latest/Tutorials/Todo/Index?UI=MVC&amp;DB=EF">Quick Start Guide</a></p>
<p>We will create a new Entity inside the <code>ProjectService.Domain</code> called <code>Project</code>.</p>
<h2>Create an Entity</h2>
<p>Learn more about the <a href="https://docs.abp.io/en/abp/latest/Entities">Entity</a> in the abp docs.</p>
<p>First step is to create an Entity. Create the Entity in the <code>ProjectService.Domain</code> project.</p>
<pre><code class="language-cs">public class Project : Entity&lt;Guid&gt;
{
    public string Name { get; set; }
}
</code></pre>
<h2>Add Entity to EfCore</h2>
<p>Learn more about the <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core">ef core</a> in the abp docs.</p>
<p>Next is to add Entity to the EF Core. you will find the DbContext in the <code>ProjectService.EntityFrameworkCore</code> project. Add the DbSet to the DbContext</p>
<pre><code class="language-cs">public DbSet&lt;Project&gt; Projects { get; set; }
</code></pre>
<h2>Configure Entity in EfCore</h2>
<p>Make sure you have the updated the ef core global tool</p>
<p>Configuration is done in the <code>DbContextModelCreatingExtensions</code> class. This should be available in the <code>ProjectService.EntityFrameworkCore</code> project</p>
<pre><code class="language-cs">builder.Entity&lt;Project&gt;(b =&gt;
{
    //Configure table &amp; schema name
    b.ToTable(ProjectServiceDbProperties.DbTablePrefix + &quot;Projects&quot;, ProjectServiceDbProperties.Schema);

    b.ConfigureByConvention();
});
</code></pre>
<h2>Prepare for the migration</h2>
<pre><code class="language-bash">dotnet tool update --global dotnet-ef
</code></pre>
<p>Add necessary packages to the <code>ProjectService.EntityFrameworkCore</code> project.</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Design&quot; Version=&quot;6.0.0&quot;&gt;
    &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
    &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
&lt;/PackageReference&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
&lt;PackageReference Include=&quot;Volo.Abp.EntityFrameworkCore.SqlServer&quot; Version=&quot;5.0.0-rc.1&quot; /&gt;
</code></pre>
<p>We need to create a <code>ProjectServiceDbContextFactory</code> to support migrations. <a href="https://docs.microsoft.com/en-us/ef/core/cli/dbcontext-creation?tabs=dotnet-core-cli">Check here for more info about this</a></p>
<pre><code class="language-cs">public class ProjectServiceDbContextFactory : IDesignTimeDbContextFactory&lt;ProjectServiceDbContext&gt;
{
    public ProjectServiceDbContext CreateDbContext(string[] args)
    {
        var builder = new DbContextOptionsBuilder&lt;ProjectServiceDbContext&gt;()
            .UseSqlServer(GetConnectionStringFromConfiguration());
        return new ProjectServiceDbContext(builder.Options);
    }

    private static string GetConnectionStringFromConfiguration()
    {
        return BuildConfiguration()
            .GetConnectionString(ProjectServiceDbProperties.ConnectionStringName);
    }

    private static IConfigurationRoot BuildConfiguration()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(
                Path.Combine(
                    Directory.GetCurrentDirectory(),
                    $&quot;..{Path.DirectorySeparatorChar}ProjectService.HttpApi.Host&quot;
                )
            )
            .AddJsonFile(&quot;appsettings.json&quot;, optional: false);

        return builder.Build();
    }
}
</code></pre>
<p>This is needed for ef core migration to work. We are building the configuration by taking the <code>appsetting.json</code> from the <code>ProjectService.HttpApi.Host</code>.</p>
<h2>Adding Migrations</h2>
<p>Now the <code>DbContextFactory</code> is configured we can add the migrations.</p>
<p>Go the <code>ProjectService.EntityFrameworkCore</code> project in the terminal and create migrations.</p>
<p>To create migration run this command:</p>
<pre><code class="language-bash">dotnet ef migrations add created_projects
</code></pre>
<p>Verify the migrations created in the migrations folder.</p>
<p>To update the database run this command</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>Create a Entity Dto</h2>
<p>Dto are placed in <code>ProjectService.Application.Contracts</code> project</p>
<pre><code class="language-cs">public class ProjectDto: EntityDto&lt;Guid&gt;
{
    public string Name { get; set; }
}
</code></pre>
<h2>Create a AppService interface</h2>
<p>create <code>IProjectAppService</code> interface in the <code>ProjectService.Application.Contracts</code> project</p>
<pre><code class="language-cs">public interface IProjectAppService: IApplicationService
{
    Task&lt;List&lt;ProjectDto&gt;&gt; GetListAsync();
    Task&lt;ProjectDto&gt; CreateAsync(string text);
    Task DeleteAsync(Guid id);
}
</code></pre>
<h2>Create an Application Services</h2>
<p>Learn more about the <a href="https://docs.abp.io/en/abp/latest/Application-Services">Application Services</a> in the abp docs.</p>
<p>Application service are created in the <code>ProjectService.Application</code> project</p>
<pre><code class="language-cs">[Authorize]
public class ProjectAppService : ProjectServiceAppService, IProjectAppService
{
    private readonly IRepository&lt;Project, Guid&gt; projectRepository;

    public ProjectAppService(IRepository&lt;Project, Guid&gt; projectRepository)
    {
        this.projectRepository = projectRepository;
    }

    public async Task&lt;ProjectDto&gt; CreateAsync(string text)
    {
        var projectItem = await projectRepository.InsertAsync(
                            new Project { Name = text }
                            );

        return new ProjectDto
        {
            Id = projectItem.Id,
            Name = projectItem.Name
        };
    }

    public async Task DeleteAsync(Guid id)
    {
        await projectRepository.DeleteAsync(id);
    }

    public async Task&lt;List&lt;ProjectDto&gt;&gt; GetListAsync()
    {
        var items = await projectRepository.GetListAsync();
        return items
            .Select(item =&gt; new ProjectDto
            {
                Id = item.Id,
                Name = item.Name
            }).ToList();
    }
}
</code></pre>
<h2>Update the EntityFrameworkCoreModule</h2>
<p>Update the <code>ConfigureServices</code> method in the <code>ProjectServiceEntityFrameworkCoreModule</code> file.</p>
<pre><code class="language-cs">context.Services.AddAbpDbContext&lt;ProjectServiceDbContext&gt;(options =&gt;
{
    options.AddDefaultRepositories(includeAllEntities: true);
});

Configure&lt;AbpDbContextOptions&gt;(options =&gt;
{
    options.UseSqlServer();
});
</code></pre>
<h2>Create API Scope, API Resource and Swagger Client in IdentityServer</h2>
<p>We need to do this in the <code>MainApp</code>. We have to update the <code>IdentityServerDataSeedContributor</code> in the <code>MainApp.Domain</code>.</p>
<pre><code class="language-cs">private async Task CreateApiScopesAsync()
{
    await CreateApiScopeAsync(&quot;MainApp&quot;);
    await CreateApiScopeAsync(&quot;ProjectService&quot;);
}

private async Task CreateApiResourcesAsync()
{
    var commonApiUserClaims = new[]
    {
        &quot;email&quot;,
        &quot;email_verified&quot;,
        &quot;name&quot;,
        &quot;phone_number&quot;,
        &quot;phone_number_verified&quot;,
        &quot;role&quot;
    };

    await CreateApiResourceAsync(&quot;MainApp&quot;, commonApiUserClaims);
    await CreateApiResourceAsync(&quot;ProjectService&quot;, commonApiUserClaims);
}
</code></pre>
<p>Now lets update the create the swagger client for the new service.</p>
<p>In the <code>MainApp.DbMigrator</code> project update the <code>appsettings.json</code> with the new swagger client.</p>
<pre><code class="language-cs">&quot;ProjectService_Swagger&quot;: {
    &quot;ClientId&quot;: &quot;ProjectService_Swagger&quot;,
    &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
    &quot;RootUrl&quot;: &quot;{ Your Service url }&quot;
}
</code></pre>
<p>Update the <code>commonScopes</code> in the <code>CreateClientsAsync</code> method</p>
<pre><code class="language-cs">var commonScopes = new[]
{
    &quot;email&quot;,
    &quot;openid&quot;,
    &quot;profile&quot;,
    &quot;role&quot;,
    &quot;phone&quot;,
    &quot;address&quot;,
    &quot;MainApp&quot;,
    &quot;ProjectService&quot;
};
</code></pre>
<p>This will add the newly created scope to all the clients.</p>
<p>Update the <code>CreateClientsAsync</code> method to create the swagger client in the <code>IdentityServerDataSeedContributor</code> in the <code>MainApp.Domain</code>.</p>
<pre><code class="language-cs">var swaggerClientIdProjectService = configurationSection[&quot;ProjectService_Swagger:ClientId&quot;];
if (!swaggerClientIdProjectService.IsNullOrWhiteSpace())
{
    var swaggerRootUrl = configurationSection[&quot;ProjectService_Swagger:RootUrl&quot;].TrimEnd(&#x27;/&#x27;);

    await CreateClientAsync(
        name: swaggerClientIdProjectService,
        scopes: commonScopes,
        grantTypes: new[] { &quot;authorization_code&quot; },
        secret: configurationSection[&quot;ProjectService_Swagger:ClientSecret&quot;]?.Sha256(),
        requireClientSecret: false,
        redirectUri: $&quot;{swaggerRootUrl}/swagger/oauth2-redirect.html&quot;,
        corsOrigins: new[] { swaggerRootUrl.RemovePostFix(&quot;/&quot;) }
    );
}
</code></pre>
<h2>Run Migrations again for the MainApp</h2>
<p>Change directory to <code>MainApp.DbMigrator</code> and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will run the <code>DbMigrator</code> project. The <code>DbMigrator</code> will seed the database with the New Scope, API and Client in our Identity Server.</p>
<p>Once the migration is done lets update the <code>CorsOrigins</code> in the IdentityServer.</p>
<pre><code class="language-json">&quot;App&quot;: {
    &quot;SelfUrl&quot;: &quot;https://localhost:44373&quot;,
    &quot;ClientUrl&quot;: &quot;http://localhost:4200&quot;,
    &quot;CorsOrigins&quot;: &quot;https://*.MainApp.com,http://localhost:4200,https://localhost:44307,https://localhost:44358,https://localhost:44372,{ Project Service url }&quot;, // update the entry here
    &quot;RedirectAllowedUrls&quot;: &quot;http://localhost:4200,https://localhost:44307&quot;
},
</code></pre>
<h2>Communicating with the Microservice</h2>
<p>Now we have the application running lets see how we can communicate between services.</p>
<p>To communicate with the we need to use the <code>Client Proxy</code> <a href="https://docs.abp.io/en/abp/latest/API/Dynamic-CSharp-API-Clients">Check docs here</a></p>
<h3>Add the Contract project reference</h3>
<p>We need to add <code>ProjectService.Application.Contracts</code> project as project reference to <code>MainApp.HttpApi.Client</code></p>
<pre><code class="language-xml">&lt;ProjectReference Include=&quot;..\..\modules\ProjectService\src\ProjectService.Application.Contracts\ProjectService.Application.Contracts.csproj&quot; /&gt;
</code></pre>
<p>Update the <code>MainAppHttpApiClientModule</code> dependency and add the <code>ProjectService</code> as a client proxy.</p>
<pre><code class="language-cs">typeof(ProjectServiceApplicationContractsModule)
</code></pre>
<p>Update the <code>ConfigureServices</code> service in the <code>MainAppHttpApiClientModule.cs</code> file in the <code>MainApp.HttpApi.Client</code> project.</p>
<pre><code class="language-cs">//Create dynamic client proxies
context.Services.AddHttpClientProxies(
    typeof(ProjectServiceApplicationContractsModule).Assembly,
    &quot;ProjectService&quot;
);
</code></pre>
<p>Now lets add Remote Service Endpoints to the <code>appsettings.json</code> in <code>MainApp.Web</code></p>
<pre><code class="language-json">&quot;RemoteServices&quot;: {
    &quot;Default&quot;: {
        &quot;BaseUrl&quot;: &quot;https://localhost:44358/&quot;
    },
    &quot;ProjectService&quot;: {
        &quot;BaseUrl&quot;: &quot;https://localhost:44372/&quot;
    }
}
</code></pre>
<h3>Update the scope of the Web App</h3>
<p>To connect to the project service we need to add the <code>ProjectService</code> scope as a scope to the <code>AddAbpOpenIdConnect</code> method inside the <code>ConfigureAuthentication</code> method in the <code>MainAppWebModule</code></p>
<pre><code class="language-cs">.AddAbpOpenIdConnect(&quot;oidc&quot;, options =&gt;
{
    options.Authority = configuration[&quot;AuthServer:Authority&quot;];
    options.RequireHttpsMetadata = Convert.ToBoolean(configuration[&quot;AuthServer:RequireHttpsMetadata&quot;]);
    options.ResponseType = OpenIdConnectResponseType.CodeIdToken;

    options.ClientId = configuration[&quot;AuthServer:ClientId&quot;];
    options.ClientSecret = configuration[&quot;AuthServer:ClientSecret&quot;];

    options.SaveTokens = true;
    options.GetClaimsFromUserInfoEndpoint = true;

    options.Scope.Add(&quot;role&quot;);
    options.Scope.Add(&quot;email&quot;);
    options.Scope.Add(&quot;phone&quot;);
    options.Scope.Add(&quot;MainApp&quot;);
    options.Scope.Add(&quot;ProjectService&quot;); // This is for the new project service
});
</code></pre>
<h2>Create a UI to display the projects</h2>
<p>Create a project page to display the project list in the <code>MainApp.Web</code>.</p>
<p>Create a <code>Projects.cshtml</code></p>
<pre><code class="language-html">@page
@model MainApp.Web.Pages.ProjectsModel
&lt;div class=&quot;container&quot;&gt;
    &lt;H1&gt;List of projects&lt;/H1&gt;
    @if(Model.Projects != null &amp;&amp; Model.Projects.Count &gt; 0){
        @foreach (var item in Model?.Projects) {
            &lt;div class=&quot;card&quot;&gt;
                &lt;div class=&quot;card-body&quot;&gt;
                    &lt;h5 class=&quot;card-title&quot;&gt;@item.Name&lt;/h5&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }  
    }
&lt;/div&gt;
</code></pre>
<p>Create a <code>Projects.cshtml.cs</code></p>
<pre><code class="language-cs">public class ProjectsModel : MainAppPageModel
    {
        private readonly ILogger&lt;ProjectsModel&gt; logger;

        public List&lt;ProjectDto&gt; Projects { get; set; }
        private IProjectAppService projectAppService { get; set; }
        public ProjectsModel(IProjectAppService projectAppService, ILogger&lt;ProjectsModel&gt; logger)
        {
            this.projectAppService = projectAppService;
            this.logger = logger;
            Projects = new List&lt;ProjectDto&gt;();
        }

        public void OnGet()
        {
            try
            {
                var projects = projectAppService.GetListAsync().Result;
                Projects = projects;
            }
            catch (Exception e)
            {
                logger.LogError(e.Message);
            }
        }
    }
</code></pre>
<p>Lets add the newly created page to the Main menu.</p>
<p>Update the <code>ConfigureMainMenuAsync</code> method in the <code>MainAppMenuContributor.cs</code> file.</p>
<pre><code class="language-cs">context.Menu.Items.Insert(
    3,
    new ApplicationMenuItem(
        MainAppMenus.Home,
        l[&quot;Projects&quot;],
        &quot;~/Projects&quot;,
        icon: &quot;fas fa-list&quot;,
        order: 0
    )
);
</code></pre>
<p>Now lets run the application.</p>
<h2>Running the application</h2>
<p>Since we have run 4 services lets init <code>tye</code> so that it will be easier.</p>
<pre><code class="language-bash">tye init
</code></pre>
<p>This command will create the <code>tye.yaml</code> file which will have the project without out ports binding. Update the ports from your solution. Here is the sample <code>tye.yaml</code>.</p>
<pre><code class="language-yaml">name: mainapp
services:
- name: mainapp-web
  project: src/MainApp.Web/MainApp.Web.csproj
  bindings:
  - port: 44343 //update your ports here
    protocol: https
- name: mainapp-identityserver
  project: src/MainApp.IdentityServer/MainApp.IdentityServer.csproj
  bindings:
  - port: 44373 //update your ports here
    protocol: https
- name: mainapp-httpapi-host
  project: src/MainApp.HttpApi.Host/MainApp.HttpApi.Host.csproj
  bindings:
  - port: 44358 //update your ports here
    protocol: https
- name: project-service
  project: modules/ProjectService/src/ProjectService.HttpApi.Host/ProjectService.HttpApi.Host.csproj
  bindings:
  - port: 44372 //update your ports here
    protocol: https
</code></pre>
<p>Now run the tye command.</p>
<pre><code class="language-bash">tye run
</code></pre>
<p>This will run all the projects. Navigate to the <code>ProjectService</code> and do the swagger authorization to login and call the project api to create new project.</p>
<p>To View the project visit the <code>MainApp.Web</code> project and click <code>Projects</code> menu to see the list of the project you just created.</p>]]></content:encoded>
          </item><item>
          <title>Create content with code in Orchard Core - Part 3</title>
          <link>https://blog.antosubash.com/posts/orchard-core-create-content-with-code</link>
          <guid>https://blog.antosubash.com/posts/orchard-core-create-content-with-code</guid>
          <pubDate>Sat, 27 Nov 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to create content types using the code in Orchard Core.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to create content types using the code in Orchard Core. We will see how to create content types with different parts and fields. We will also see how to create content items using the code.</p>
<h2>Create a CMS</h2>
<pre><code class="language-bash">dotnet new occms -n MyCms
</code></pre>
<h2>Add a module to the cms with part</h2>
<pre><code class="language-bash">dotnet new ocmodulecms --name MyCms.Projects
</code></pre>
<h2>Create a solution and add the projects</h2>
<p>To create a solution</p>
<pre><code class="language-bash">dotnet new sln -n ContentWithCode
</code></pre>
<p>To add projects to the solution.</p>
<pre><code class="language-bash">dotnet sln add .\MyCms\MyCms.csproj
dotnet sln add .\MyCms.Projects\MyCms.Projects.csproj
</code></pre>
<p>To add Module as a reference to the project</p>
<pre><code class="language-bash">dotnet add .\MyCms\MyCms.csproj reference .\MyCms.Projects\MyCms.Projects.csproj
</code></pre>
<h2>Add migration</h2>
<p>Create the migrations class <code>Migrations.cs</code> file in our module <code>MyCms.Projects</code></p>
<pre><code class="language-cs">using OrchardCore.ContentManagement.Metadata;
using OrchardCore.ContentManagement.Metadata.Settings;
using OrchardCore.Data.Migration;

namespace MyCms.Projects
{
    public class Migrations : DataMigration
    {
        IContentDefinitionManager _contentDefinitionManager;

        public Migrations(IContentDefinitionManager contentDefinitionManager)
        {
            _contentDefinitionManager = contentDefinitionManager;
        }

        public int Create()
        {
            _contentDefinitionManager.AlterTypeDefinition(&quot;Project&quot;, type =&gt; type
                .Draftable()
                .Versionable()
                .Creatable()
                .Securable()
                .Listable()
                .WithPart(&quot;Project&quot;)
            );

            _contentDefinitionManager.AlterPartDefinition(&quot;Project&quot;, part =&gt; part
                .WithField(&quot;Name&quot;, field =&gt; field
                    .OfType(&quot;TextField&quot;)
                    .WithDisplayName(&quot;Name&quot;)
                )
                .WithField(&quot;StartDate&quot;, field =&gt; field
                    .OfType(&quot;DateField&quot;)
                    .WithDisplayName(&quot;Start date&quot;)
                )
                .WithField(&quot;Image&quot;, field =&gt; field
                    .OfType(&quot;MediaField&quot;)
                    .WithDisplayName(&quot;Main image&quot;)
                )
                .WithField(&quot;Cost&quot;, field =&gt; field
                    .OfType(&quot;NumericField&quot;)
                    .WithDisplayName(&quot;Cost&quot;)
                )
            );

            return 1;
        }
    }
}
</code></pre>
<p>Update the start up file to add the migration.</p>
<pre><code class="language-cs">services.AddScoped&lt;IDataMigration,Migrations&gt;();
</code></pre>
<h2>Create a Headless Orchard CMS</h2>
<p>Run the <code>MyCms</code> project.</p>
<pre><code class="language-cs">dotnet run
</code></pre>
<p>You will see a Setup screen in the <code>Recipe</code> dropdown choose the <code>Headless Site</code></p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/orchard/part3/orchardcore3.1.png" alt="Setup"/></p>
<p>Once the setup is complete then enable the <code>MyCms.Projects</code> module.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/orchard/part3/orchardcore3.2.png" alt="Features"/></p>
<p>Go to Features and you will see the list of all the features. Search for &quot;MyCms.Projects&quot; and enable it.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/orchard/part3/orchardcore3.3.png" alt="Enable"/></p>
<p>Once the module is enabled then we can start creating our content.</p>
<p>Go to <code>Content Items</code> page you will see a <code>New Projects</code> menu now.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/orchard/part3/orchardcore3.4.png" alt="New Projects"/></p>
<p>You will be able to create a new project now.</p>
<p><img src="https://raw.githubusercontent.com/antosubash/images/main/assets/posts/orchard/part3/orchardcore3.6.png" alt="Create Projects"/></p>]]></content:encoded>
          </item><item>
          <title>Authentication using OpenId in React/NextJs App With Orchard Core - Part 2</title>
          <link>https://blog.antosubash.com/posts/orchard-core-openid-nextjs</link>
          <guid>https://blog.antosubash.com/posts/orchard-core-openid-nextjs</guid>
          <pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to do authentication using OpenId for a React App using Orchard Core.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to do authentication using OpenId for a React App using Orchard Core.</p>
<h2>Prerequisites</h2>
<p>To create the CMS and and a sample content follow the <a href="https://blog.antosubash.com/posts/orchard-core-getting-started-p1">Getting started</a></p>
<h2>Create a OpenId Client</h2>
<p>Navigate to the <code>https://localhost:5001/Admin</code> and login as a admin.</p>
<p>Navigate to <code>Security -&gt; OpenID Connect -&gt; Scopes -&gt; Add an scope</code>.</p>
<p>Create two scopes <code>role</code> and <code>openid</code>.</p>
<p>Navigate to <code>Security -&gt; OpenID Connect -&gt; Applications -&gt; Add an Application</code>.</p>
<p>Create a client with</p>
<p>Client id : client1</p>
<p>Display Name : client1</p>
<p>Type : Public client</p>
<p>Flows : Allow Authorization Code Flow</p>
<p>Redirect Uris : http://localhost:3000</p>
<p>Consent type: Explicit consent</p>
<p>Allowed scopes: openid, role</p>
<p>Click Save</p>
<h2>Update the CORS policy</h2>
<p>Create a new policy to and set is as default. All credentials and any origin, headers and methods.</p>
<p>Update the CORS in CMS <code>Startup.cs</code> file under <code>ConfigureServices</code> function.</p>
<pre><code class="language-cs">public void ConfigureServices(IServiceCollection services)
{
    services.AddCors(o =&gt; o.AddDefaultPolicy(builder =&gt;
    {
        builder
            .AllowAnyOrigin()
            .AllowAnyMethod()
            .AllowAnyHeader();
    }));
    services.AddOrchardCms();
}
</code></pre>
<h2>Create a NextJS App</h2>
<pre><code class="language-bash">yarn create next-app --typescript
</code></pre>
<h2>Add npm packages</h2>
<pre><code class="language-bash">yarn add oidc-client-ts react-oidc-context @apollo/client
</code></pre>
<h2>Add .env file</h2>
<pre><code class="language-bash">NEXT_PUBLIC_BASE_URL=https://localhost:5001
NEXT_PUBLIC_GRAPHQL_URL=https://localhost:5001/api/graphql
</code></pre>
<h2>Create login component</h2>
<p>Inside the <code>components</code> folder create <code>Login.tsx</code></p>
<pre><code class="language-ts">import React from &#x27;react&#x27;
import { useAuth } from &#x27;react-oidc-context&#x27;;

const Login = () =&gt; {
    const auth = useAuth();
    if (auth.isLoading) {
      return &lt;div&gt;Loading...&lt;/div&gt;;
    }

    if (auth.error) {
      return &lt;div&gt;Oops... {auth.error.message}&lt;/div&gt;;
    }

    if (auth.isAuthenticated) {
      return (
        &lt;div&gt;
          Hello {auth.user?.profile.sub}{&quot; &quot;}
          &lt;button onClick={auth.removeUser}&gt;Log out&lt;/button&gt;
        &lt;/div&gt;
      );
    }

    return &lt;button onClick={auth.signinRedirect}&gt;Log in&lt;/button&gt;;
}

export default Login
</code></pre>
<h2>Create Languages component</h2>
<p>Inside the <code>components</code> folder create <code>Languages.tsx</code></p>
<pre><code class="language-jsx">import React from &quot;react&quot;;
import { gql, useQuery } from &quot;@apollo/client&quot;;

interface Props {}

const LanguagesQuery = gql`
  query Languages {
    language {
      code
      createdUtc
      displayText
      modifiedUtc
      name
    }
  }
`;

const Languages = (props: Props) =&gt; {
  const { loading, error, data } = useQuery(LanguagesQuery);

  if (loading) return &lt;p&gt;Loading...&lt;/p&gt;;
  if (error) return &lt;p&gt;Error :(&lt;/p&gt;;

  return data.language.map((lang: any) =&gt; (
    &lt;div key={lang.code}&gt;
      &lt;p&gt;{lang.name}&lt;/p&gt;
    &lt;/div&gt;
  ));
};

export default Languages;
</code></pre>
<h2>Create apollo client</h2>
<p>Create a file <code>apollo-client.ts</code> inside the <code>lib</code> folder.</p>
<pre><code class="language-ts">import { ApolloClient, createHttpLink, InMemoryCache } from &quot;@apollo/client&quot;;
import { setContext } from &quot;@apollo/client/link/context&quot;;
import { User } from &quot;oidc-client-ts&quot;;

const httpLink = createHttpLink({
  uri: process.env.NEXT_PUBLIC_GRAPHQL_URL,
});

const authLink = setContext((_, { headers }) =&gt; {
  // get the authentication token from local storage if it exists
  const oidcStorage = sessionStorage.getItem(
    `oidc.user:${process.env.NEXT_PUBLIC_BASE_URL}:client1`
  );
  const token = User.fromStorageString(oidcStorage!).access_token;
  // return the headers to the context so httpLink can read them
  return {
    headers: {
      ...headers,
      authorization: token ? `Bearer ${token}` : &quot;&quot;,
    },
  };
});
const client = new ApolloClient({
  link: authLink.concat(httpLink),
  cache: new InMemoryCache(),
});
export default client;
</code></pre>
<h2>Update _app.tsx</h2>
<pre><code class="language-ts">import &#x27;../styles/globals.css&#x27;
import type { AppProps } from &#x27;next/app&#x27;
import { AuthProvider } from &quot;react-oidc-context&quot;;
import { ApolloProvider } from &quot;@apollo/client&quot;;
import client from &#x27;../lib/apollo-client&#x27;;
function MyApp({ Component, pageProps }: AppProps) {
  const oidcConfig = {
    authority: &quot;https://localhost:5001&quot;,
    client_id: &quot;client1&quot;,
    redirect_uri: &quot;http://localhost:3000&quot;,
    response_type: &quot;code&quot;,
    scopes: &quot;openid email&quot;
  };
  const onSignin = () =&gt; {
    location.href = &quot;/&quot;;
  };
  return (
    &lt;AuthProvider {...oidcConfig} onSigninCallback={onSignin}&gt;
      &lt;ApolloProvider client={client}&gt;
        &lt;Component {...pageProps} /&gt;
      &lt;/ApolloProvider&gt;
    &lt;/AuthProvider&gt;
  );
}

export default MyApp
</code></pre>
<h3>Update the index page</h3>
<pre><code class="language-ts">import type { NextPage } from &#x27;next&#x27;
import Login from &#x27;./../components/Login&#x27;;
import Languages from &#x27;./../components/Languages&#x27;

const Home: NextPage = () =&gt; {
    return (
      &lt;div&gt;
        &lt;Login /&gt;
        &lt;Languages&gt;&lt;/Languages&gt;
      &lt;/div&gt;
    ); 
}

export default Home
</code></pre>
<h2>Run both CMS and Next app</h2>
<p>Navigate to the CMS project and run</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>Navigate to the NextJS project and run</p>
<pre><code class="language-bash">yarn // To install the npm packages
yarn dev // To run the app
</code></pre>
<p>Repo : https://github.com/antosubash/OrchardCoreReactAuth</p>]]></content:encoded>
          </item><item>
          <title>Add a new Module to the Tiered ABP App with separate database for the module</title>
          <link>https://blog.antosubash.com/posts/abp-add-new-module-with-seperate-db</link>
          <guid>https://blog.antosubash.com/posts/abp-add-new-module-with-seperate-db</guid>
          <pubDate>Wed, 03 Nov 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to develop a modular with tiered abp application. We will add a new module to tiered abp app and then use the separate database to store the modules data and the identity data.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Add a new Module to the Tiered ABP App with a separate database for the module</h2>
<p>In this post, we will see how to develop a modular with a tiered ABP application. We will add a new module to the tiered ABP app and then use the separate database to store the module&#x27;s data and identity data.</p>
<h2>Creating the ABP application and running migrations</h2>
<pre><code class="language-bash">abp new MainApp -t app -u mvc --tiered 
</code></pre>
<h2>Run Migrations</h2>
<p>Change directory to src/MainApp.DbMigrator and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will apply the migrations to the DB and we can run the <code>MainApp.Web</code> project. This will host the UI and API..</p>
<h2>Add a new Module</h2>
<p>Now we will add a new module to our MainApp</p>
<pre><code class="language-bash">abp add-module ModuleA --new --add-to-solution-file
</code></pre>
<p>This command will create a new module and add the new module to the solution.</p>
<p>Now you can run all their host and see the API and UI available in the app.</p>
<h2>Add a new Entity to the ModuleA</h2>
<p>We will create a new Entity inside the <code>MainApp.ModuleA.Domain</code> called <code>TodoOne</code></p>
<h2>1. Create an <a href="https://docs.abp.io/en/abp/latest/Entities">Entity</a></h2>
<p>The first step is to create an Entity. Create the Entity in the <code>MainApp.ModuleA.Domain</code> project.</p>
<pre><code class="language-cs">public class TodoOne : Entity&lt;Guid&gt;
{
    public string Content { get; set; }
    public bool IsDone { get; set; }
}
</code></pre>
<h2>2. Add Entity to <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core">ef core</a></h2>
<p>Next is to add Entity to the EF Core. we will find the DbContext in the <code>MainApp.ModuleA.EntityFrameworkCore</code> project. Add the DbSet to the DbContext</p>
<pre><code class="language-cs">public DbSet&lt;TodoOne&gt; TodoOnes { get; set; }
</code></pre>
<h2>3. Configure Entity in <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core#configurebyconvention-method">ef core</a></h2>
<p>Configuration is done in the <code>DbContextModelCreatingExtensions</code> class. This should be available in the <code>MainApp.ModuleA.EntityFrameworkCore</code> project</p>
<pre><code class="language-cs">builder.Entity&lt;TodoOne&gt;(b =&gt;
{
    b.ToTable(options.TablePrefix + &quot;TodoOnes&quot;, options.Schema);
    b.ConfigureByConvention(); //auto configure for the base class props
});
</code></pre>
<h2>4. Adding Migrations for the ModuleA</h2>
<p>Now that the Entity is configured we can add the migrations.</p>
<p>Create <code>EntityFrameworkCore\ModuleA</code> folder in the <code>MainApp.HttpApi.Host</code> project.</p>
<p>Create a <code>ModuleAHttpApiHostMigrationsDbContext.cs</code> file in the <code>EntityFrameworkCore\ModuleA</code> folder</p>
<pre><code class="language-cs">public class ModuleAHttpApiHostMigrationsDbContext : AbpDbContext&lt;ModuleAHttpApiHostMigrationsDbContext&gt;
{
    public ModuleAHttpApiHostMigrationsDbContext(DbContextOptions&lt;ModuleAHttpApiHostMigrationsDbContext&gt; options) : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.ConfigureModuleA();
    }
}
</code></pre>
<p>Create a <code>ModuleAHttpApiHostMigrationsDbContextFactory.cs</code> file in the <code>EntityFrameworkCore\ModuleA</code> folder</p>
<pre><code class="language-cs">public class ModuleAHttpApiHostMigrationsDbContextFactory : IDesignTimeDbContextFactory&lt;ModuleAHttpApiHostMigrationsDbContext&gt;
{
    public ModuleAHttpApiHostMigrationsDbContext CreateDbContext(string[] args)
    {
        var configuration = BuildConfiguration();

        var builder = new DbContextOptionsBuilder&lt;ModuleAHttpApiHostMigrationsDbContext&gt;()
            .UseSqlServer(configuration.GetConnectionString(&quot;ModuleA&quot;));
        return new ModuleAHttpApiHostMigrationsDbContext(builder.Options);
    }

    private static IConfigurationRoot BuildConfiguration()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile(&quot;appsettings.json&quot;, optional: false);

        return builder.Build();
    }
}
</code></pre>
<p>Update the connection string in <code>appsettings.json</code> in the <code>MainApp.HttpApi.Host</code></p>
<pre><code class="language-json">  &quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;Server=(LocalDb)\\MSSQLLocalDB;Database=MainApp;Trusted_Connection=True&quot;,
    &quot;ModuleA&quot;: &quot;Server=(LocalDb)\\MSSQLLocalDB;Database=ModuleA;Trusted_Connection=True&quot;,
  },
</code></pre>
<p>To create migration run this command:</p>
<pre><code class="language-bash">dotnet ef migrations add created_todoone --context ModuleAHttpApiHostMigrationsDbContext --output-dir Migrations/ModuleA
</code></pre>
<p>Verify the migrations created in the migrations folder.</p>
<p>To update the database run this command</p>
<pre><code class="language-bash">dotnet ef database update --context ModuleAHttpApiHostMigrationsDbContext
</code></pre>
<h2>5. Create an Entity Dto</h2>
<p>Dto are placed in <code>MainApp.ModuleA.Application.Contracts</code> project</p>
<pre><code class="language-cs">public class TodoOneDto : EntityDto&lt;Guid&gt;
{
    public string Content { get; set; }
    public bool IsDone { get; set; }
}
</code></pre>
<h2>6. Map Entity to Dto</h2>
<p>Abp uses AutoMapper to map Entity to Dto. you can find the <code>ApplicationAutoMapperProfile</code> file which is used by the AutoMapper in the <code>MainApp.ModuleA.Application</code> project.</p>
<pre><code class="language-cs">CreateMap&lt;TodoOne, TodoOneDto&gt;();
CreateMap&lt;TodoOneDto, TodoOne&gt;();
</code></pre>
<h2>7. Create an <a href="https://docs.abp.io/en/abp/latest/Application-Services">Application Services</a></h2>
<p>Application services are created in the <code>MainApp.ModuleA.Application</code> project</p>
<pre><code class="language-cs">public class TodoOneAppService : ModuleAAppService
{
    private readonly IRepository&lt;TodoOne, Guid&gt; todoOneRepository;

    public TodoOneAppService(IRepository&lt;TodoOne, Guid&gt; todoOneRepository)
    {
        this.todoOneRepository = todoOneRepository;
    }

    public async Task&lt;List&lt;TodoOneDto&gt;&gt; GetAll()
    {
        return ObjectMapper.Map&lt;List&lt;TodoOne&gt;, List&lt;TodoOneDto&gt;&gt;(await todoOneRepository.GetListAsync());
    }

    public async Task&lt;TodoOneDto&gt; CreateAsync(TodoOneDto todoOneDto)
    {
        var TodoOne = ObjectMapper.Map&lt;TodoOneDto, TodoOne&gt;(todoOneDto);
        var createdTodoOne = await todoOneRepository.InsertAsync(TodoOne);
        return ObjectMapper.Map&lt;TodoOne, TodoOneDto&gt;(createdTodoOne);
    }

    public async Task&lt;TodoOneDto&gt; UpdateAsync(TodoOneDto todoOneDto)
    {
        var TodoOne = ObjectMapper.Map&lt;TodoOneDto, TodoOne&gt;(todoOneDto);
        var createdTodoOne = await todoOneRepository.UpdateAsync(TodoOne);
        return ObjectMapper.Map&lt;TodoOne, TodoOneDto&gt;(createdTodoOne);
    }

    public async Task&lt;bool&gt; DeleteAsync(Guid id)
    {
        var TodoOne = await todoOneRepository.FirstOrDefaultAsync(x=&gt; x.Id == id);
        if(TodoOne != null)
        {
            await todoOneRepository.DeleteAsync(TodoOne);
            return true;
        }
        return false;
    }
}
</code></pre>
<h2>8. Update <code>AddAbpDbContext</code> method in the <code>ModuleAEntityFrameworkCoreModule</code></h2>
<pre><code class="language-cs">options.AddDefaultRepositories(includeAllEntities: true);
</code></pre>
<h2>9. Update the <code>ConfigureAutoApiControllers</code> in the <code>MainAppHttpApiHostModule</code> in the <code>MainApp.HttpApi.Host</code></h2>
<pre><code class="language-cs">Configure&lt;AbpAspNetCoreMvcOptions&gt;(options =&gt;
            {
                options.ConventionalControllers.Create(typeof(ModuleAApplicationModule).Assembly);
            });
</code></pre>
<p>Repo: https://github.com/antosubash/NewModuleWithTieredAbpApp</p>]]></content:encoded>
          </item><item>
          <title>Add a new Module to the ABP App</title>
          <link>https://blog.antosubash.com/posts/abp-add-new-module</link>
          <guid>https://blog.antosubash.com/posts/abp-add-new-module</guid>
          <pubDate>Tue, 02 Nov 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to develop a modular abp application. We will add a new module to default abp app and then use the same database to store the modules data and the identity data.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Add a new Module to the ABP App</h2>
<p>In this post we will see how to develop a modular abp application. We will add a new module to default abp app and then use the same database to store the modules data and the identity data.</p>
<h2>Creating the abp application and run migrations</h2>
<pre><code class="language-bash">abp new MainApp
</code></pre>
<h2>Run Migrations</h2>
<p>Change directory to src/MainApp.DbMigrator and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will apply the migrations to the db and we can run the <code>MainApp.Web</code> project. This will host the UI and API..</p>
<h2>Add a new Module</h2>
<p>Now we will add a new module to our MainApp. Navigate to the solution folder of the <code>MainApp</code> and run the following command</p>
<pre><code class="language-bash">abp add-module ModuleA --new --add-to-solution-file
</code></pre>
<p>This command will create a new module and add the new module to the solution.</p>
<p>Now you can run the <code>MainApp.Web</code> and see the Api and UI available in the app.</p>
<h2>Add new Entity to the ModuleA</h2>
<p>We will create a new Entity inside the <code>MainApp.ModuleA.Domain</code> called <code>TodoOne</code>.</p>
<h2>1. Create an <a href="https://docs.abp.io/en/abp/latest/Entities">Entity</a></h2>
<p>First step is to create an Entity. Create the Entity in the <code>MainApp.ModuleA.Domain</code> project.</p>
<pre><code class="language-cs">public class TodoOne : Entity&lt;Guid&gt;
{
    public string Content { get; set; }
    public bool IsDone { get; set; }
}
</code></pre>
<h2>2. Add Entity to <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core">ef core</a></h2>
<p>Next is to add Entity to the EF Core. you will find the DbContext in the <code>MainApp.ModuleA.EntityFrameworkCore</code> project. Add the DbSet to the DbContext</p>
<pre><code class="language-cs">public DbSet&lt;TodoOne&gt; TodoOnes { get; set; }
</code></pre>
<h2>3. Configure Entity in <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core#configurebyconvention-method">ef core</a></h2>
<p>Configuration is done in the <code>DbContextModelCreatingExtensions</code> class inside the <code>ConfigureModuleA</code> method. This should be available in the <code>MainApp.ModuleA.EntityFrameworkCore</code> project. <code>ConfigureModuleA</code> is invoked in the <code>MainAppDbContext</code>.</p>
<pre><code class="language-cs">builder.Entity&lt;TodoOne&gt;(b =&gt;
{
    b.ToTable(options.TablePrefix + &quot;TodoOnes&quot;, options.Schema);
    b.ConfigureByConvention(); //auto configure for the base class props
});
</code></pre>
<h2>4. Adding Migrations</h2>
<p>Now the Entity is configured we can add the migrations.</p>
<p>Go the <code>MainApp.EntityFrameworkCore</code> project in the terminal and create migrations.</p>
<p>To create migration run this command:</p>
<pre><code class="language-bash">dotnet ef migrations add created_todoone
</code></pre>
<p>Verify the migrations created in the migrations folder.</p>
<p>To update the database run this command</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>5. Create a Entity Dto</h2>
<p>Dto are placed in <code>MainApp.ModuleA.Application.Contracts</code> project</p>
<pre><code class="language-cs">public class TodoOneDto : EntityDto&lt;Guid&gt;
{
    public string Content { get; set; }
    public bool IsDone { get; set; }
}
</code></pre>
<h2>6. Map Entity to Dto</h2>
<p>Abp uses AutoMapper to map Entity to Dto. you can find the <code>ApplicationAutoMapperProfile</code> file which is used by the AutoMapper in the <code>MainApp.ModuleA.Application</code> project.</p>
<pre><code class="language-cs">CreateMap&lt;TodoOne, TodoOneDto&gt;();
CreateMap&lt;TodoOneDto, TodoOne&gt;();
</code></pre>
<h2>7. Create an <a href="https://docs.abp.io/en/abp/latest/Application-Services">Application Services</a></h2>
<p>Application service are created in the <code>MainApp.ModuleA.Application</code> project</p>
<pre><code class="language-cs">public class TodoOneAppService : ModuleAAppService
{
    private readonly IRepository&lt;TodoOne, Guid&gt; todoOneRepository;

    public TodoOneAppService(IRepository&lt;TodoOne, Guid&gt; todoOneRepository)
    {
        this.todoOneRepository = todoOneRepository;
    }

    public async Task&lt;List&lt;TodoOneDto&gt;&gt; GetAll()
    {
        return ObjectMapper.Map&lt;List&lt;TodoOne&gt;, List&lt;TodoOneDto&gt;&gt;(await todoOneRepository.GetListAsync());
    }

    public async Task&lt;TodoOneDto&gt; CreateAsync(TodoOneDto todoOneDto)
    {
        var TodoOne = ObjectMapper.Map&lt;TodoOneDto, TodoOne&gt;(todoOneDto);
        var createdTodoOne = await todoOneRepository.InsertAsync(TodoOne);
        return ObjectMapper.Map&lt;TodoOne, TodoOneDto&gt;(createdTodoOne);
    }

    public async Task&lt;TodoOneDto&gt; UpdateAsync(TodoOneDto todoOneDto)
    {
        var TodoOne = ObjectMapper.Map&lt;TodoOneDto, TodoOne&gt;(todoOneDto);
        var createdTodoOne = await todoOneRepository.UpdateAsync(TodoOne);
        return ObjectMapper.Map&lt;TodoOne, TodoOneDto&gt;(createdTodoOne);
    }

    public async Task&lt;bool&gt; DeleteAsync(Guid id)
    {
        var TodoOne = await todoOneRepository.FirstOrDefaultAsync(x=&gt; x.Id == id);
        if(TodoOne != null)
        {
            await todoOneRepository.DeleteAsync(TodoOne);
            return true;
        }
        return false;
    }
}
</code></pre>
<h2>8. Update <code>AddAbpDbContext</code> method in the <code>ModuleAEntityFrameworkCoreModule</code></h2>
<pre><code class="language-cs">options.AddDefaultRepositories(includeAllEntities: true);
</code></pre>
<h2>9. Update the <code>ConfigureServices</code> in the <code>ModuleAWebModule</code> in the <code>ModuleA.Web</code></h2>
<pre><code class="language-cs">Configure&lt;AbpAspNetCoreMvcOptions&gt;(options =&gt;
            {
                options.ConventionalControllers.Create(typeof(ModuleAApplicationModule).Assembly);
            });
</code></pre>
<h2>10. Test you api</h2>
<p>Run the <code>MainApp.Web</code> project and navigate to <code>https://localhost:&lt;port&gt;/swagger/</code> you will see the todo apis. You can test your API there.</p>
<p>Repo: https://github.com/antosubash/NewModuleWithAbp</p>]]></content:encoded>
          </item><item>
          <title>Orchard core. Getting started - Part 1</title>
          <link>https://blog.antosubash.com/posts/orchard-core-getting-started-p1</link>
          <guid>https://blog.antosubash.com/posts/orchard-core-getting-started-p1</guid>
          <pubDate>Mon, 01 Nov 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to get started with the orchard core.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to get started with the orchard core.</p>
<h2>Installing the Orchard CMS templates</h2>
<p>Once the .NET Core SDK has been installed, type the following command to install the templates for creating Orchard Core web applications</p>
<pre><code class="language-bash">dotnet new -i OrchardCore.ProjectTemplates::1.1.0
</code></pre>
<h2>Creating the CMS</h2>
<p>To create the cms run the following command.</p>
<pre><code class="language-bash">dotnet new occms -n MyCms
</code></pre>
<p>Change directory into the <code>MyCms</code> folder and run the project.</p>
<h3>Running the application</h3>
<pre><code class="language-bash">dotnet watch run
</code></pre>
<p>Your application should now be running and listening on the following ports:</p>
<pre><code class="language-bash">Now listening on: https://localhost:5001
Now listening on: http://localhost:5000
Application started. Press Ctrl+C to shut down.
</code></pre>
<p>Open a browser and navigate to https://localhost:5001 to display the setup screen.</p>
<p>we will create the website using the <code>Headless</code> recipe. The Headless recipe is intended to get you started when using Orchard Core as an API, and Content Management System, with Administrator access to the host.</p>
<p>Complete the setup form and select the <code>Headless</code> recipe and SQLite for the database.</p>
<p>Submit the form. A few seconds later you should be looking at a <code>Headless</code> Site.</p>
<p>In order to configure it and start writing content you can go to https://localhost:5001/admin</p>
<h2>Create content</h2>
<p>In the admin page open the <code>Content =&gt; Content Definition =&gt; Content Types =&gt; Create new type</code></p>
<p>In the <code>New Content Type</code> page provide the <code>Display name</code> and the <code>Technical Name</code>.</p>
<p>In the <code>Add Parts page</code> Click <code>Save</code>.</p>
<p>In the <code>Edit Content Type</code> page <code>Add Parts =&gt; Title =&gt; Save</code> then <code>Fields =&gt; IsDone =&gt; Boolean Field =&gt; Save</code></p>
<p>Then save the Content type.</p>
<p>Now visit content items to create a new content.</p>
<h2>Display content</h2>
<p>create a <code>Pages</code> folder and create <code>todo.cshtml</code> file inside the <code>Pages</code> folder</p>
<pre><code class="language-html">@page &quot;/todos&quot;
@inject OrchardCore.IOrchardHelper Orchard
@{
    var todos = await Orchard.GetRecentContentItemsByContentTypeAsync(&quot;Todos&quot;);
}
@Orchard.ConsoleLog(todos)
&lt;h1&gt;List all Todos&lt;/h1&gt;
@foreach (var todo in todos) {
    &lt;p&gt;
        @todo.DisplayText
    &lt;/p&gt;
    &lt;p&gt;
        @todo.Content.Todos.IsDone.Value
    &lt;/p&gt;
}
</code></pre>
<p>Now navigate to https://localhost:5001/todos to see the created todos.</p>
<p>Sample repo : https://github.com/antosubash/Anto.OrchardCore.CMS</p>]]></content:encoded>
          </item><item>
          <title>Changing theme for your ABP app. Part 10</title>
          <link>https://blog.antosubash.com/posts/abp-change-theme-p10</link>
          <guid>https://blog.antosubash.com/posts/abp-change-theme-p10</guid>
          <pubDate>Tue, 26 Oct 2021 00:00:00 GMT</pubDate>
          <description>In this post we will explore how to change the theme for your ABP application.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will explore how to change the theme for your ABP application..</p>
<h2>Create an abp App and Run Migrations</h2>
<h3>Create the App</h3>
<p>Run the following command to create the abp app.</p>
<pre><code class="language-bash">abp new ThemeChange
</code></pre>
<h3>Run Migrations</h3>
<p>change directory to <code>src/ThemeChange.DbMigrator</code> and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will create the migrations and seed the data for your project.</p>
<h2>Add the basic theme module to app</h2>
<p>Run the following command in your solution folder.</p>
<pre><code class="language-bash">abp add-module Volo.BasicTheme --with-source-code --add-to-solution-file
</code></pre>
<p>This will add the basic theme to your solution and download the source for that theme.</p>
<p>Now remove the nuget package reference from the <code>ThemeChange.Web</code> project for <code>Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic</code>.</p>
<p>Add project reference from to the  <code>Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic</code> to the <code>ThemeChange.Web</code>.</p>
<h2>Change the bootstrap theme</h2>
<p>We are going to use the <a href="https://github.com/creativetimofficial/material-kit">Material kit</a>. It is a free and Open Source UI Kit for Bootstrap 4. Download the minified css from the <a href="https://github.com/creativetimofficial/material-kit/blob/masterhttps://raw.githubusercontent.com/antosubash/images/main/assets/css/material-kit.min.css">assets/css/material-kit.min.css</a> and place it in the <code>wwwroot/styles/material-kit.min.css</code> in the <code>ThemeChange.Web</code></p>
<h3>Remove the default bootstrap theme</h3>
<p>Update the <code>ConfigureBundle</code> method in the <code>BasicThemeGlobalStyleContributor</code> in the <code>Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic</code> project</p>
<pre><code class="language-cs">public override void ConfigureBundle(BundleConfigurationContext context)
{
    context.Files.Add(&quot;/themes/basic/layout.css&quot;);
    context.Files.Remove(&quot;/libs/bootstrap/css/bootstrap.css&quot;);
}
</code></pre>
<p>Update the <code>ConfigureBundles</code> method in the <code>ThemeChangeWebModule</code> in the <code>ThemeChange.Web</code> project.</p>
<pre><code class="language-cs">Configure&lt;AbpBundlingOptions&gt;(options =&gt;
{
    options.StyleBundles.Configure(
        BasicThemeBundles.Styles.Global,
        bundle =&gt;
        {
            bundle.AddFiles(&quot;/global-styles.css&quot;);
            bundle.AddFiles(&quot;/styles/material-kit.min.css&quot;);
        }
    );
});
</code></pre>
<h2>Changing the layout</h2>
<p>Layouts are available in the <code>Themes\basic\Layouts</code> folder in the <code>Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic</code> project</p>
<p>We are going to change the <code>Account.cshtml</code> layout. Take a backup of that file.</p>
<p>Here is the updated cshtml. Based on the sample from this <a href="https://github.com/creativetimofficial/material-kit/blob/master/pages/sign-in.html">Signin Page</a></p>
<pre><code class="language-bash">@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.AspNetCore.MultiTenancy
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.MultiTenancy.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Bundling
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.MainNavbar
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.PageAlerts
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@inject IBrandingProvider BrandingProvider
@inject IOptions&lt;AbpMultiTenancyOptions&gt; MultiTenancyOptions
@inject ICurrentTenant CurrentTenant
@inject IStringLocalizer&lt;AbpUiMultiTenancyResource&gt; MultiTenancyStringLocalizer
@inject ITenantResolveResultAccessor TenantResolveResultAccessor

@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? &quot;container-fluid&quot; : &quot;container&quot;; //TODO: Better and type-safe options
    var rtl = CultureHelper.IsRtl ? &quot;rtl&quot; : string.Empty;
}

&lt;!DOCTYPE html&gt;

&lt;html lang=&quot;@CultureInfo.CurrentCulture.Name&quot; dir=&quot;@rtl&quot;&gt;
&lt;head&gt;
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Account)

    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;

    &lt;title&gt;@(ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title)&lt;/title&gt;

    @if (ViewBag.Description != null)
    {
        &lt;meta name=&quot;description&quot; content=&quot;@(ViewBag.Description as string)&quot; /&gt;
    }
    &lt;abp-style-bundle name=&quot;@BasicThemeBundles.Styles.Global&quot; /&gt;
      &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700&quot; rel=&quot;stylesheet&quot; /&gt;
    @await RenderSectionAsync(&quot;styles&quot;, false)

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Account)
&lt;/head&gt;
&lt;body class=&quot;sign-in-basic&quot;&gt;
  &lt;nav class=&quot;navbar navbar-expand-lg position-absolute top-0 z-index-3 w-100 shadow-none my-3  navbar-transparent &quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;a class=&quot;navbar-brand  text-white &quot; href=&quot;/&quot; rel=&quot;tooltip&quot; title=&quot;Theme Change&quot; data-placement=&quot;bottom&quot;&gt;
        ThemeChange
      &lt;/a&gt;
      &lt;button class=&quot;navbar-toggler shadow-none ms-2&quot; type=&quot;button&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#navigation&quot; aria-controls=&quot;navigation&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;
        &lt;span class=&quot;navbar-toggler-icon mt-2&quot;&gt;
          &lt;span class=&quot;navbar-toggler-bar bar1&quot;&gt;&lt;/span&gt;
          &lt;span class=&quot;navbar-toggler-bar bar2&quot;&gt;&lt;/span&gt;
          &lt;span class=&quot;navbar-toggler-bar bar3&quot;&gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/button&gt;
      &lt;div class=&quot;collapse navbar-collapse w-100 pt-3 pb-2 py-lg-0 ms-lg-12 ps-lg-5&quot; id=&quot;navigation&quot;&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;div class=&quot;page-header align-items-start min-vh-100&quot; style=&quot;background-image: url(&#x27;https://images.unsplash.com/photo-1497294815431-9365093b7331?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1950&amp;q=80&#x27;);&quot; loading=&quot;lazy&quot;&gt;
    &lt;span class=&quot;mask bg-gradient-dark opacity-6&quot;&gt;&lt;/span&gt;
    &lt;div class=&quot;container my-auto&quot;&gt;
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-8 col-12 mx-auto&quot;&gt;
          &lt;div class=&quot;card z-index-0 fadeIn3 fadeInBottom&quot;&gt;
            &lt;div class=&quot;card-header p-0 position-relative mt-n4 mx-3 z-index-2&quot;&gt;
              &lt;div class=&quot;bg-gradient-primary shadow-primary border-radius-lg py-3 pe-1&quot;&gt;
                &lt;h4 class=&quot;text-white font-weight-bolder text-center mt-2 mb-0&quot;&gt;Sign in&lt;/h4&gt;
                &lt;div class=&quot;row mt-3&quot;&gt;
                  &lt;div class=&quot;col-2 text-center ms-auto&quot;&gt;
                    &lt;a class=&quot;btn btn-link px-3&quot; href=&quot;javascript:;&quot;&gt;
                      &lt;i class=&quot;fa fa-facebook text-white text-lg&quot;&gt;&lt;/i&gt;
                    &lt;/a&gt;
                  &lt;/div&gt;
                  &lt;div class=&quot;col-2 text-center px-1&quot;&gt;
                    &lt;a class=&quot;btn btn-link px-3&quot; href=&quot;javascript:;&quot;&gt;
                      &lt;i class=&quot;fa fa-github text-white text-lg&quot;&gt;&lt;/i&gt;
                    &lt;/a&gt;
                  &lt;/div&gt;
                  &lt;div class=&quot;col-2 text-center me-auto&quot;&gt;
                    &lt;a class=&quot;btn btn-link px-3&quot; href=&quot;javascript:;&quot;&gt;
                      &lt;i class=&quot;fa fa-google text-white text-lg&quot;&gt;&lt;/i&gt;
                    &lt;/a&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;card-body&quot;&gt;
                @if (MultiTenancyOptions.Value.IsEnabled &amp;&amp;
                  (TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(CookieTenantResolveContributor.ContributorName) == true ||
                   TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(QueryStringTenantResolveContributor.ContributorName) == true))
                {
                    &lt;div class=&quot;card shadow-sm rounded mb-3&quot;&gt;
                        &lt;div class=&quot;card-body px-5&quot;&gt;
                            &lt;div class=&quot;row&quot;&gt;
                                &lt;div class=&quot;col&quot;&gt;
                                    &lt;span style=&quot;font-size: .8em;&quot; class=&quot;text-uppercase text-muted&quot;&gt;@MultiTenancyStringLocalizer[&quot;Tenant&quot;]&lt;/span&gt;&lt;br /&gt;
                                    &lt;h6 class=&quot;m-0 d-inline-block&quot;&gt;
                                        @if (CurrentTenant.Id == null)
                                        {
                                            &lt;span&gt;
                                                @MultiTenancyStringLocalizer[&quot;NotSelected&quot;]
                                            &lt;/span&gt;
                                        }
                                        else
                                        {
                                            &lt;strong&gt;@(CurrentTenant.Name ?? CurrentTenant.Id.Value.ToString())&lt;/strong&gt;
                                        }
                                    &lt;/h6&gt;
                                &lt;/div&gt;
                                &lt;div class=&quot;col-auto&quot;&gt;
                                    &lt;a id=&quot;AbpTenantSwitchLink&quot; href=&quot;javascript:;&quot; class=&quot;btn btn-sm mt-3 btn-outline-primary&quot;&gt;@MultiTenancyStringLocalizer[&quot;Switch&quot;]&lt;/a&gt;
                                &lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                }
                @(await Component.InvokeAsync&lt;PageAlertsViewComponent&gt;())
                @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Account)
                @RenderBody()
                @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Account)
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;footer class=&quot;footer position-absolute bottom-2 py-2 w-100&quot;&gt;
      &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row align-items-center justify-content-lg-between&quot;&gt;
          &lt;div class=&quot;col-12 col-md-6 my-auto&quot;&gt;
            &lt;div class=&quot;copyright text-center text-sm text-white text-lg-start&quot;&gt;
              © &lt;script&gt;
                document.write(new Date().getFullYear())
              &lt;/script&gt;,
              made with &lt;i class=&quot;fa fa-heart&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; by
              &lt;a href=&quot;https://www.creative-tim.com&quot; class=&quot;font-weight-bold text-white&quot; target=&quot;_blank&quot;&gt;Creative Tim&lt;/a&gt;
              for a better web.
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=&quot;col-12 col-md-6&quot;&gt;
            &lt;ul class=&quot;nav nav-footer justify-content-center justify-content-lg-end&quot;&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/footer&gt;
  &lt;/div&gt;
    &lt;abp-script-bundle name=&quot;@BasicThemeBundles.Scripts.Global&quot; /&gt;
    &lt;script src=&quot;~/Abp/ApplicationConfigurationScript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;~/Abp/ServiceProxyScript&quot;&gt;&lt;/script&gt;

    @await RenderSectionAsync(&quot;scripts&quot;, false)
    @await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Account)
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Repo Link: https://github.com/antosubash/ThemeChange</p>]]></content:encoded>
          </item><item>
          <title>Deploy ABP Framework dotnet core tiered app to docker swarm. Part 9</title>
          <link>https://blog.antosubash.com/posts/abp-deploy-with-docker</link>
          <guid>https://blog.antosubash.com/posts/abp-deploy-with-docker</guid>
          <pubDate>Tue, 28 Sep 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to deploy your dotnet core app with docker container.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to deploy your dotnet core app with docker container.</p>
<h2>Create ABP Tired application</h2>
<pre><code class="language-bash">abp new AbpDocker -t app -u mvc --tiered -dbms PostgreSQL
</code></pre>
<p><strong>Once the app is created update the connection string in all the project and run the <code>DbMigration</code> project to setup the migrations and database seeding.</strong></p>
<h2>Create a same site cookies extension</h2>
<p>you can find the code for that here: https://community.abp.io/articles/patch-for-chrome-login-issue-identityserver4-samesite-cookie-problem-weypwp3n</p>
<p>Here is the code</p>
<pre><code class="language-cs">public static class SameSiteCookiesServiceCollectionExtensions
{
    public static IServiceCollection AddSameSiteCookiePolicy(this IServiceCollection services)
    {
        services.Configure&lt;CookiePolicyOptions&gt;(options =&gt;
        {
            options.MinimumSameSitePolicy = SameSiteMode.Lax;
            options.OnAppendCookie = cookieContext =&gt;
                CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);
            options.OnDeleteCookie = cookieContext =&gt;
                CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);
        });

        return services;
    }

    private static void CheckSameSite(HttpContext httpContext, CookieOptions options)
    {
        if (options.SameSite == SameSiteMode.None)
        {
            var userAgent = httpContext.Request.Headers[&quot;User-Agent&quot;].ToString();
            if (!httpContext.Request.IsHttps || DisallowsSameSiteNone(userAgent))
            {
                // For .NET Core &lt; 3.1 set SameSite = (SameSiteMode)(-1)
                options.SameSite = SameSiteMode.Lax;
            }
        }
    }

    private static bool DisallowsSameSiteNone(string userAgent)
    {
        // Cover all iOS based browsers here. This includes:
        // - Safari on iOS 12 for iPhone, iPod Touch, iPad
        // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad
        // - Chrome on iOS 12 for iPhone, iPod Touch, iPad
        // All of which are broken by SameSite=None, because they use the iOS networking stack
        if (userAgent.Contains(&quot;CPU iPhone OS 12&quot;) || userAgent.Contains(&quot;iPad; CPU OS 12&quot;))
        {
            return true;
        }

        // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:
        // - Safari on Mac OS X.
        // This does not include:
        // - Chrome on Mac OS X
        // Because they do not use the Mac OS networking stack.
        if (userAgent.Contains(&quot;Macintosh; Intel Mac OS X 10_14&quot;) &amp;&amp;
            userAgent.Contains(&quot;Version/&quot;) &amp;&amp; userAgent.Contains(&quot;Safari&quot;))
        {
            return true;
        }

        // Cover Chrome 50-69, because some versions are broken by SameSite=None,
        // and none in this range require it.
        // Note: this covers some pre-Chromium Edge versions,
        // but pre-Chromium Edge does not require SameSite=None.
        if (userAgent.Contains(&quot;Chrome/5&quot;) || userAgent.Contains(&quot;Chrome/6&quot;))
        {
            return true;
        }

        return false;
    }
}
</code></pre>
<p>Add the following line to <code>ConfigureServices()</code> method in all 3 projects.</p>
<pre><code class="language-cs">context.Services.AddSameSiteCookiePolicy();
</code></pre>
<p>Go to <code>OnApplicationInitialization()</code> method in AcmeBookStoreWebModule.cs add <code>app.UseCookiePolicy();</code> in all 3 projects.</p>
<pre><code class="language-cs">app.UseCookiePolicy(); // added this, Before UseAuthentication or anything else that writes cookies.
</code></pre>
<h2>Create a new client for the production app</h2>
<p>Update the <code>appsettings.json</code> from the <code>DbMigrator</code> to add the new client.</p>
<pre><code class="language-json">&quot;AbpDocker_Web_Docker&quot;: {
  &quot;ClientId&quot;: &quot;AbpDocker_Web_Docker&quot;,
  &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
  &quot;RootUrl&quot;: &quot;http://host.docker.internal:9005&quot;
},
</code></pre>
<p>Update the <code>IdentityServerDataSeedContributor</code> in the <code>Domain</code> project and add the new client to the identity server.</p>
<pre><code class="language-cs">//webDockerClient Client
var webDockerClientId = configurationSection[&quot;AbpDocker_Web_Docker:ClientId&quot;];
if (!webClientId.IsNullOrWhiteSpace())
{
    var webClientRootUrl = configurationSection[&quot;AbpDocker_Web_Docker:RootUrl&quot;].EnsureEndsWith(&#x27;/&#x27;);

    await CreateClientAsync(
        name: webDockerClientId,
        scopes: commonScopes,
        grantTypes: new[] { &quot;hybrid&quot; },
        secret: (configurationSection[&quot;AbpDocker_Web_Docker:ClientSecret&quot;] ?? &quot;1q2w3e*&quot;).Sha256(),
        redirectUri: $&quot;{webClientRootUrl}signin-oidc&quot;,
        postLogoutRedirectUri: $&quot;{webClientRootUrl}signout-callback-oidc&quot;,
        frontChannelLogoutUri: $&quot;{webClientRootUrl}Account/FrontChannelLogout&quot;,
        corsOrigins: new[] { webClientRootUrl.RemovePostFix(&quot;/&quot;) }
    );
}
</code></pre>
<p>Run the <code>DbMigrator</code> project again to see the new client.</p>
<h2>Create production config</h2>
<p>Create the <code>appsettings.Production.json</code> in all the three projects.</p>
<h3>HttpApi.Host</h3>
<pre><code class="language-json">{
  &quot;App&quot;: {
    &quot;CorsOrigins&quot;: &quot;https://*.AbpDocker.com&quot;
  },
  &quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;Host=host.docker.internal;Port=5432;Database=AbpDocker;User ID=postgres;Password=postgres;&quot;
  },
  &quot;Redis&quot;: {
    &quot;Configuration&quot;: &quot;host.docker.internal&quot;
  },
  &quot;AuthServer&quot;: {
    &quot;Authority&quot;: &quot;http://host.docker.internal:9006&quot;,
    &quot;RequireHttpsMetadata&quot;: &quot;false&quot;,
    &quot;SwaggerClientId&quot;: &quot;AbpDocker_Swagger&quot;,
    &quot;SwaggerClientSecret&quot;: &quot;1q2w3e*&quot;
  },
  &quot;StringEncryption&quot;: {
    &quot;DefaultPassPhrase&quot;: &quot;WBN0szwYr7wL8Dou&quot;
  }
}
</code></pre>
<h3>IdentityServer</h3>
<pre><code class="language-json">{
  &quot;App&quot;: {
    &quot;SelfUrl&quot;: &quot;http://host.docker.internal:9006&quot;,
    &quot;ClientUrl&quot;: &quot;http://localhost:4200&quot;,
    &quot;CorsOrigins&quot;: &quot;https://*.AbpDocker.com,http://localhost:4200,https://localhost:44307,https://localhost:44375,http://host.docker.internal:9006,http://host.docker.internal:9005,http://host.docker.internal:9007&quot;,
    &quot;RedirectAllowedUrls&quot;: &quot;http://localhost:4200,https://localhost:44307,http://host.docker.internal:9006,http://host.docker.internal:9005,http://host.docker.internal:9007&quot;
  },
  &quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;Host=host.docker.internal;Port=5432;Database=AbpDocker;User ID=postgres;Password=postgres;&quot;
  },
  &quot;Redis&quot;: {
    &quot;Configuration&quot;: &quot;host.docker.internal&quot;
  }
}
</code></pre>
<h3>Web</h3>
<pre><code class="language-json">{
  &quot;App&quot;: {
    &quot;SelfUrl&quot;: &quot;http://host.docker.internal:9005&quot;
  },
  &quot;RemoteServices&quot;: {
    &quot;Default&quot;: {
      &quot;BaseUrl&quot;: &quot;http://host.docker.internal:9007/&quot;
    }
  },
  &quot;Redis&quot;: {
    &quot;Configuration&quot;: &quot;host.docker.internal&quot;
  },
  &quot;AuthServer&quot;: {
    &quot;Authority&quot;: &quot;http://host.docker.internal:9006&quot;,
    &quot;RequireHttpsMetadata&quot;: &quot;false&quot;,
    &quot;ClientId&quot;: &quot;AbpDocker_Web_Docker&quot;,
    &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;
  }
}
</code></pre>
<h2>Add docker support</h2>
<p>Do the following in all 3 projects.</p>
<ul>
<li>
<p><code>Right Click -&gt; Add -&gt; Docker Support</code></p>
<p>This will add <code>Docker</code> file into the project.</p>
</li>
<li>
<p><code>Right Click -&gt; Add -&gt; Container Orchestrator Support</code></p>
<p>This will add the docker file to the <code>docker-compose.yml</code></p>
</li>
</ul>
<p>Add port mapping to the services to the expose the services.</p>
<p>Final <code>docker-compose.yml</code> will look like this.</p>
<pre><code class="language-yml">version: &quot;3.4&quot;

services:
  web:
    image: abpdockerweb
    ports:
      - 9005:80
    build:
      context: .
      dockerfile: src/AbpDocker.Web/Dockerfile

  identityserver:
    image: abpdockeridentityserver
    ports:
      - 9006:80
    build:
      context: .
      dockerfile: src/AbpDocker.IdentityServer/Dockerfile

  httpapi:
    image: abpdockerhttpapihost
    ports:
      - 9007:80
    build:
      context: .
      dockerfile: src/AbpDocker.HttpApi.Host/Dockerfile
</code></pre>
<h2>Build docker containers</h2>
<p>Navigate to the directory where the <code>docker-compose.yml</code> file is present and then run the following command.</p>
<pre><code class="language-bash">docker-compose build
</code></pre>
<h2>Deploy the docker stack</h2>
<pre><code class="language-bash">docker stack deploy -c .\docker-compose.yml abpdocker
</code></pre>
<h2>Run the app</h2>
<p>Visit the web app in http://host.docker.internal:9005</p>
<p>Visit the identity server in http://host.docker.internal:9006</p>
<p>Visit the api in http://host.docker.internal:9007</p>
<p>Repo: https://github.com/antosubash/AbpWithDocker</p>]]></content:encoded>
          </item><item>
          <title>Centralized logging for .net core ABP microservices app using Seq. Part 8</title>
          <link>https://blog.antosubash.com/posts/abp-central-application-logging-with-seq</link>
          <guid>https://blog.antosubash.com/posts/abp-central-application-logging-with-seq</guid>
          <pubDate>Sun, 26 Sep 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to implement a central logging system for your ABP app using Seq.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to implement a central logging system for your ABP app using Seq.</p>
<h2>Deploy the Seq dockers container</h2>
<h3>Enable swarm mode</h3>
<pre><code class="language-bash">docker swarm init
</code></pre>
<p>Create the docker-compose file <code>seq_stack.yaml</code></p>
<pre><code class="language-yaml">version: &quot;3.2&quot;

services:
  seq:
    image: datalust/seq
    ports:
      - 8003:80
      - 5341:5341
    volumes:
      - D:\docker\data\seq:/data
    environment:
      ACCEPT_EULA: &quot;Y&quot;
</code></pre>
<h3>To deploy the stack</h3>
<pre><code class="language-bash">docker stack deploy -c seq_stack.yaml seq
</code></pre>
<p>This will deploy the seq docker container.</p>
<h2>Create ABP Tired application</h2>
<pre><code class="language-bash">abp new SeqWithAbp -t app -u mvc --tiered
</code></pre>
<p>Once the app is created run the <code>DbMigration</code> project to setup the migrations and database seeding.</p>
<h2>Install Seq Sink in the projects</h2>
<p>Install the <code>Serilog.Sinks.Seq</code> nuget package to the following projects.</p>
<ul>
<li>SeqWithAbp.HttpApi.Host</li>
<li>SeqWithAbp.IdentityServer</li>
<li>SeqWithAbp.Web</li>
</ul>
<p>Update the <code>LoggerConfiguration</code> in the <code>Program.cs</code> with the seq endpoint in all the projects.</p>
<pre><code class="language-cs">.WriteTo.Async(c =&gt; c.File(&quot;Logs/logs.txt&quot;))
.WriteTo.Seq(&quot;http://localhost:5341&quot;)
</code></pre>
<p>This will post all the logs to the seq.</p>
<p>Sample Repo : https://github.com/antosubash/SeqWithAbp</p>]]></content:encoded>
          </item><item>
          <title>Extend Tenant management and add custom host to your ABP App. Part 7</title>
          <link>https://blog.antosubash.com/posts/abp-extend-tenant-with-custom-host</link>
          <guid>https://blog.antosubash.com/posts/abp-extend-tenant-with-custom-host</guid>
          <pubDate>Sat, 25 Sep 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to extent the tenant entity and Add a custom tenant resolver for your ABP app.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to extent the tenant entity and Add a custom tenant resolver for your ABP app.</p>
<h2>Add test domain in the host file</h2>
<p>In windows the host file is located in <code>C:\Windows\System32\drivers\etc\hosts</code>. Open the file with the Admin privilege to update the below entry.</p>
<pre><code class="language-bash">127.0.0.1       test1.local
127.0.0.1       test2.local
127.0.0.1       test3.local
</code></pre>
<h2>Create an abp App and Run Migrations</h2>
<h3>Create the App</h3>
<p>Run the following command to create the abp app.</p>
<pre><code class="language-bash">abp new CustomHost
</code></pre>
<h3>Run Migrations</h3>
<p>change directory to src/CustomHost.DbMigrator and run the migration project</p>
<pre><code class="language-bash">dotnet run
</code></pre>
<p>This will create the migrations and seed the data for your project.</p>
<h2>Extend Tenant Entity</h2>
<h3>Configure extra properties</h3>
<p>Create the Constant file in the <code>Domain.Shared</code> project.</p>
<pre><code class="language-cs">public static class Constant
{
    public const string Host = &quot;Host&quot;;
}
</code></pre>
<p>In the <code>Domain.Shared</code> project update the <code>CustomHostModuleExtensionConfigurator</code> file inside the <code>ConfigureExtraProperties</code> methods with the following.</p>
<pre><code class="language-cs">ObjectExtensionManager.Instance.Modules()
        .ConfigureTenantManagement(tenantConfig =&gt;
        {
            tenantConfig.ConfigureTenant(tenant =&gt;
            {
                tenant.AddOrUpdateProperty&lt;string&gt;(Constant.Host);
            });
        });
</code></pre>
<h3>Configure ef core</h3>
<p>In the <code>EntityFrameworkCore</code> project update the <code>CustomHostEfCoreEntityExtensionMappings</code> file inside the <code>Configure</code> method. Update the <code>OneTimeRunner.Run</code> with the following</p>
<pre><code class="language-cs">ObjectExtensionManager.Instance
    .MapEfCoreProperty&lt;Tenant, string&gt;(Constant.Host);
</code></pre>
<h3>Add Migrations</h3>
<p>Navigate to the <code>EntityFrameworkCore</code>.</p>
<pre><code class="language-bash">cd .\src\CustomHost.EntityFrameworkCore\
</code></pre>
<p>Add migrations</p>
<pre><code class="language-bash">dotnet ef migrations add &quot;update_tenant_with_host&quot;
</code></pre>
<p>Apply the migrations</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>Add a custom Tenant Repo</h2>
<h3>Create a Custom Repo Interface in the <code>Domain</code> project</h3>
<pre><code class="language-cs">public interface ICustomTenantRepository : IBasicRepository&lt;Tenant, Guid&gt;
{
    Task&lt;Tenant&gt; GetTenantByHost(string host, CancellationToken cancellationToken = default);
}
</code></pre>
<h2>Implement the custom tenant repo in the <code>EntityFrameworkCore</code> project</h2>
<pre><code class="language-cs">public class CustomTenantRepository : EfCoreRepository&lt;TenantManagementDbContext, Tenant, Guid&gt;, ICustomTenantRepository
{
    public CustomTenantRepository(IDbContextProvider&lt;TenantManagementDbContext&gt; dbContextProvider) : base(dbContextProvider)
    {
    }

    public async Task&lt;Tenant&gt; GetTenantByHost(string host, CancellationToken cancellationToken = default)
    {
        var context = await GetDbContextAsync();
        var tenant =  context.Tenants.Where(u =&gt; EF.Property&lt;string&gt;(u, &quot;Host&quot;) == host);
        return await tenant.FirstOrDefaultAsync(cancellationToken: cancellationToken);
    }
}
</code></pre>
<h3>Add the custom Repo to the DbContext</h3>
<pre><code class="language-cs">options.AddRepository&lt;Tenant, CustomTenantRepository&gt;();
</code></pre>
<h2>Implement Host Tenant Resolve Contributor</h2>
<p>Create a file called <code>HostTenantResolveContributor</code> in the Domain Project</p>
<pre><code class="language-cs">public class HostTenantResolveContributor : TenantResolveContributorBase
{
    public override async Task ResolveAsync(ITenantResolveContext context)
    {
        var currentContextAccessor = context.ServiceProvider.GetRequiredService&lt;IHttpContextAccessor&gt;();
        var tenantRepository = context.ServiceProvider.GetRequiredService&lt;ICustomTenantRepository&gt;();

        var host = currentContextAccessor?.HttpContext?.Request.Host.Host;
        if (tenantRepository != null)
        {
            var tenant = await tenantRepository.GetTenantByHost(host);

            if (tenant != null)
            {
                context.TenantIdOrName = tenant.Name;
            }
        }
    }

    public override string Name =&gt; &quot;Host&quot;;
}
</code></pre>
<h2>Configure the <code>AbpTenantResolveOptions</code> in the <code>Web</code> project at <code>ConfigureServices</code> method</h2>
<pre><code class="language-cs">Configure&lt;AbpTenantResolveOptions&gt;(options =&gt;
{
    options.TenantResolvers.Clear();
    options.TenantResolvers.Add(new HostTenantResolveContributor());
});
</code></pre>
<h2>Update the <code>CustomHostBrandingProvider</code> in the <code>Web</code> project to display the current tenant name.</h2>
<pre><code class="language-cs">[Dependency(ReplaceServices = true)]
public class CustomHostBrandingProvider : DefaultBrandingProvider
{
    private readonly ICurrentTenant _currentTenant;
    public override string AppName =&gt; _currentTenant.Name ?? &quot;CustomHost&quot;;

    public CustomHostBrandingProvider(ICurrentTenant currentTenant)
    {
        _currentTenant = currentTenant;
    }
}
</code></pre>
<p>This will display the current tenant name in the home page.</p>
<p>Now create the new tenant and set the host name and use that host name to login to the app.</p>
<p>GitHub Repo : https://github.com/antosubash/TenantWithCustomHost</p>]]></content:encoded>
          </item><item>
          <title>Add profile picture to User Entity in ABP app using BlobStore and Minio. Part 6</title>
          <link>https://blog.antosubash.com/posts/abp-extend-user-entity-with-profile-picture</link>
          <guid>https://blog.antosubash.com/posts/abp-extend-user-entity-with-profile-picture</guid>
          <pubDate>Sun, 15 Aug 2021 00:00:00 GMT</pubDate>
          <description>In this post we will implement the profile picture upload for the ABP app using BlobStore and Minio.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will implement the profile picture upload for the ABP app using BlobStore and Minio.</p>
<h2>Create a new project</h2>
<pre><code class="language-bash">abp new ProfilePictureSample
</code></pre>
<h2>Create a container</h2>
<p>Create the container in <code>Domain</code> project.</p>
<p>Install <code>Volo.Abp.BlobStoring</code> NuGet package to your <code>Domain</code> project</p>
<pre><code class="language-cs">[BlobContainerName(&quot;profile-picture&quot;)]
public class ProfilePictureContainer
{
}
</code></pre>
<h2>Configure Minio</h2>
<p>Install <code>Volo.Abp.BlobStoring.Minio</code> NuGet package to your <code>Web</code> and add <code>[DependsOn(typeof(AbpBlobStoringMinioModule))]</code> to the <code>Web</code> Module</p>
<p>Configuration is done in the <code>ConfigureServices</code> method of your module class</p>
<pre><code class="language-cs">Configure&lt;AbpBlobStoringOptions&gt;(options =&gt;
{
    options.Containers.ConfigureDefault(container =&gt;
    {
        container.UseMinio(minio =&gt;
        {
            minio.EndPoint = &quot;localhost:9900&quot;; // your minio endPoint
            minio.AccessKey = &quot;AKIAIOSFODNN7EXAMPLE&quot;; // your minio accessKey
            minio.SecretKey = &quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;; // your minio secretKey
            minio.BucketName = &quot;profile-picture&quot;; // your minio bucketName
        });
    });
});
</code></pre>
<h2>Extend User Entity</h2>
<h3>Configure extra properties</h3>
<p>Create the Constant file in the <code>Domain.Shared</code> project.</p>
<pre><code class="language-cs">public static class ProfilePictureConsts
{
    public const string ProfilePictureId = &quot;ProfilePictureId&quot;;
}
</code></pre>
<p>In the <code>Domain.Shared</code> project update the <code>ProfilePictureSampleModuleExtensionConfigurator</code> file inside the <code>ConfigureExtraProperties</code> methods with the following.</p>
<pre><code class="language-cs">ObjectExtensionManager.Instance.Modules()
    .ConfigureIdentity(identity =&gt;
    {
        identity.ConfigureUser(user =&gt;
        {
            user.AddOrUpdateProperty&lt;Guid&gt;(ProfilePictureConsts.ProfilePictureId);
        });
    });
</code></pre>
<h3>Configure ef core</h3>
<p>In the <code>EntityFrameworkCore</code> project update the <code>ProfilePictureSampleEfCoreEntityExtensionMappings</code> file inside the <code>Configure</code> method. Update the <code>OneTimeRunner.Run</code> with the following</p>
<pre><code class="language-cs">ObjectExtensionManager.Instance
    .MapEfCoreProperty&lt;IdentityUser, Guid&gt;(ProfilePictureConsts.ProfilePictureId);
</code></pre>
<h3>Add Migrations</h3>
<p>Navigate to the <code>EntityFrameworkCore</code>.</p>
<pre><code class="language-bash">cd .\src\ProfilePictureSample.EntityFrameworkCore\
</code></pre>
<p>Add migrations</p>
<pre><code class="language-bash">dotnet ef migrations add &quot;update_user&quot;
</code></pre>
<p>Apply the migrations</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>Create the AppService</h2>
<p>Create a AppService to upload and view the profile picture.</p>
<pre><code class="language-cs">[Authorize]
public class ProfilePictureAppService : ProfilePictureSampleAppService
{
    private readonly IBlobContainer&lt;ProfilePictureContainer&gt; _blobContainer;
    private readonly IRepository&lt;IdentityUser, Guid&gt; _repository;

    public ProfilePictureAppService(IBlobContainer&lt;ProfilePictureContainer&gt; blobContainer, IRepository&lt;IdentityUser, Guid&gt; repository)
    {
        _blobContainer = blobContainer;
        _repository = repository;
    }

    public virtual async Task&lt;Guid&gt; UploadAsync(IFormFile file)
    {
        await using var memoryStream = new MemoryStream();
        await file.CopyToAsync(memoryStream).ConfigureAwait(false);
        if (CurrentUser.Id == null)
        {
            return Guid.Empty;
        }

        var user = await _repository.GetAsync(CurrentUser.Id.Value).ConfigureAwait(false);
        var pictureId = user.GetProperty&lt;Guid&gt;(ProfilePictureConsts.ProfilePictureId);

        if (pictureId == Guid.Empty)
        {
            pictureId = Guid.NewGuid();
        }
        var id = pictureId.ToString();
        if (await _blobContainer.ExistsAsync(id).ConfigureAwait(false))
        {
            await _blobContainer.DeleteAsync(id).ConfigureAwait(false);
        }
        await _blobContainer.SaveAsync(id, memoryStream.ToArray()).ConfigureAwait(false);
        user.SetProperty(ProfilePictureConsts.ProfilePictureId, pictureId);
        await _repository.UpdateAsync(user).ConfigureAwait(false);
        return pictureId;
    }

    public async Task&lt;FileResult&gt; GetAsync()
    {
        if (CurrentUser.Id == null)
        {
            throw new FileNotFoundException();
        }

        var user = await _repository.GetAsync(CurrentUser.Id.Value).ConfigureAwait(false);
        var pictureId = user.GetProperty&lt;Guid&gt;(ProfilePictureConsts.ProfilePictureId);
        if (pictureId == default)
        {
            throw new FileNotFoundException();
        }

        var profilePicture = await _blobContainer.GetAllBytesOrNullAsync(pictureId.ToString()).ConfigureAwait(false);
        return new FileContentResult(profilePicture, &quot;image/jpeg&quot;);

    }
}
</code></pre>
<h2>Repo <a href="https://github.com/antosubash/AbpProfilePictureSample">Link</a></h2>]]></content:encoded>
          </item><item>
          <title>dotnet core large file upload with resume using tus and react/nextjs</title>
          <link>https://blog.antosubash.com/posts/dotnet-and-react-nextjs-large-file-upload-with-tus</link>
          <guid>https://blog.antosubash.com/posts/dotnet-and-react-nextjs-large-file-upload-with-tus</guid>
          <pubDate>Thu, 22 Jul 2021 00:00:00 GMT</pubDate>
          <description>In this post you will see how to upload large files with resume using tus. We will use dotnet core for the backend and nextjs for the frontend</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Large file upload with dotnet and react with tus</h2>
<p>In this post we will see how to do large file upload in chunks with resume capabilities in dotnet core as a backend and react/nextjs as frontend.</p>
<h2>dotnet project</h2>
<h3>Create the .net project using this following command</h3>
<pre><code class="language-bash">dotnet new webapp -n FileUpload -o .
</code></pre>
<h3>Add tusdotnet nuget package</h3>
<pre><code class="language-bash">dotnet add package tusdotnet --version 2.4.0
</code></pre>
<h3>Enable Cors</h3>
<p>Update the <code>ConfigureServices</code></p>
<pre><code class="language-bash">services.AddCors();
</code></pre>
<p>Update <code>Configure</code> method</p>
<pre><code class="language-bash">app.UseCors(builder =&gt; builder
        .AllowAnyHeader()
        .AllowAnyMethod()
        .AllowAnyOrigin()
        .WithExposedHeaders(CorsHelper.GetExposedHeaders()));
</code></pre>
<h3>Configure MaxRequestBodySize</h3>
<p>Update <code>Configure</code> method and make sure this is the first pipeline request.</p>
<pre><code class="language-cs">app.Use((context, next) =&gt;
{
    // Default limit was changed some time ago. Should work by setting MaxRequestBodySize to null using ConfigureKestrel but this does not seem to work for IISExpress.
    // Source: https://github.com/aspnet/Announcements/issues/267
    context.Features.Get&lt;IHttpMaxRequestBodySizeFeature&gt;().MaxRequestBodySize = null;
    return next.Invoke();
});
</code></pre>
<h3>Configure tus</h3>
<p>Update <code>Configure</code> method</p>
<pre><code class="language-cs">app.UseTus(httpContext =&gt; new DefaultTusConfiguration
{
    Store = new TusDiskStore(@&quot;C:\tusfiles\&quot;),
    UrlPath = &quot;/files&quot;,
    Events = new Events
    {
        OnFileCompleteAsync = async eventContext =&gt;
        {
            // eventContext.FileId is the id of the file that was uploaded.
            // eventContext.Store is the data store that was used (in this case an instance of the TusDiskStore)

            // A normal use case here would be to read the file and do some processing on it.
            ITusFile file = await eventContext.GetFileAsync();
            var result = await DoSomeProcessing(file, eventContext.CancellationToken).ConfigureAwait(false);

            if (!result)
            {
                //throw new MyProcessingException(&quot;Something went wrong during processing&quot;);
            }
        }
    }
});
</code></pre>
<p>Make sure to put this before <code>UseRouting</code> and <code>UseAuthorization</code></p>
<h2>Nextjs App</h2>
<p>Create next app</p>
<pre><code class="language-bash">yarn create next-app --typescript
</code></pre>
<p>Add tus package</p>
<pre><code class="language-bash">yarn add tus-js-client
</code></pre>
<p>Create file upload component</p>
<pre><code class="language-js">import React from &quot;react&quot;;
import { Upload } from &quot;tus-js-client&quot;;
interface Props {}

const FileUpload = (props: Props) =&gt; {
  const onFileChange = (e: any) =&gt; {
    var file = e.target.files[0];
    const upload = new Upload(file, {
      endpoint: &quot;https://localhost:5001/files&quot;,
      retryDelays: [0, 1000, 3000, 5000],
      metadata: {
        filename: file.name,
        filetype: file.type,
      },
      onError: function (error) {
        console.log(&quot;Failed because: &quot; + error);
      },
      onProgress: function (bytesUploaded, bytesTotal) {
        var percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
        console.log(bytesUploaded, bytesTotal, percentage + &quot;%&quot;);
      },
      onSuccess: function () {
        console.log(&quot;Download %s from %s&quot;, upload.file.name, upload.url);
      },
    });

    // Check if there are any previous uploads to continue.
    upload.findPreviousUploads().then(function (previousUploads) {
      // Found previous uploads so we select the first one.
      if (previousUploads.length) {
        upload.resumeFromPreviousUpload(previousUploads[0]);
      }

      // Start the upload
      upload.start();
    });
  };
  return (
    &lt;div className=&quot;text-center text-2xl p-6&quot;&gt;
      &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot; onChange={onFileChange} /&gt;
    &lt;/div&gt;
  );
};

export default FileUpload;
</code></pre>
<p>Add the component to the page.</p>
<pre><code class="language-html">&lt;FileUpload&gt;&lt;/FileUpload&gt;
</code></pre>
<p>Github Repo: https://github.com/antosubash/LargeFileUploadSample</p>]]></content:encoded>
          </item><item>
          <title>dotnet file upload with ABP Blob store and Minio</title>
          <link>https://blog.antosubash.com/posts/dotnet-file-upload-with-abp</link>
          <guid>https://blog.antosubash.com/posts/dotnet-file-upload-with-abp</guid>
          <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
          <description>In this post we will implement file upload using the ABP blob store and Minio</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will implement file upload using the ABP blob store and Minio</p>
<h2>Create a new project</h2>
<pre><code class="language-bash">abp new FileUpload
</code></pre>
<h2>Create a container</h2>
<p>Create the container in <code>Domain</code> project.</p>
<p>Install <code>Volo.Abp.BlobStoring</code> NuGet package to your <code>Domain</code> project</p>
<pre><code class="language-cs">[BlobContainerName(&quot;document&quot;)]
public class DocumentContainer
{
}
</code></pre>
<h2>Create the Entity and Entity Dto</h2>
<p>Create the Entity in <code>Domain</code> project.</p>
<pre><code class="language-cs">public class Document : FullAuditedAggregateRoot&lt;Guid&gt;, IMultiTenant
{
    public long FileSize { get; set; }

    public string MimeType { get; set; }

    public Guid? TenantId { get; set; }

    protected Document()
    {
    }

    public Document(
        Guid id,
        long fileSize,
        string mimeType,
        Guid? tenantId
    ) : base(id)
    {
        FileSize = fileSize;
        MimeType = mimeType;
        TenantId = tenantId;
    }
}
</code></pre>
<p>Create EntityDto in <code>Contracts</code> project</p>
<pre><code class="language-cs">public class DocumentDto : EntityDto&lt;Guid&gt;
{
    public long FileSize { get; set; }

    public string FileUrl { get; set; }

    public string MimeType { get; set; }
}
</code></pre>
<p>Add mapping for the Entity and Dto in the <code>ApplicationAutoMapperProfile</code> class in the <code>Application</code> project</p>
<pre><code class="language-cs">CreateMap&lt;Document, DocumentDto&gt;().ReverseMap();
</code></pre>
<h2>Add entity to the DBContext</h2>
<p>Add DbSet</p>
<pre><code class="language-cs">public DbSet&lt;Document&gt; Documents { get; set; }
</code></pre>
<p>Configure Ef core</p>
<pre><code class="language-cs">builder.Entity&lt;Document&gt;(b =&gt;
{
    b.ToTable(FileUploadConsts.DbTablePrefix + &quot;Document&quot;, FileUploadConsts.DbSchema);
    b.ConfigureByConvention();
});
</code></pre>
<h2>Add migration and update the database</h2>
<p>To create ef migration</p>
<pre><code class="language-bash">dotnet ef migrations add &quot;added_documents&quot;
</code></pre>
<p>To update the database</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>Configure Minio</h2>
<p>Install <code>Volo.Abp.BlobStoring.Minio</code> NuGet package to your <code>Web</code> and add <code>[DependsOn(typeof(AbpBlobStoringMinioModule))]</code> to the <code>Web</code> Module</p>
<p>Configuration is done in the <code>ConfigureServices</code> method of your module class</p>
<pre><code class="language-cs">Configure&lt;AbpBlobStoringOptions&gt;(options =&gt;
{
    options.Containers.ConfigureDefault(container =&gt;
    {
        container.UseMinio(minio =&gt;
        {
            minio.EndPoint = &quot;localhost:9900&quot;; // your minio endPoint
            minio.AccessKey = &quot;AKIAIOSFODNN7EXAMPLE&quot;; // your minio accessKey
            minio.SecretKey = &quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;; // your minio secretKey
            minio.BucketName = &quot;test1&quot;; // your minio bucketName
        });
    });
});
</code></pre>
<h2>Create Document AppService</h2>
<p>The app service will have 2 methods one is to upload the files and another one is to view the files.</p>
<pre><code class="language-cs">public class DocumentAppService : FileUploadAppService
{
    private readonly IBlobContainer&lt;DocumentContainer&gt; _blobContainer;
    private readonly IRepository&lt;Document, Guid&gt; _repository;
    public DocumentAppService(IRepository&lt;Document, Guid&gt; repository, IBlobContainer&lt;DocumentContainer&gt; blobContainer)
    {
        _repository = repository;
        _blobContainer = blobContainer;
    }

    public async Task&lt;List&lt;DocumentDto&gt;&gt; Upload([FromForm] List&lt;IFormFile&gt; files)
    {
        var output = new List&lt;DocumentDto&gt;();
        foreach (var file in files)
        {
            using var memoryStream = new MemoryStream();
            await file.CopyToAsync(memoryStream).ConfigureAwait(false);
            var id = Guid.NewGuid();
            var newFile = new Document(id, file.Length, file.ContentType, CurrentTenant.Id);
            var created = await _repository.InsertAsync(newFile);
            await _blobContainer.SaveAsync(id.ToString(), memoryStream.ToArray()).ConfigureAwait(false);
            output.Add(ObjectMapper.Map&lt;Document, DocumentDto&gt;(newFile));
        }

        return output;
    }

    public async Task&lt;FileResult&gt; Get(Guid id)
    {
        var currentFile = _repository.FirstOrDefault(x =&gt; x.Id == id);
        if (currentFile != null)
        {
            var myfile = await _blobContainer.GetAllBytesOrNullAsync(id.ToString());
            return new FileContentResult(myfile, currentFile.MimeType);
        }

        throw new FileNotFoundException();
    }
}
</code></pre>
<p>Repo Link : https://github.com/antosubash/FileUpload</p>]]></content:encoded>
          </item><item>
          <title>Setting up oh-my-posh and PSReadLine in PowerShell</title>
          <link>https://blog.antosubash.com/posts/setting-up-powershell-with-oh-my-posh-v3</link>
          <guid>https://blog.antosubash.com/posts/setting-up-powershell-with-oh-my-posh-v3</guid>
          <pubDate>Wed, 30 Jun 2021 00:00:00 GMT</pubDate>
          <description>In this post we will see how to setup the oh-my-posh and PSReadLine with PowerShell.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2><a href="https://ohmyposh.dev">Oh My Posh</a></h2>
<p>Oh my is a prompt theme engine for PowerShell. It has many builtin themes and you can also create your own theme if you want. Lets see how you can install it and setup ohmyposh.</p>
<h3>Install in PowerShell Module</h3>
<pre><code class="language-bash">Install-Module oh-my-posh -Scope AllUsers
</code></pre>
<p>This will install ohmyposh to all the users.</p>
<p>If you are using the older version of the Oh My Posh. please update or uninstall the module.</p>
<p>To update</p>
<pre><code class="language-bash">Update-Module -Name oh-my-posh
</code></pre>
<p>To uninstall</p>
<pre><code class="language-bash">UnInstall-Module -Name oh-my-posh
</code></pre>
<h3>Install fonts</h3>
<p>Oh My Posh uses <a href="https://www.nerdfonts.com/">Nerd Font</a>. It is recommed to use <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">Meslo Lgm NF</a></p>
<p>Download the fonts and install install it.</p>
<h3>Setting the font in Windows Terminal</h3>
<p>Once the font is installed set the font as a default font in Windows Terminal.</p>
<pre><code class="language-json">{
  &quot;profiles&quot;: {
    &quot;defaults&quot;: {
      &quot;fontFace&quot;: &quot;MesloLGM NF&quot;
    }
  }
}
</code></pre>
<h3>View themes and select one you like</h3>
<pre><code class="language-bash">Get-PoshThemes
</code></pre>
<h3>Import module and set theme</h3>
<p>Once you have decided on the theme we can import module and set the theme.</p>
<p>We need to update the PowerShell profile to import and set the theme.</p>
<p>To open the profile use this command.</p>
<pre><code class="language-bash">notepad.exe $PROFILE
</code></pre>
<p>This will open the PowerShell profile in notepad.</p>
<p>Update the PowerShell with the following</p>
<pre><code class="language-bash">Import-Module oh-my-posh
Set-PoshPrompt powerlevel10k_rainbow
</code></pre>
<p>This will import the Oh My Posh and set the theme.</p>
<h2>Install PSReadLine and PowerShellGet</h2>
<p>Before updating PowerShellGet, you should always install the latest NuGet provider. From an elevated PowerShell session, run the following command.</p>
<pre><code class="language-bash">Install-PackageProvider -Name NuGet -Force
</code></pre>
<h3>Install or update the PowerShellGet</h3>
<p>To install</p>
<pre><code class="language-bash">Install-Module -Name PowerShellGet -Force
</code></pre>
<p>To update</p>
<pre><code class="language-bash">Update-Module -Name PowerShellGet
</code></pre>
<h3>Install PSReadLine</h3>
<p>To install</p>
<pre><code class="language-bash">Install-Module -Name PSReadLine -AllowPrerelease
</code></pre>
<h3>Import and configure PSReadLine</h3>
<p>Open the powershell profile</p>
<pre><code class="language-bash">notepad $profile
</code></pre>
<p>Add the PSReadLine config</p>
<pre><code class="language-bash">Import-Module PSReadLine
Set-PSReadLineOption -EditMode Windows
Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -PredictionViewStyle ListView
Set-PSReadLineOption -PredictionViewStyle InlineView
</code></pre>
<p>For more config look <a href="https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/SamplePSReadLineProfile.ps1">here</a></p>
<h3>Install Terminal-Icons</h3>
<p>To install the module from the PowerShell Gallery:</p>
<pre><code class="language-bash">Install-Module -Name Terminal-Icons -Repository PSGallery
</code></pre>
<p>Open the powershell profile</p>
<pre><code class="language-bash">notepad $profile
</code></pre>
<p>Import the terminal font</p>
<pre><code class="language-bash">Import-Module -Name Terminal-Icons
</code></pre>
<p>Open a new prompt and verify if you the icons with the following command</p>
<pre><code class="language-bash">Get-ChildItem -Path . -Force
</code></pre>]]></content:encoded>
          </item><item>
          <title>Flutter Authentication using OpenID, ABP and IdentityServer4. Part 5</title>
          <link>https://blog.antosubash.com/posts/abp-auth-with-flutter-p5</link>
          <guid>https://blog.antosubash.com/posts/abp-auth-with-flutter-p5</guid>
          <pubDate>Sat, 29 May 2021 00:00:00 GMT</pubDate>
          <description>In this post we will implement the OAuth for the Flutter app.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will implement the OAuth for the Flutter app.</p>
<h2>1. Adding a new client to the IdentityServer</h2>
<p>first step is to create a new client for the nextjs application. list of client is available in the <code>appsettings.json</code> file at <code>DbMigrator</code> project.</p>
<h3>1.1 Add the new json entry</h3>
<pre><code class="language-json">&quot;Todos_Flutter_2&quot;: {
  &quot;ClientId&quot;: &quot;Todos_Flutter_2&quot;,
  &quot;RedirectUri&quot;: &quot;http://localhost:3000/&quot;
},
</code></pre>
<h3>1.2 Update the CreateClientsAsync method</h3>
<p>In the <code>Domain</code> project there is a <code>IdentityServerDataSeedContributor</code> class which has the <code>CreateClientsAsync</code> method. This method creates the Identity server clients during the migrations. so we will update this method to include the new json entry.</p>
<pre><code class="language-cs">// Flutter2 Client
var flutter2Client = configurationSection[&quot;Todos_Flutter_2:ClientId&quot;];
if (!flutter2Client.IsNullOrWhiteSpace())
{
    var redirectUrl = configurationSection[&quot;Todos_Flutter_2:RedirectUri&quot;];
    await CreateClientAsync(
        name: flutter2Client,
        scopes: commonScopes,
        grantTypes: new[] { &quot;authorization_code&quot; },
        requireClientSecret: false,
        redirectUri: redirectUrl
    );
}
</code></pre>
<h3>1.3 Run the migration</h3>
<p>Now run the migration to add the client to the DB.</p>
<h2>2. Exposing localhost using ngrok</h2>
<p><code>.\ngrok.exe http https://localhost:44354</code></p>
<h2>3. Creating a flutter app</h2>
<p>Create the flutter app</p>
<pre><code class="language-bash">flutter create mytodoapp
</code></pre>
<p>Move into the folder</p>
<pre><code class="language-bash">cd mytodoapp
</code></pre>
<p>List the devices</p>
<pre><code class="language-bash">flutter devices
</code></pre>
<p>Run the app</p>
<pre><code class="language-bash">flutter run
</code></pre>
<h2>4. Add dependencies</h2>
<pre><code class="language-yaml">dependencies:
  openid_client: ^0.4.1
  url_launcher: ^6.0.4
</code></pre>
<h3>4.1 Update the Android Manifest</h3>
<p>Update the android app to use the <code>usesCleartextTraffic</code></p>
<p>you can find the android manifest in <code>mytodoapp\android\app\src\main</code></p>
<pre><code class="language-xml">&lt;application
    android:usesCleartextTraffic=&quot;true&quot;
    android:label=&quot;mytodos&quot;
    android:icon=&quot;@mipmap/ic_launcher&quot;&gt;
</code></pre>
<h2>5. Create flutter page to login and logout</h2>
<pre><code>import &#x27;package:flutter/material.dart&#x27;;
import &#x27;package:openid_client/openid_client.dart&#x27;;
import &#x27;package:openid_client/openid_client_io.dart&#x27;;
import &#x27;package:url_launcher/url_launcher.dart&#x27;;
import &#x27;dart:async&#x27;;

class HomePage extends StatefulWidget {
  HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() =&gt; _HomePageState();
}

class _HomePageState extends State&lt;HomePage&gt; {
  final String _clientId = &#x27;Todos_Flutter_2&#x27;;
  static const String _issuer = &#x27;https://d78170304b87.ngrok.io&#x27;;
  final List&lt;String&gt; _scopes = &lt;String&gt;[
    &#x27;openid&#x27;,
    &#x27;profile&#x27;,
    &#x27;email&#x27;,
    &#x27;offline_access&#x27;,
    &#x27;Todos&#x27;
  ];
  String logoutUrl = &quot;&quot;;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(&quot;Home&quot;),
      ),
      body: Container(
        child: Center(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                child: Text(&quot;Login&quot;),
                onPressed: () async {
                  var tokenInfo = await authenticate(
                      Uri.parse(_issuer), _clientId, _scopes);
                  print(tokenInfo.accessToken);
                },
              ),
              ElevatedButton(
                child: Text(&quot;Logout&quot;),
                onPressed: () async {
                  logout();
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future&lt;TokenResponse&gt; authenticate(
      Uri uri, String clientId, List&lt;String&gt; scopes) async {
    // create the client
    var issuer = await Issuer.discover(uri);
    var client = new Client(issuer, clientId);

    // create a function to open a browser with an url
    urlLauncher(String url) async {
      if (await canLaunch(url)) {
        await launch(url, forceWebView: true, enableJavaScript: true);
      } else {
        throw &#x27;Could not launch $url&#x27;;
      }
    }

    // create an authenticator
    var authenticator = new Authenticator(
      client,
      scopes: scopes,
      urlLancher: urlLauncher,
      port: 3000,
    );

    // starts the authentication
    var c = await authenticator.authorize();
    // close the webview when finished
    closeWebView();

    var res = await c.getTokenResponse();
    setState(() {
      logoutUrl = c.generateLogoutUrl().toString();
    });
    print(res.accessToken);
    return res;
  }

  Future&lt;void&gt; logout() async {
    if (await canLaunch(logoutUrl)) {
      await launch(logoutUrl, forceWebView: true);
    } else {
      throw &#x27;Could not launch $logoutUrl&#x27;;
    }
    await Future.delayed(Duration(seconds: 2));
    closeWebView();
  }
}
</code></pre>
<h2>Github Repo Link : https://github.com/antosubash/Todos</h2>]]></content:encoded>
          </item><item>
          <title>Application features with dotnet core and ABP. Part 4</title>
          <link>https://blog.antosubash.com/posts/abp-feature-p4</link>
          <guid>https://blog.antosubash.com/posts/abp-feature-p4</guid>
          <pubDate>Mon, 17 May 2021 00:00:00 GMT</pubDate>
          <description>ABP Feature system is used to enable, disable or change the behavior of the application features on runtime.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>ABP Feature system is used to enable, disable or change the behavior of the application features on runtime.</p>
<h2>Create feature constant</h2>
<pre><code class="language-cs">public static class TodoFeatures
{
    public const string Todo = &quot;Todo&quot;;
    public const string MaxTodoPerUser = &quot;MaxTodoPerUser&quot;;
}
</code></pre>
<h2>Create feature definition provider</h2>
<pre><code class="language-cs">public class TodoFeatureDefinitionProvider : FeatureDefinitionProvider
{
    public override void Define(IFeatureDefinitionContext context)
    {
        var myGroup = context.AddGroup(&quot;MyTodoApp&quot;);

        myGroup.AddFeature(
            TodoFeatures.Todo,
            defaultValue: &quot;false&quot;,
            displayName: L(&quot;Todo&quot;),
            valueType: new ToggleStringValueType()
        );

        myGroup.AddFeature(
            TodoFeatures.MaxTodoPerUser,
            defaultValue: &quot;10&quot;,
            displayName: L(&quot;MaxTodoPerUser&quot;),
            valueType: new FreeTextStringValueType(
                            new NumericValueValidator(0, 1000000))
        );
    }

    private static LocalizableString L(string name)
    {
        return LocalizableString.Create&lt;TodosResource&gt;(name);
    }
}
</code></pre>
<h2>Expose api base on feature</h2>
<p>You can use the <code>RequiresFeature</code> attribute to restrict access to the api endpoint.</p>
<pre><code class="language-cs">[RequiresFeature(TodoFeatures.Todo)]
</code></pre>
<h2>IFeatureChecker service</h2>
<p>you can use the FeatureChecker service to check if the feature is enabled or not and get the value of the feature.</p>
<pre><code class="language-cs">var maxTodoPerUser = await FeatureChecker.GetAsync&lt;int&gt;(TodoFeatures.MaxTodoPerUser);
</code></pre>
<p>For more info check the official docs : https://docs.abp.io/en/abp/latest/Features</p>]]></content:encoded>
          </item><item>
          <title>Authorization in dotnet core with ABP. Part 3</title>
          <link>https://blog.antosubash.com/posts/abp-authorization-p3</link>
          <guid>https://blog.antosubash.com/posts/abp-authorization-p3</guid>
          <pubDate>Sun, 16 May 2021 00:00:00 GMT</pubDate>
          <description>In this post we will implement the Authorization in ABP with IdentityServer</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we are going to setup the authorization for the dotnet core ABP app. ABP extends ASP.NET Core Authorization by adding permissions as auto policies.</p>
<h2>Creating permission</h2>
<p>In the ABP application the permission are available in the <code>Contracts</code> project. Find the Permissions class and add your custom permission.</p>
<pre><code class="language-cs">public static class Todo
{
    public const string Default = GroupName + &quot;.Todo&quot;;
    public const string Create = Default + &quot;.Create&quot;;
    public const string Update = Default + &quot;.Update&quot;;
    public const string Delete = Default + &quot;.Delete&quot;;
}
</code></pre>
<h2>Define permission</h2>
<p><code>PermissionDefinitionProvider</code> is where you have to define the permissions.</p>
<pre><code class="language-cs">var myGroup = context.AddGroup(TodosPermissions.GroupName);

var todoPermission = myGroup.AddPermission(TodosPermissions.Todo.Default, L(&quot;Permission:Default&quot;));
todoPermission.AddChild(TodosPermissions.Todo.Create, L(&quot;Permission:Create&quot;));
todoPermission.AddChild(TodosPermissions.Todo.Update, L(&quot;Permission:Update&quot;));
todoPermission.AddChild(TodosPermissions.Todo.Delete, L(&quot;Permission:Delete&quot;));
</code></pre>
<h2>Protecting api endpoint based on permission</h2>
<p>Once the permission is defined now we can create use the <code>Authorize</code> attribute to enforce the permission</p>
<pre><code class="language-cs">[Authorize(TodosPermissions.Todo.Default)]
public async Task&lt;List&lt;TodoDto&gt;&gt; GetAll()
{
    return ObjectMapper.Map&lt;List&lt;Todo&gt;, List&lt;TodoDto&gt;&gt;(await todoRepository.GetListAsync());
}
</code></pre>
<p>In the above code we have added the default permission to the getAll api call.</p>
<h2>Checking permission</h2>
<p>ASP.NET Core provides the <code>IAuthorizationService</code> that can be used to check for authorization. Once you inject, you can use it in your code to conditionally control the authorization.</p>
<pre><code class="language-cs">var result = await AuthorizationService
    .AuthorizeAsync(TodosPermissions.Todo.Default);
if (result.Succeeded == false)
{
    //throw exception
    throw new AbpAuthorizationException(&quot;...&quot;);
}
</code></pre>
<p>or</p>
<pre><code class="language-cs">await AuthorizationService.CheckAsync(TodosPermissions.Todo.Default);
</code></pre>
<p>For more info check the official docs : https://docs.abp.io/en/abp/latest/Authorization</p>]]></content:encoded>
          </item><item>
          <title>SPA Authentication using Next.js, ABP and IdentityServer4. Part 2</title>
          <link>https://blog.antosubash.com/posts/abp-auth-with-nextjs-p2</link>
          <guid>https://blog.antosubash.com/posts/abp-auth-with-nextjs-p2</guid>
          <pubDate>Sat, 06 Mar 2021 00:00:00 GMT</pubDate>
          <description>In this post we will implement the SPA authentication for the Nexjs.js app as the frontend and ABP with IdentityServer as Backend</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to create a Identity server Client and configure it to implement authenticate for the Next.js Application.</p>
<h2>1. Adding a new client to the IdentityServer</h2>
<p>first step is to create a new client for the nextjs application. list of client is available in the <code>appsettings.json</code> file at <code>DbMigrator</code> project.</p>
<h3>1.1 Add the new json entry</h3>
<pre><code class="language-json">&quot;Todos_Spa_1&quot;: {
    &quot;ClientId&quot;: &quot;Todos_Spa_1&quot;,
    &quot;ClientSecret&quot;: &quot;1q2w3e*&quot;,
    &quot;RootUrl&quot;: &quot;http://localhost:3000&quot;
},
</code></pre>
<h3>1.2 Update the CreateClientsAsync method</h3>
<p>In the <code>Domain</code> project there is a <code>IdentityServerDataSeedContributor</code> class which has the <code>CreateClientsAsync</code> method. This method creates the Identity server clients during the migrations. so we will update this method to include the new json entry.</p>
<pre><code class="language-cs">// React Client
var reactClient = configurationSection[&quot;Todos_Spa_1:ClientId&quot;];
if (!reactClient.IsNullOrWhiteSpace())
{
    var webClientRootUrl = configurationSection[&quot;Todos_Spa_1:RootUrl&quot;]?.TrimEnd(&#x27;/&#x27;);

    await CreateClientAsync(
        name: reactClient,
        scopes: commonScopes,
        grantTypes: new[] { &quot;client_credentials&quot;, &quot;authorization_code&quot; },
        secret: (configurationSection[&quot;Todos_Spa_1:ClientSecret&quot;] ?? &quot;1q2w3e*&quot;).Sha256(),
        requireClientSecret: false,
        redirectUri: $&quot;{webClientRootUrl}/authentication/login-callback/identity-server4&quot;,
        postLogoutRedirectUri: $&quot;{webClientRootUrl}&quot;,
        corsOrigins: new[] { webClientRootUrl.RemovePostFix(&quot;/&quot;) }
    );
}
</code></pre>
<h3>1.3 Run the migration</h3>
<p>Now run the migration to add the client to the DB.</p>
<h2>2. Create Next.js App</h2>
<pre><code class="language-bash">yarn create next-app
</code></pre>
<h2>3. Add next-auth package</h2>
<pre><code class="language-bash">yarn add next-auth
</code></pre>
<h2>4. Add .env file</h2>
<pre><code class="language-bash">NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=https://localhost:44391
IdentityServer4_Domain=localhost:44354
IdentityServer4_CLIENT_ID=Todos_Spa_1
IdentityServer4_CLIENT_SECRET=&quot;1q2w3e*&quot;
NODE_TLS_REJECT_UNAUTHORIZED=0
</code></pre>
<p><code>NEXT_PUBLIC_API_URL</code> is the ABP application url.</p>
<p><code>NEXTAUTH_URL</code> is the nextjs app url.</p>
<p><code>NODE_TLS_REJECT_UNAUTHORIZED</code> is set to 0 to work with ssl in localhost.</p>
<h2>5. Setup next-auth</h2>
<p>create a <code>/pages/api/auth/[...nextauth].js</code> and add the following</p>
<pre><code class="language-js">import NextAuth from &quot;next-auth&quot;;
import Providers from &quot;next-auth/providers&quot;;

export default NextAuth({
  // Configure one or more authentication providers
  providers: [
    Providers.IdentityServer4({
      id: &quot;identity-server4&quot;,
      name: &quot;IdentityServer4&quot;,
      scope: &quot;openid profile email Todos offline_access&quot;, // Allowed Scopes
      domain: process.env.IdentityServer4_Domain,
      clientId: process.env.IdentityServer4_CLIENT_ID,
      clientSecret: process.env.IdentityServer4_CLIENT_SECRET,
    }),
  ],
  callbacks: {
    /**
     * @param  {object} session      Session object
     * @param  {object} token        User object    (if using database sessions)
     *                               JSON Web Token (if not using database sessions)
     * @return {object}              Session that will be returned to the client
     */
    async session(session, token) {
      // Add property to session, like an access_token from a provider.
      session.accessToken = token.accessToken;
      return session;
    },

    async jwt(token, user, account, profile, isNewUser) {
      // Add access_token to the token right after signin
      if (account?.accessToken) {
        token.accessToken = account.accessToken;
      }
      return token;
    },
  },
});
</code></pre>
<h2>6. Create login Component</h2>
<pre><code class="language-js">import React from &quot;react&quot;;
import { signIn, signOut, useSession } from &quot;next-auth/client&quot;;
function Login() {
  const [session, loading] = useSession();

  return (
    &lt;&gt;
      {!session &amp;&amp; (
        &lt;&gt;
          Not signed in &lt;br /&gt;
          &lt;button onClick={() =&gt; signIn(&quot;identity-server4&quot;)}&gt;Sign in&lt;/button&gt;
        &lt;/&gt;
      )}
      {session &amp;&amp; (
        &lt;&gt;
          Signed in as {session.user.email} &lt;br /&gt;
          &lt;button onClick={() =&gt; signOut()}&gt;Sign out&lt;/button&gt;
        &lt;/&gt;
      )}
    &lt;/&gt;
  );
}

export default Login;
</code></pre>
<h2>7. Render the login component</h2>
<p>Now you can render the login component in any page to trigger the auth.</p>
<p><code>&lt;Login&gt;&lt;/Login&gt;</code></p>
<h2>Github Repo Link : https://github.com/antosubash/Todos</h2>]]></content:encoded>
          </item><item>
          <title>ABP Getting Started With .Net Core and EF Core. ABP Part 1</title>
          <link>https://blog.antosubash.com/posts/abp-getting-started-p1</link>
          <guid>https://blog.antosubash.com/posts/abp-getting-started-p1</guid>
          <pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
          <description>This is an introduction to the ABP Application framework with .Net core and EF core. I have created a Todo App with a CRUD function.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Intro</h2>
<p>In this post we will see how to create a CRUD API in ABP Application framework with dotnet core and ef core. It will be simple Todo api.</p>
<p>You can watch the videos or continue with the post.</p>
<p><a href="https://www.youtube.com/watch?v=m8pjAtmpmBI"><img src="https://img.youtube.com/vi/m8pjAtmpmBI/0.jpg" alt="IMAGE ALT TEXT HERE"/></a></p>
<h2>Preparing the Project</h2>
<p>Use the Getting started at https://docs.abp.io/en/abp/latest/getting-started?ui=mvc&amp;db=ef&amp;tiered=no guide to setup the basic abp application</p>
<h2>1. Create an <a href="https://docs.abp.io/en/abp/latest/Entities">Entity</a></h2>
<p>First step is to create an Entity. Create the Entity in the <code>Domain</code> project</p>
<pre><code class="language-cs">public class Todo : Entity&lt;Guid&gt;
{
    public string Content { get; set; }
    public bool IsDone { get; set; }
}
</code></pre>
<h2>2. Add Entity to <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core">ef core</a></h2>
<p>Next is to add Entity to the EF Core. you will find the DbContext in the <code>EntityFrameworkCore</code> project. Add the DbSet to the DbContext</p>
<pre><code class="language-cs">public DbSet&lt;Todo&gt; Todos { get; set; }
</code></pre>
<h2>3. Configure Entity in <a href="https://docs.abp.io/en/abp/latest/Entity-Framework-Core#configurebyconvention-method">ef core</a></h2>
<p>Configuration is done in the <code>DbContextModelCreatingExtensions</code> class. This should be available in the <code>EntityFrameworkCore</code> project</p>
<pre><code class="language-cs">builder.Entity&lt;Todo&gt;(b =&gt;
{
    b.ToTable(TodosConsts.DbTablePrefix + &quot;Todos&quot;, TodosConsts.DbSchema);
    b.ConfigureByConvention(); //auto configure for the base class props
});
</code></pre>
<h2>4. Adding Migrations</h2>
<p>Now the Entity is configured we can add the migrations.</p>
<p>Go the <code>EntityFrameworkCore.DbMigrations</code> project in the terminal and create migrations.</p>
<p>To create migration run this command:</p>
<pre><code class="language-bash">dotnet ef migrations add created_todo
</code></pre>
<p>Verify the migrations created in the migrations folder.</p>
<p>To update the database run this command</p>
<pre><code class="language-bash">dotnet ef database update
</code></pre>
<h2>5. Create a Entity Dto</h2>
<p>Dto are placed in <code>Contracts</code> project</p>
<pre><code class="language-cs">public class TodoDto : EntityDto&lt;Guid&gt;
{
    public string Content { get; set; }
    public bool IsDone { get; set; }
}
</code></pre>
<h2>6. Map Entity to Dto</h2>
<p>Abp uses AutoMapper to map Entity to Dto. you can find the <code>ApplicationAutoMapperProfile</code> file which is used by the AutoMapper in the <code>Application</code> project.</p>
<pre><code class="language-cs">CreateMap&lt;Todo, TodoDto&gt;();
CreateMap&lt;TodoDto, Todo&gt;();
</code></pre>
<h2>7. Create an <a href="https://docs.abp.io/en/abp/latest/Application-Services">Application Services</a></h2>
<p>Application service are created in the <code>Application</code> project</p>
<pre><code class="language-cs">public class TodoAppService : YourProjectAppService
{
    private readonly IRepository&lt;Todo, Guid&gt; todoRepository;

    public TodoAppService(IRepository&lt;Todo, Guid&gt; todoRepository)
    {
        this.todoRepository = todoRepository;
    }

    public async Task&lt;List&lt;TodoDto&gt;&gt; GetAll()
    {
        return ObjectMapper.Map&lt;List&lt;Todo&gt;, List&lt;TodoDto&gt;&gt;(await todoRepository.GetListAsync());
    }

    public async Task&lt;TodoDto&gt; CreateAsync(TodoDto todoDto)
    {
        var todo = ObjectMapper.Map&lt;TodoDto, Todo&gt;(todoDto);
        var createdTodo = await todoRepository.InsertAsync(todo);
        return ObjectMapper.Map&lt;Todo, TodoDto&gt;(createdTodo);
    }

    public async Task&lt;TodoDto&gt; UpdateAsync(TodoDto todoDto)
    {
        var todo = ObjectMapper.Map&lt;TodoDto, Todo&gt;(todoDto);
        var createdTodo = await todoRepository.UpdateAsync(todo);
        return ObjectMapper.Map&lt;Todo, TodoDto&gt;(createdTodo);
    }

    public async Task&lt;bool&gt; DeleteAsync(Guid id)
    {
        var todo = await todoRepository.FirstOrDefaultAsync(x=&gt; x.Id == id);
        if(todo != null)
        {
            await todoRepository.DeleteAsync(todo);
            return true;
        }
        return false;
    }
}
</code></pre>
<p>Once you created the Application configuration ABP can automatically configure your service as API controllers by conventions.</p>
<h2>Github Repo Link : https://github.com/antosubash/Todos</h2>]]></content:encoded>
          </item><item>
          <title>Docker swarm setup for localhost</title>
          <link>https://blog.antosubash.com/posts/docker-swarm-localhost</link>
          <guid>https://blog.antosubash.com/posts/docker-swarm-localhost</guid>
          <pubDate>Sat, 26 Dec 2020 00:00:00 GMT</pubDate>
          <description>In this post we will see how to setup docker swarm for localhost.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<p>Most of the stack used here are available in my github <a href="https://github.com/antosubash/docker_stack">repo</a>.</p>
<h2>My docker localhost setup</h2>
<p>This is my localhost setup.</p>
<h2>Enable swarn mode</h2>
<p><code>docker swarm init</code></p>
<h2>protainer deployment</h2>
<p><code>docker stack deploy --compose-file=portainer-agent-stack.yml portainer</code></p>
<h2>MySql Volume</h2>
<p><code>docker volume create mysql1</code></p>
<h2>Postgres Volume</h2>
<p><code>docker volume create postgres</code></p>
<h2>Mongo Volume</h2>
<p><code>docker volume create mongo1</code></p>
<h2>deploy mysql stack</h2>
<p><code>docker stack deploy --compose-file=mysql_stack.yml mysql</code></p>
<h2>deploy mongodb stack</h2>
<p><code>docker stack deploy --compose-file=mongo_stack.yml mongo</code></p>
<h2>deploy postgres stack</h2>
<p><code>docker stack deploy --compose-file=postgres_stack.yml postgres</code></p>
<h2>docker see the services</h2>
<p><code>docker service ls</code></p>]]></content:encoded>
          </item><item>
          <title>Set up Wsl with zsh and oh-my-zsh</title>
          <link>https://blog.antosubash.com/posts/setup-zsh-and-oh-my-zsh</link>
          <guid>https://blog.antosubash.com/posts/setup-zsh-and-oh-my-zsh</guid>
          <pubDate>Sat, 12 Dec 2020 00:00:00 GMT</pubDate>
          <description>In this post we will see how to setup zsh shell in the wsl and use oh-my-zsh.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<p>In this post we will see how can we install and setup up zsh shell and use oh-my-posh with it in wsl ubuntu.</p>
<h2>Setup Z Shell</h2>
<h3>Install the Z shell and git</h3>
<pre><code class="language-bash">sudo apt install zsh
sudo apt install git
</code></pre>
<h3>Check the Z shell version</h3>
<pre><code class="language-bash">zsh --version
</code></pre>
<h3>Change the default shell</h3>
<pre><code class="language-bash">chsh -s $(which zsh)
</code></pre>
<h2>Log out and login again to use the new default shell</h2>
<h3>Check the current shell</h3>
<pre><code class="language-bash">echo $SHELL // Expected result: /bin/zsh
</code></pre>
<h3>Install Oh My Zsh</h3>
<pre><code class="language-bash">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
</code></pre>
<h2>Install zsh-autosuggestions and zsh-syntax-highlighting</h2>
<h3>Set up zsh-syntax-highlighting</h3>
<ol>
<li>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>):</li>
</ol>
<pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
</code></pre>
<h3>Set up zsh-autosuggestions</h3>
<ol>
<li>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>)</li>
</ol>
<pre><code class="language-sh">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
</code></pre>
<h3>Plugins</h3>
<p>Oh My Zsh comes with a shitload of plugins for you to take advantage of. You can take a look in the <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins">plugins</a> directory and/or the <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">wiki</a> to see what&#x27;s currently available.</p>
<h4>Enabling Plugins</h4>
<p>Once you spot a plugin (or several) that you&#x27;d like to use with Oh My Zsh, you&#x27;ll need to enable them in the <code>.zshrc</code> file. You&#x27;ll find the zshrc file in your <code>$HOME</code> directory. Open it with your favorite text editor and you&#x27;ll see a spot to list all the plugins you want to load.</p>
<pre><code class="language-shell">vi ~/.zshrc
</code></pre>
<p>For example, this might begin to look like this:</p>
<pre><code class="language-shell">plugins=(
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
)
</code></pre>
<h3>Load the config</h3>
<pre><code class="language-sh">source ~/.zshrc
</code></pre>]]></content:encoded>
          </item><item>
          <title>Set up Windows Terminal with PoshGit, oh-my-posh and Cascadia Code PL</title>
          <link>https://blog.antosubash.com/posts/setup-window-terminal-with-poshgit</link>
          <guid>https://blog.antosubash.com/posts/setup-window-terminal-with-poshgit</guid>
          <pubDate>Sat, 05 Dec 2020 00:00:00 GMT</pubDate>
          <description>In this post we will see how to setup windows terminal with PoshGit and oh-my-posh to make the terminal more productive</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Set up Windows Terminal with PoshGit, oh-my-posh and Cascadia Code PLi</h2>
<p>You can watch a videos of how to setup or continue with the post.</p>
<p><a href="https://www.youtube.com/watch?v=cJ7oINPF2mo"><img src="https://img.youtube.com/vi/cJ7oINPF2mo/0.jpg" alt="IMAGE ALT TEXT HERE"/></a></p>
<p>There are few ways to install the window terminal. The easy way is to install from the <a href="https://aka.ms/terminal">windows store</a>. There are few other ways available.</p>
<p>Via <a href="https://github.com/microsoft/winget-cli/">WinGet</a> (official package manager for Windows):</p>
<pre><code>winget install --id=Microsoft.WindowsTerminal -e
</code></pre>
<p>Via <a href="https://chocolatey.org/">Chocolatey</a>:</p>
<pre><code>choco install microsoft-windows-terminal
</code></pre>
<p>Via <a href="https://scoop.sh/">Scoop</a>:</p>
<pre><code>scoop install windows-terminal
</code></pre>
<p>Once the terminal is installed then you have to install 2 important powershell modules they are <code>posh-git</code> and <code>oh-my-posh</code>. <strong>Make sure you open the terminal as Administrator</strong></p>
<pre><code class="language-bash">Install-Module posh-git -Scope CurrentUser
Install-Module oh-my-posh -Scope CurrentUser
</code></pre>
<p>Once module is installed then we have to import the module. We will do this in the powershell profile.</p>
<p>To open the profile type</p>
<pre><code class="language-bash">if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }
notepad $PROFILE
</code></pre>
<p>The above command will check if the profile is already available. if it is not available then it will create one for you. Once created we can open this in the notepad. once the notepad is opened append the following.</p>
<pre><code class="language-bash">Import-Module posh-git
Import-Module oh-my-posh
Set-Theme Paradox
</code></pre>
<p>This will be executed before you open the powershell. we are importing the powershell modules and setting a theme for our powershell.</p>
<p>Now we have to install the font <a href="https://github.com/microsoft/cascadia-code/releases">Cascadia Code PL</a>. You can get it from here https://github.com/microsoft/cascadia-code/releases</p>
<p>Once the font is installed you can set the font in the <a href="https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-settings">profile settings</a>.</p>
<p>here is the sample</p>
<pre><code class="language-json">{
    // Make changes here to the powershell.exe profile.
    &quot;guid&quot;: &quot;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&quot;,
    &quot;name&quot;: &quot;Windows PowerShell&quot;,
    &quot;commandline&quot;: &quot;powershell.exe&quot;,
    &quot;fontFace&quot;: &quot;Cascadia Code PL&quot;,
    &quot;hidden&quot;: false
},
</code></pre>]]></content:encoded>
          </item><item>
          <title>Css for leaflet div element</title>
          <link>https://blog.antosubash.com/posts/css-for-leaflet-div-element</link>
          <guid>https://blog.antosubash.com/posts/css-for-leaflet-div-element</guid>
          <pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate>
          <description>If you are like me who struggle with anything CSS. These are some small css that will help you to fill the leaflet map without setting the fixed height</description>
          <content:encoded><![CDATA[<h2>Css for the leaflet div</h2>
<p>There are a few times when I set the div height to 100% the leaflet map is empty. This is mostly because the div is not fully occupying the entries space available. These are some CSS snippets I use during those times.</p>
<h3>To fill the entire page</h3>
<pre><code class="language-css">#map {
  height: 100vh;
  width: 100vw;
}
</code></pre>
<h3>To fill the entire div</h3>
<pre><code class="language-css">#map {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}
</code></pre>
<h2>Using CSS calc</h2>
<p>Most of the times there will be a Top bar or a Sidebar available in the map during these times the <code>calc</code> function in the css will come in handy. lets assume you have side bar which is <code>100px</code> and top bar which is <code>60px</code> you can use something like below.</p>
<pre><code class="language-css">#map {
  width: calc(100vw - 100px);
  height: calc(100vh - 60px);
  margin-top: 60px;
  margin-left: 100px;
}
</code></pre>]]></content:encoded>
          </item><item>
          <title>Setup docker in Ubuntu 18.04</title>
          <link>https://blog.antosubash.com/posts/setup-docker-node-hetzner</link>
          <guid>https://blog.antosubash.com/posts/setup-docker-node-hetzner</guid>
          <pubDate>Thu, 17 Sep 2020 07:35:07 GMT</pubDate>
          <description>In this post you will see how to setup docker in Ubuntu 18.04. We will also change the default ssh port and install fail2ban.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Adding new user</h2>
<pre><code class="language-bash">adduser docker-login
usermod -aG sudo docker-login
su - docker-login
</code></pre>
<h2>Changing ssh</h2>
<pre><code class="language-bash">nano /etc/ssh/sshd_config

ClientAliveInterval 300
ClientAliveCountMax 1
AllowUsers root docker-login
Port 234
MaxAuthTries 5
AllowTcpForwarding no                   # Disables port forwarding.
AllowAgentForwarding no                 # Disables the forwarding of the SSH login.
</code></pre>
<h2>Refresh and restart</h2>
<pre><code class="language-bash">
sshd -t

systemctl restart sshd
</code></pre>
<h2>Fail2ban</h2>
<pre><code class="language-bash">apt install fail2ban
systemctl enable fail2ban

cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local

nano /etc/fail2ban/jail.local

enabled = true
port = 234

systemctl restart fail2ban
</code></pre>
<h2>Install Docker</h2>
<pre><code class="language-bash">sudo apt update

sudo apt install apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;
sudo apt update
apt-cache policy docker-ce
sudo apt install docker-ce
sudo systemctl status docker
sudo systemctl enable docker
sudo usermod -aG docker ${USER}
su - ${USER}
id -nG
sudo usermod -aG docker docker-login
docker
</code></pre>]]></content:encoded>
          </item><item>
          <title>Traefik setup with docker swarm</title>
          <link>https://blog.antosubash.com/posts/setup-traefik-docker</link>
          <guid>https://blog.antosubash.com/posts/setup-traefik-docker</guid>
          <pubDate>Thu, 17 Sep 2020 05:35:07 GMT</pubDate>
          <description>In this post you will see how to setup traefik with docker swarm. Along with that we will also setup Portainer and Swarmpit so that it is easy to manage the docker swarm.</description>
          <content:encoded><![CDATA[<h2>Table of contents</h2>
<h2>Docker swarm init</h2>
<pre><code class="language-bash">docker swarm init --advertise-addr 10.0.0.3
</code></pre>
<h2>Create a traefik network</h2>
<pre><code class="language-bash">docker network create --driver overlay traefik-public
</code></pre>
<h2>Create a htpasswd password</h2>
<pre><code class="language-bash">docker run --rm httpd:2.4-alpine htpasswd -nbB admin &lt;password&gt; | cut -d &quot;:&quot; -f 2
</code></pre>
<p>Escape the $ sign in the password by adding one more $</p>
<h2>Create folders</h2>
<h3>for Traefik</h3>
<p>create a folder and set 600 as permission.</p>
<pre><code class="language-bash">mkdir /home/docker-login/data/traefik
touch /home/docker-login/data/traefik/acme.json
chmod 600 /home/docker-login/data/traefik/acme.json
</code></pre>
<h3>for Swarmpit</h3>
<pre><code class="language-bash">mkdir /home/docker-login/data/db-data
mkdir /home/docker-login/data/influx-data
</code></pre>
<h3>for Portainer</h3>
<pre><code class="language-bash">mkdir /mnt/volume2/portainer
</code></pre>
<h2>Traefik docker compose yml</h2>
<p>Sample yml</p>
<pre><code class="language-yml">version: &quot;3.3&quot;

services:
  traefik:
    image: &quot;traefik:v2.1.4&quot;
    command:
      - --log.level=INFO
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode=true
      - --providers.docker.network=traefik-public
      - --api
      - --api.dashboard=true
      - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      # update your email here
      - --certificatesresolvers.leresolver.acme.email=youremail@test.com
      # Make sure the this file is available and permission is set correctly
      - --certificatesresolvers.leresolver.acme.storage=/le/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
    ports:
      - &quot;80:80&quot;
      - &quot;443:443&quot;
    networks:
      - traefik-public
    volumes:
      - &quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot;
      # Make sure the volume folder is created
      - &quot;/home/docker-login/data/traefik/acme.json:/le/acme.json&quot;
    deploy:
      labels:
        # Dashboard
        - &quot;traefik.enable=true&quot;
        # Change the host url here
        - &quot;traefik.http.routers.traefik.rule=Host(`traefik.example.com`)&quot;
        - &quot;traefik.http.routers.traefik.service=api@internal&quot;
        - &quot;traefik.http.services.traefik.loadbalancer.server.port=8080&quot;
        - &quot;traefik.http.routers.traefik.tls.certresolver=leresolver&quot;
        - &quot;traefik.http.routers.traefik.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.traefik.middlewares=authtraefik&quot;
        # Change the auth password here
        - &quot;traefik.http.middlewares.authtraefik.basicauth.users=admin:yournewpassword&quot; # user/password

        # global redirect to https
        - &quot;traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)&quot;
        - &quot;traefik.http.routers.http-catchall.entrypoints=web&quot;
        - &quot;traefik.http.routers.http-catchall.middlewares=redirect-to-https&quot;

        # middleware redirect
        - &quot;traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https&quot;

  my-app:
    image: containous/whoami:v1.3.0
    networks:
      - traefik-public
    command:
      - --port=8082 # Our service listens on 8082
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        # Change the host url here
        - &quot;traefik.http.routers.my-app.rule=Host(`whoami.example.com`)&quot;
        - &quot;traefik.http.services.my-app.loadbalancer.server.port=8082&quot;
        - &quot;traefik.http.routers.my-app.middlewares=auth&quot;
        - &quot;traefik.http.routers.my-app.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.my-app.tls=true&quot;
        - &quot;traefik.http.routers.my-app.tls.certresolver=leresolver&quot;
        # Change the password here
        - &quot;traefik.http.middlewares.auth.basicauth.users=admin:changeme&quot; # user/password

networks:
  traefik-public:
    external: true
</code></pre>
<h2>Swarmpit Docker compose</h2>
<p>Make sure the service name for swarmpit is &quot;app&quot;</p>
<pre><code class="language-yml">version: &quot;3.3&quot;

services:
  app:
    image: swarmpit/swarmpit:latest
    environment:
      - SWARMPIT_DB=http://db:5984
      - SWARMPIT_INFLUXDB=http://influxdb:8086
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-public
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        # change the host name here
        - &quot;traefik.http.routers.app.rule=Host(`swarm.example.com`)&quot;
        - &quot;traefik.http.services.app.loadbalancer.server.port=8080&quot;
        - &quot;traefik.http.routers.app.tls=true&quot;
        - &quot;traefik.http.routers.app.tls.certresolver=leresolver&quot;
        - &quot;traefik.docker.network=traefik-public&quot;
      resources:
        limits:
          cpus: &quot;0.50&quot;
          memory: 1024M
        reservations:
          cpus: &quot;0.25&quot;
          memory: 512M
      placement:
        constraints:
          - node.role == manager

  db:
    image: couchdb:2.3.0
    volumes:
      # make sure the folder is available
      - /home/docker-login/data/db-data:/opt/couchdb/data
    networks:
      - traefik-public
    deploy:
      resources:
        limits:
          cpus: &quot;0.30&quot;
          memory: 256M
        reservations:
          cpus: &quot;0.15&quot;
          memory: 128M

  influxdb:
    image: influxdb:1.7
    volumes:
      # make sure the folder is available
      - /home/docker-login/data/influx-data:/var/lib/influxdb
    networks:
      - traefik-public
    deploy:
      resources:
        limits:
          cpus: &quot;0.60&quot;
          memory: 512M
        reservations:
          cpus: &quot;0.30&quot;
          memory: 128M

  agent:
    image: swarmpit/agent:latest
    environment:
      - DOCKER_API_VERSION=1.35
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-public
    deploy:
      mode: global
      labels:
        swarmpit.agent: &quot;true&quot;
      resources:
        limits:
          cpus: &quot;0.10&quot;
          memory: 64M
        reservations:
          cpus: &quot;0.05&quot;
          memory: 32M

networks:
  traefik-public:
    external: true
</code></pre>
<h2>Portainer</h2>
<pre><code class="language-yml">version: &quot;3.2&quot;

services:
  agent:
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - traefik-public
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # make sure the folder is available
      - /mnt/volume2/portainer:/data
    networks:
      - traefik-public
    deploy:
      labels:
        - &quot;traefik.enable=true&quot;
        # change the host here
        - &quot;traefik.http.routers.portainer.rule=Host(`admin.example.com`)&quot;
        - &quot;traefik.http.services.portainer.loadbalancer.server.port=9000&quot;
        - &quot;traefik.http.routers.portainer.entrypoints=websecure&quot;
        - &quot;traefik.http.routers.portainer.tls=true&quot;
        - &quot;traefik.http.routers.portainer.tls.certresolver=leresolver&quot;
      mode: replicated
      placement:
        constraints: [node.role == manager]

networks:
  traefik-public:
    external: true
</code></pre>]]></content:encoded>
          </item>
        </channel>
        </rss>